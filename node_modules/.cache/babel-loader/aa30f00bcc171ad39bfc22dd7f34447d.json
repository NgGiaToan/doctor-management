{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;\n\nconst rules_1 = require(\"../rules\");\n\nconst applicability_1 = require(\"./applicability\");\n\nconst errors_1 = require(\"../errors\");\n\nconst codegen_1 = require(\"../codegen\");\n\nconst util_1 = require(\"../util\");\n\nvar DataType;\n\n(function (DataType) {\n  DataType[DataType[\"Correct\"] = 0] = \"Correct\";\n  DataType[DataType[\"Wrong\"] = 1] = \"Wrong\";\n})(DataType = exports.DataType || (exports.DataType = {}));\n\nfunction getSchemaTypes(schema) {\n  const types = getJSONTypes(schema.type);\n  const hasNull = types.includes(\"null\");\n\n  if (hasNull) {\n    if (schema.nullable === false) throw new Error(\"type: null contradicts nullable: false\");\n  } else {\n    if (!types.length && schema.nullable !== undefined) {\n      throw new Error('\"nullable\" cannot be used without \"type\"');\n    }\n\n    if (schema.nullable === true) types.push(\"null\");\n  }\n\n  return types;\n}\n\nexports.getSchemaTypes = getSchemaTypes;\n\nfunction getJSONTypes(ts) {\n  const types = Array.isArray(ts) ? ts : ts ? [ts] : [];\n  if (types.every(rules_1.isJSONType)) return types;\n  throw new Error(\"type must be JSONType or JSONType[]: \" + types.join(\",\"));\n}\n\nexports.getJSONTypes = getJSONTypes;\n\nfunction coerceAndCheckDataType(it, types) {\n  const {\n    gen,\n    data,\n    opts\n  } = it;\n  const coerceTo = coerceToTypes(types, opts.coerceTypes);\n  const checkTypes = types.length > 0 && !(coerceTo.length === 0 && types.length === 1 && applicability_1.schemaHasRulesForType(it, types[0]));\n\n  if (checkTypes) {\n    const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);\n    gen.if(wrongType, () => {\n      if (coerceTo.length) coerceData(it, types, coerceTo);else reportTypeError(it);\n    });\n  }\n\n  return checkTypes;\n}\n\nexports.coerceAndCheckDataType = coerceAndCheckDataType;\nconst COERCIBLE = new Set([\"string\", \"number\", \"integer\", \"boolean\", \"null\"]);\n\nfunction coerceToTypes(types, coerceTypes) {\n  return coerceTypes ? types.filter(t => COERCIBLE.has(t) || coerceTypes === \"array\" && t === \"array\") : [];\n}\n\nfunction coerceData(it, types, coerceTo) {\n  const {\n    gen,\n    data,\n    opts\n  } = it;\n  const dataType = gen.let(\"dataType\", codegen_1._`typeof ${data}`);\n  const coerced = gen.let(\"coerced\", codegen_1._`undefined`);\n\n  if (opts.coerceTypes === \"array\") {\n    gen.if(codegen_1._`${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen.assign(data, codegen_1._`${data}[0]`).assign(dataType, codegen_1._`typeof ${data}`).if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));\n  }\n\n  gen.if(codegen_1._`${coerced} !== undefined`);\n\n  for (const t of coerceTo) {\n    if (COERCIBLE.has(t) || t === \"array\" && opts.coerceTypes === \"array\") {\n      coerceSpecificType(t);\n    }\n  }\n\n  gen.else();\n  reportTypeError(it);\n  gen.endIf();\n  gen.if(codegen_1._`${coerced} !== undefined`, () => {\n    gen.assign(data, coerced);\n    assignParentData(it, coerced);\n  });\n\n  function coerceSpecificType(t) {\n    switch (t) {\n      case \"string\":\n        gen.elseIf(codegen_1._`${dataType} == \"number\" || ${dataType} == \"boolean\"`).assign(coerced, codegen_1._`\"\" + ${data}`).elseIf(codegen_1._`${data} === null`).assign(coerced, codegen_1._`\"\"`);\n        return;\n\n      case \"number\":\n        gen.elseIf(codegen_1._`${dataType} == \"boolean\" || ${data} === null\n              || (${dataType} == \"string\" && ${data} && ${data} == +${data})`).assign(coerced, codegen_1._`+${data}`);\n        return;\n\n      case \"integer\":\n        gen.elseIf(codegen_1._`${dataType} === \"boolean\" || ${data} === null\n              || (${dataType} === \"string\" && ${data} && ${data} == +${data} && !(${data} % 1))`).assign(coerced, codegen_1._`+${data}`);\n        return;\n\n      case \"boolean\":\n        gen.elseIf(codegen_1._`${data} === \"false\" || ${data} === 0 || ${data} === null`).assign(coerced, false).elseIf(codegen_1._`${data} === \"true\" || ${data} === 1`).assign(coerced, true);\n        return;\n\n      case \"null\":\n        gen.elseIf(codegen_1._`${data} === \"\" || ${data} === 0 || ${data} === false`);\n        gen.assign(coerced, null);\n        return;\n\n      case \"array\":\n        gen.elseIf(codegen_1._`${dataType} === \"string\" || ${dataType} === \"number\"\n              || ${dataType} === \"boolean\" || ${data} === null`).assign(coerced, codegen_1._`[${data}]`);\n    }\n  }\n}\n\nfunction assignParentData(_ref, expr) {\n  let {\n    gen,\n    parentData,\n    parentDataProperty\n  } = _ref;\n  // TODO use gen.property\n  gen.if(codegen_1._`${parentData} !== undefined`, () => gen.assign(codegen_1._`${parentData}[${parentDataProperty}]`, expr));\n}\n\nfunction checkDataType(dataType, data, strictNums) {\n  let correct = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DataType.Correct;\n  const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;\n  let cond;\n\n  switch (dataType) {\n    case \"null\":\n      return codegen_1._`${data} ${EQ} null`;\n\n    case \"array\":\n      cond = codegen_1._`Array.isArray(${data})`;\n      break;\n\n    case \"object\":\n      cond = codegen_1._`${data} && typeof ${data} == \"object\" && !Array.isArray(${data})`;\n      break;\n\n    case \"integer\":\n      cond = numCond(codegen_1._`!(${data} % 1) && !isNaN(${data})`);\n      break;\n\n    case \"number\":\n      cond = numCond();\n      break;\n\n    default:\n      return codegen_1._`typeof ${data} ${EQ} ${dataType}`;\n  }\n\n  return correct === DataType.Correct ? cond : codegen_1.not(cond);\n\n  function numCond() {\n    let _cond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : codegen_1.nil;\n\n    return codegen_1.and(codegen_1._`typeof ${data} == \"number\"`, _cond, strictNums ? codegen_1._`isFinite(${data})` : codegen_1.nil);\n  }\n}\n\nexports.checkDataType = checkDataType;\n\nfunction checkDataTypes(dataTypes, data, strictNums, correct) {\n  if (dataTypes.length === 1) {\n    return checkDataType(dataTypes[0], data, strictNums, correct);\n  }\n\n  let cond;\n  const types = util_1.toHash(dataTypes);\n\n  if (types.array && types.object) {\n    const notObj = codegen_1._`typeof ${data} != \"object\"`;\n    cond = types.null ? notObj : codegen_1._`!${data} || ${notObj}`;\n    delete types.null;\n    delete types.array;\n    delete types.object;\n  } else {\n    cond = codegen_1.nil;\n  }\n\n  if (types.number) delete types.integer;\n\n  for (const t in types) cond = codegen_1.and(cond, checkDataType(t, data, strictNums, correct));\n\n  return cond;\n}\n\nexports.checkDataTypes = checkDataTypes;\nconst typeError = {\n  message: _ref2 => {\n    let {\n      schema\n    } = _ref2;\n    return `must be ${schema}`;\n  },\n  params: _ref3 => {\n    let {\n      schema,\n      schemaValue\n    } = _ref3;\n    return typeof schema == \"string\" ? codegen_1._`{type: ${schema}}` : codegen_1._`{type: ${schemaValue}}`;\n  }\n};\n\nfunction reportTypeError(it) {\n  const cxt = getTypeErrorContext(it);\n  errors_1.reportError(cxt, typeError);\n}\n\nexports.reportTypeError = reportTypeError;\n\nfunction getTypeErrorContext(it) {\n  const {\n    gen,\n    data,\n    schema\n  } = it;\n  const schemaCode = util_1.schemaRefOrVal(it, schema, \"type\");\n  return {\n    gen,\n    keyword: \"type\",\n    data,\n    schema: schema.type,\n    schemaCode,\n    schemaValue: schemaCode,\n    parentSchema: schema,\n    params: {},\n    it\n  };\n}","map":{"version":3,"mappings":"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","names":["DataType","exports","getSchemaTypes","schema","types","getJSONTypes","type","hasNull","includes","nullable","Error","length","undefined","push","ts","Array","isArray","every","rules_1","join","coerceAndCheckDataType","it","gen","data","opts","coerceTo","coerceToTypes","coerceTypes","checkTypes","applicability_1","wrongType","checkDataTypes","strictNumbers","Wrong","if","coerceData","reportTypeError","COERCIBLE","Set","filter","t","has","dataType","let","codegen_1","coerced","assign","coerceSpecificType","else","endIf","assignParentData","elseIf","expr","parentData","parentDataProperty","checkDataType","strictNums","correct","Correct","EQ","NEQ","cond","numCond","_cond","dataTypes","util_1","array","object","notObj","null","number","integer","typeError","message","params","schemaValue","cxt","getTypeErrorContext","errors_1","schemaCode","keyword","parentSchema"],"sources":["C:\\Users\\giato\\Downloads\\Workspace\\.Net\\api\\doctor-management-fe\\node_modules\\@redocly\\ajv\\lib\\compile\\validate\\dataType.ts"],"sourcesContent":["import type {\n  KeywordErrorDefinition,\n  KeywordErrorCxt,\n  ErrorObject,\n  AnySchemaObject,\n} from \"../../types\"\nimport type {SchemaObjCxt} from \"..\"\nimport {isJSONType, JSONType} from \"../rules\"\nimport {schemaHasRulesForType} from \"./applicability\"\nimport {reportError} from \"../errors\"\nimport {_, nil, and, not, operators, Code, Name} from \"../codegen\"\nimport {toHash, schemaRefOrVal} from \"../util\"\n\nexport enum DataType {\n  Correct,\n  Wrong,\n}\n\nexport function getSchemaTypes(schema: AnySchemaObject): JSONType[] {\n  const types = getJSONTypes(schema.type)\n  const hasNull = types.includes(\"null\")\n  if (hasNull) {\n    if (schema.nullable === false) throw new Error(\"type: null contradicts nullable: false\")\n  } else {\n    if (!types.length && schema.nullable !== undefined) {\n      throw new Error('\"nullable\" cannot be used without \"type\"')\n    }\n    if (schema.nullable === true) types.push(\"null\")\n  }\n  return types\n}\n\nexport function getJSONTypes(ts: unknown | unknown[]): JSONType[] {\n  const types: unknown[] = Array.isArray(ts) ? ts : ts ? [ts] : []\n  if (types.every(isJSONType)) return types\n  throw new Error(\"type must be JSONType or JSONType[]: \" + types.join(\",\"))\n}\n\nexport function coerceAndCheckDataType(it: SchemaObjCxt, types: JSONType[]): boolean {\n  const {gen, data, opts} = it\n  const coerceTo = coerceToTypes(types, opts.coerceTypes)\n  const checkTypes =\n    types.length > 0 &&\n    !(coerceTo.length === 0 && types.length === 1 && schemaHasRulesForType(it, types[0]))\n  if (checkTypes) {\n    const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong)\n    gen.if(wrongType, () => {\n      if (coerceTo.length) coerceData(it, types, coerceTo)\n      else reportTypeError(it)\n    })\n  }\n  return checkTypes\n}\n\nconst COERCIBLE: Set<JSONType> = new Set([\"string\", \"number\", \"integer\", \"boolean\", \"null\"])\nfunction coerceToTypes(types: JSONType[], coerceTypes?: boolean | \"array\"): JSONType[] {\n  return coerceTypes\n    ? types.filter((t) => COERCIBLE.has(t) || (coerceTypes === \"array\" && t === \"array\"))\n    : []\n}\n\nfunction coerceData(it: SchemaObjCxt, types: JSONType[], coerceTo: JSONType[]): void {\n  const {gen, data, opts} = it\n  const dataType = gen.let(\"dataType\", _`typeof ${data}`)\n  const coerced = gen.let(\"coerced\", _`undefined`)\n  if (opts.coerceTypes === \"array\") {\n    gen.if(_`${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () =>\n      gen\n        .assign(data, _`${data}[0]`)\n        .assign(dataType, _`typeof ${data}`)\n        .if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data))\n    )\n  }\n  gen.if(_`${coerced} !== undefined`)\n  for (const t of coerceTo) {\n    if (COERCIBLE.has(t) || (t === \"array\" && opts.coerceTypes === \"array\")) {\n      coerceSpecificType(t)\n    }\n  }\n  gen.else()\n  reportTypeError(it)\n  gen.endIf()\n\n  gen.if(_`${coerced} !== undefined`, () => {\n    gen.assign(data, coerced)\n    assignParentData(it, coerced)\n  })\n\n  function coerceSpecificType(t: string): void {\n    switch (t) {\n      case \"string\":\n        gen\n          .elseIf(_`${dataType} == \"number\" || ${dataType} == \"boolean\"`)\n          .assign(coerced, _`\"\" + ${data}`)\n          .elseIf(_`${data} === null`)\n          .assign(coerced, _`\"\"`)\n        return\n      case \"number\":\n        gen\n          .elseIf(\n            _`${dataType} == \"boolean\" || ${data} === null\n              || (${dataType} == \"string\" && ${data} && ${data} == +${data})`\n          )\n          .assign(coerced, _`+${data}`)\n        return\n      case \"integer\":\n        gen\n          .elseIf(\n            _`${dataType} === \"boolean\" || ${data} === null\n              || (${dataType} === \"string\" && ${data} && ${data} == +${data} && !(${data} % 1))`\n          )\n          .assign(coerced, _`+${data}`)\n        return\n      case \"boolean\":\n        gen\n          .elseIf(_`${data} === \"false\" || ${data} === 0 || ${data} === null`)\n          .assign(coerced, false)\n          .elseIf(_`${data} === \"true\" || ${data} === 1`)\n          .assign(coerced, true)\n        return\n      case \"null\":\n        gen.elseIf(_`${data} === \"\" || ${data} === 0 || ${data} === false`)\n        gen.assign(coerced, null)\n        return\n\n      case \"array\":\n        gen\n          .elseIf(\n            _`${dataType} === \"string\" || ${dataType} === \"number\"\n              || ${dataType} === \"boolean\" || ${data} === null`\n          )\n          .assign(coerced, _`[${data}]`)\n    }\n  }\n}\n\nfunction assignParentData({gen, parentData, parentDataProperty}: SchemaObjCxt, expr: Name): void {\n  // TODO use gen.property\n  gen.if(_`${parentData} !== undefined`, () =>\n    gen.assign(_`${parentData}[${parentDataProperty}]`, expr)\n  )\n}\n\nexport function checkDataType(\n  dataType: JSONType,\n  data: Name,\n  strictNums?: boolean | \"log\",\n  correct = DataType.Correct\n): Code {\n  const EQ = correct === DataType.Correct ? operators.EQ : operators.NEQ\n  let cond: Code\n  switch (dataType) {\n    case \"null\":\n      return _`${data} ${EQ} null`\n    case \"array\":\n      cond = _`Array.isArray(${data})`\n      break\n    case \"object\":\n      cond = _`${data} && typeof ${data} == \"object\" && !Array.isArray(${data})`\n      break\n    case \"integer\":\n      cond = numCond(_`!(${data} % 1) && !isNaN(${data})`)\n      break\n    case \"number\":\n      cond = numCond()\n      break\n    default:\n      return _`typeof ${data} ${EQ} ${dataType}`\n  }\n  return correct === DataType.Correct ? cond : not(cond)\n\n  function numCond(_cond: Code = nil): Code {\n    return and(_`typeof ${data} == \"number\"`, _cond, strictNums ? _`isFinite(${data})` : nil)\n  }\n}\n\nexport function checkDataTypes(\n  dataTypes: JSONType[],\n  data: Name,\n  strictNums?: boolean | \"log\",\n  correct?: DataType\n): Code {\n  if (dataTypes.length === 1) {\n    return checkDataType(dataTypes[0], data, strictNums, correct)\n  }\n  let cond: Code\n  const types = toHash(dataTypes)\n  if (types.array && types.object) {\n    const notObj = _`typeof ${data} != \"object\"`\n    cond = types.null ? notObj : _`!${data} || ${notObj}`\n    delete types.null\n    delete types.array\n    delete types.object\n  } else {\n    cond = nil\n  }\n  if (types.number) delete types.integer\n  for (const t in types) cond = and(cond, checkDataType(t as JSONType, data, strictNums, correct))\n  return cond\n}\n\nexport type TypeError = ErrorObject<\"type\", {type: string}>\n\nconst typeError: KeywordErrorDefinition = {\n  message: ({schema}) => `must be ${schema}`,\n  params: ({schema, schemaValue}) =>\n    typeof schema == \"string\" ? _`{type: ${schema}}` : _`{type: ${schemaValue}}`,\n}\n\nexport function reportTypeError(it: SchemaObjCxt): void {\n  const cxt = getTypeErrorContext(it)\n  reportError(cxt, typeError)\n}\n\nfunction getTypeErrorContext(it: SchemaObjCxt): KeywordErrorCxt {\n  const {gen, data, schema} = it\n  const schemaCode = schemaRefOrVal(it, schema, \"type\")\n  return {\n    gen,\n    keyword: \"type\",\n    data,\n    schema: schema.type,\n    schemaCode,\n    schemaValue: schemaCode,\n    parentSchema: schema,\n    params: {},\n    it,\n  }\n}\n"]},"metadata":{},"sourceType":"script"}