{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef } from 'react';\n\nfunction usePrevious(value) {\n  _s();\n\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef(); // Store current value in ref\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n\n  return ref.current;\n}\n\n_s(usePrevious, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\nexport default usePrevious;","map":{"version":3,"names":["useEffect","useRef","usePrevious","value","ref","current"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/src/@fuse/hooks/usePrevious.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\r\n\r\nfunction usePrevious(value) {\r\n  // The ref object is a generic container whose current property is mutable ...\r\n  // ... and can hold any value, similar to an instance property on a class\r\n  const ref = useRef();\r\n\r\n  // Store current value in ref\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]); // Only re-run if value changes\r\n\r\n  // Return previous value (happens before update in useEffect above)\r\n  return ref.current;\r\n}\r\n\r\nexport default usePrevious;\r\n"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;EAAA;;EAC1B;EACA;EACA,MAAMC,GAAG,GAAGH,MAAM,EAAlB,CAH0B,CAK1B;;EACAD,SAAS,CAAC,MAAM;IACdI,GAAG,CAACC,OAAJ,GAAcF,KAAd;EACD,CAFQ,EAEN,CAACA,KAAD,CAFM,CAAT,CAN0B,CAQb;EAEb;;EACA,OAAOC,GAAG,CAACC,OAAX;AACD;;GAZQH,W;;AAcT,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}