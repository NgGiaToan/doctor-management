{"ast":null,"code":"import { createAsyncThunk, createEntityAdapter, createSelector, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport FuseUtils from '@fuse/utils';\nimport { addContact, removeContact, updateContact } from './contactSlice';\nexport const getContacts = createAsyncThunk('contactsApp/contacts/getContacts', async (params, _ref) => {\n  let {\n    getState\n  } = _ref;\n  const response = await axios.get('/api/contacts');\n  const data = await response.data;\n  return {\n    data\n  };\n});\nconst contactsAdapter = createEntityAdapter({});\nexport const selectSearchText = _ref2 => {\n  let {\n    contactsApp\n  } = _ref2;\n  return contactsApp.contacts.searchText;\n};\nexport const {\n  selectAll: selectContacts,\n  selectById: selectContactsById\n} = contactsAdapter.getSelectors(state => state.contactsApp.contacts);\nexport const selectFilteredContacts = createSelector([selectContacts, selectSearchText], (contacts, searchText) => {\n  if (searchText.length === 0) {\n    return contacts;\n  }\n\n  return FuseUtils.filterArrayByString(contacts, searchText);\n});\nexport const selectGroupedFilteredContacts = createSelector([selectFilteredContacts], contacts => {\n  return contacts.sort((a, b) => a.name.localeCompare(b.name, 'es', {\n    sensitivity: 'base'\n  })).reduce((r, e) => {\n    // get first letter of name of current element\n    const group = e.name[0]; // if there is no property in accumulator with this letter create it\n\n    if (!r[group]) r[group] = {\n      group,\n      children: [e]\n    }; // if there is push current element to children array for that letter\n    else r[group].children.push(e); // return accumulator\n\n    return r;\n  }, {});\n});\nconst contactsSlice = createSlice({\n  name: 'contactsApp/contacts',\n  initialState: contactsAdapter.getInitialState({\n    searchText: ''\n  }),\n  reducers: {\n    setContactsSearchText: {\n      reducer: (state, action) => {\n        state.searchText = action.payload;\n      },\n      prepare: event => ({\n        payload: event.target.value || ''\n      })\n    }\n  },\n  extraReducers: {\n    [updateContact.fulfilled]: contactsAdapter.upsertOne,\n    [addContact.fulfilled]: contactsAdapter.addOne,\n    [removeContact.fulfilled]: (state, action) => contactsAdapter.removeOne(state, action.payload),\n    [getContacts.fulfilled]: (state, action) => {\n      const {\n        data,\n        routeParams\n      } = action.payload;\n      contactsAdapter.setAll(state, data);\n      state.searchText = '';\n    }\n  }\n});\nexport const {\n  setContactsSearchText\n} = contactsSlice.actions;\nexport default contactsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createEntityAdapter","createSelector","createSlice","axios","FuseUtils","addContact","removeContact","updateContact","getContacts","params","getState","response","get","data","contactsAdapter","selectSearchText","contactsApp","contacts","searchText","selectAll","selectContacts","selectById","selectContactsById","getSelectors","state","selectFilteredContacts","length","filterArrayByString","selectGroupedFilteredContacts","sort","a","b","name","localeCompare","sensitivity","reduce","r","e","group","children","push","contactsSlice","initialState","getInitialState","reducers","setContactsSearchText","reducer","action","payload","prepare","event","target","value","extraReducers","fulfilled","upsertOne","addOne","removeOne","routeParams","setAll","actions"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/src/app/main/apps/contacts/store/contactsSlice.js"],"sourcesContent":["import {\r\n  createAsyncThunk,\r\n  createEntityAdapter,\r\n  createSelector,\r\n  createSlice,\r\n} from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport FuseUtils from '@fuse/utils';\r\nimport { addContact, removeContact, updateContact } from './contactSlice';\r\n\r\nexport const getContacts = createAsyncThunk(\r\n  'contactsApp/contacts/getContacts',\r\n  async (params, { getState }) => {\r\n    const response = await axios.get('/api/contacts');\r\n\r\n    const data = await response.data;\r\n\r\n    return { data };\r\n  }\r\n);\r\n\r\nconst contactsAdapter = createEntityAdapter({});\r\n\r\nexport const selectSearchText = ({ contactsApp }) => contactsApp.contacts.searchText;\r\n\r\nexport const { selectAll: selectContacts, selectById: selectContactsById } =\r\n  contactsAdapter.getSelectors((state) => state.contactsApp.contacts);\r\n\r\nexport const selectFilteredContacts = createSelector(\r\n  [selectContacts, selectSearchText],\r\n  (contacts, searchText) => {\r\n    if (searchText.length === 0) {\r\n      return contacts;\r\n    }\r\n    return FuseUtils.filterArrayByString(contacts, searchText);\r\n  }\r\n);\r\n\r\nexport const selectGroupedFilteredContacts = createSelector(\r\n  [selectFilteredContacts],\r\n  (contacts) => {\r\n    return contacts\r\n      .sort((a, b) => a.name.localeCompare(b.name, 'es', { sensitivity: 'base' }))\r\n      .reduce((r, e) => {\r\n        // get first letter of name of current element\r\n        const group = e.name[0];\r\n        // if there is no property in accumulator with this letter create it\r\n        if (!r[group]) r[group] = { group, children: [e] };\r\n        // if there is push current element to children array for that letter\r\n        else r[group].children.push(e);\r\n        // return accumulator\r\n        return r;\r\n      }, {});\r\n  }\r\n);\r\n\r\nconst contactsSlice = createSlice({\r\n  name: 'contactsApp/contacts',\r\n  initialState: contactsAdapter.getInitialState({\r\n    searchText: '',\r\n  }),\r\n  reducers: {\r\n    setContactsSearchText: {\r\n      reducer: (state, action) => {\r\n        state.searchText = action.payload;\r\n      },\r\n      prepare: (event) => ({ payload: event.target.value || '' }),\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [updateContact.fulfilled]: contactsAdapter.upsertOne,\r\n    [addContact.fulfilled]: contactsAdapter.addOne,\r\n    [removeContact.fulfilled]: (state, action) => contactsAdapter.removeOne(state, action.payload),\r\n    [getContacts.fulfilled]: (state, action) => {\r\n      const { data, routeParams } = action.payload;\r\n      contactsAdapter.setAll(state, data);\r\n      state.searchText = '';\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setContactsSearchText } = contactsSlice.actions;\r\n\r\nexport default contactsSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}