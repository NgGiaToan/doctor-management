{"ast":null,"code":"(function (Prism) {\n  /**\n   * @param {string} name\n   * @returns {RegExp}\n   */\n  function headerValueOf(name) {\n    return RegExp('(^(?:' + name + '):[ \\t]*(?![ \\t]))[^]+', 'i');\n  }\n\n  Prism.languages.http = {\n    'request-line': {\n      pattern: /^(?:CONNECT|DELETE|GET|HEAD|OPTIONS|PATCH|POST|PRI|PUT|SEARCH|TRACE)\\s(?:https?:\\/\\/|\\/)\\S*\\sHTTP\\/[\\d.]+/m,\n      inside: {\n        // HTTP Method\n        'method': {\n          pattern: /^[A-Z]+\\b/,\n          alias: 'property'\n        },\n        // Request Target e.g. http://example.com, /path/to/file\n        'request-target': {\n          pattern: /^(\\s)(?:https?:\\/\\/|\\/)\\S*(?=\\s)/,\n          lookbehind: true,\n          alias: 'url',\n          inside: Prism.languages.uri\n        },\n        // HTTP Version\n        'http-version': {\n          pattern: /^(\\s)HTTP\\/[\\d.]+/,\n          lookbehind: true,\n          alias: 'property'\n        }\n      }\n    },\n    'response-status': {\n      pattern: /^HTTP\\/[\\d.]+ \\d+ .+/m,\n      inside: {\n        // HTTP Version\n        'http-version': {\n          pattern: /^HTTP\\/[\\d.]+/,\n          alias: 'property'\n        },\n        // Status Code\n        'status-code': {\n          pattern: /^(\\s)\\d+(?=\\s)/,\n          lookbehind: true,\n          alias: 'number'\n        },\n        // Reason Phrase\n        'reason-phrase': {\n          pattern: /^(\\s).+/,\n          lookbehind: true,\n          alias: 'string'\n        }\n      }\n    },\n    'header': {\n      pattern: /^[\\w-]+:.+(?:(?:\\r\\n?|\\n)[ \\t].+)*/m,\n      inside: {\n        'header-value': [{\n          pattern: headerValueOf(/Content-Security-Policy/.source),\n          lookbehind: true,\n          alias: ['csp', 'languages-csp'],\n          inside: Prism.languages.csp\n        }, {\n          pattern: headerValueOf(/Public-Key-Pins(?:-Report-Only)?/.source),\n          lookbehind: true,\n          alias: ['hpkp', 'languages-hpkp'],\n          inside: Prism.languages.hpkp\n        }, {\n          pattern: headerValueOf(/Strict-Transport-Security/.source),\n          lookbehind: true,\n          alias: ['hsts', 'languages-hsts'],\n          inside: Prism.languages.hsts\n        }, {\n          pattern: headerValueOf(/[^:]+/.source),\n          lookbehind: true\n        }],\n        'header-name': {\n          pattern: /^[^:]+/,\n          alias: 'keyword'\n        },\n        'punctuation': /^:/\n      }\n    }\n  }; // Create a mapping of Content-Type headers to language definitions\n\n  var langs = Prism.languages;\n  var httpLanguages = {\n    'application/javascript': langs.javascript,\n    'application/json': langs.json || langs.javascript,\n    'application/xml': langs.xml,\n    'text/xml': langs.xml,\n    'text/html': langs.html,\n    'text/css': langs.css,\n    'text/plain': langs.plain\n  }; // Declare which types can also be suffixes\n\n  var suffixTypes = {\n    'application/json': true,\n    'application/xml': true\n  };\n  /**\n   * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n   *\n   * @param {string} contentType\n   * @returns {string}\n   */\n\n  function getSuffixPattern(contentType) {\n    var suffix = contentType.replace(/^[a-z]+\\//, '');\n    var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])';\n    return '(?:' + contentType + '|' + suffixPattern + ')';\n  } // Insert each content type parser that has its associated language\n  // currently loaded.\n\n\n  var options;\n\n  for (var contentType in httpLanguages) {\n    if (httpLanguages[contentType]) {\n      options = options || {};\n      var pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;\n      options[contentType.replace(/\\//g, '-')] = {\n        pattern: RegExp('(' + /content-type:\\s*/.source + pattern + /(?:(?:\\r\\n?|\\n)[\\w-].*)*(?:\\r(?:\\n|(?!\\n))|\\n)/.source + ')' + // This is a little interesting:\n        // The HTTP format spec required 1 empty line before the body to make everything unambiguous.\n        // However, when writing code by hand (e.g. to display on a website) people can forget about this,\n        // so we want to be liberal here. We will allow the empty line to be omitted if the first line of\n        // the body does not start with a [\\w-] character (as headers do).\n        /[^ \\t\\w-][\\s\\S]*/.source, 'i'),\n        lookbehind: true,\n        inside: httpLanguages[contentType]\n      };\n    }\n  }\n\n  if (options) {\n    Prism.languages.insertBefore('http', 'header', options);\n  }\n})(Prism);","map":{"version":3,"names":["Prism","headerValueOf","name","RegExp","languages","http","pattern","inside","alias","lookbehind","uri","source","csp","hpkp","hsts","langs","httpLanguages","javascript","json","xml","html","css","plain","suffixTypes","getSuffixPattern","contentType","suffix","replace","suffixPattern","options","insertBefore"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/prismjs/components/prism-http.js"],"sourcesContent":["(function (Prism) {\n\n\t/**\n\t * @param {string} name\n\t * @returns {RegExp}\n\t */\n\tfunction headerValueOf(name) {\n\t\treturn RegExp('(^(?:' + name + '):[ \\t]*(?![ \\t]))[^]+', 'i');\n\t}\n\n\tPrism.languages.http = {\n\t\t'request-line': {\n\t\t\tpattern: /^(?:CONNECT|DELETE|GET|HEAD|OPTIONS|PATCH|POST|PRI|PUT|SEARCH|TRACE)\\s(?:https?:\\/\\/|\\/)\\S*\\sHTTP\\/[\\d.]+/m,\n\t\t\tinside: {\n\t\t\t\t// HTTP Method\n\t\t\t\t'method': {\n\t\t\t\t\tpattern: /^[A-Z]+\\b/,\n\t\t\t\t\talias: 'property'\n\t\t\t\t},\n\t\t\t\t// Request Target e.g. http://example.com, /path/to/file\n\t\t\t\t'request-target': {\n\t\t\t\t\tpattern: /^(\\s)(?:https?:\\/\\/|\\/)\\S*(?=\\s)/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'url',\n\t\t\t\t\tinside: Prism.languages.uri\n\t\t\t\t},\n\t\t\t\t// HTTP Version\n\t\t\t\t'http-version': {\n\t\t\t\t\tpattern: /^(\\s)HTTP\\/[\\d.]+/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'property'\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\t\t'response-status': {\n\t\t\tpattern: /^HTTP\\/[\\d.]+ \\d+ .+/m,\n\t\t\tinside: {\n\t\t\t\t// HTTP Version\n\t\t\t\t'http-version': {\n\t\t\t\t\tpattern: /^HTTP\\/[\\d.]+/,\n\t\t\t\t\talias: 'property'\n\t\t\t\t},\n\t\t\t\t// Status Code\n\t\t\t\t'status-code': {\n\t\t\t\t\tpattern: /^(\\s)\\d+(?=\\s)/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'number'\n\t\t\t\t},\n\t\t\t\t// Reason Phrase\n\t\t\t\t'reason-phrase': {\n\t\t\t\t\tpattern: /^(\\s).+/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'string'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'header': {\n\t\t\tpattern: /^[\\w-]+:.+(?:(?:\\r\\n?|\\n)[ \\t].+)*/m,\n\t\t\tinside: {\n\t\t\t\t'header-value': [\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: headerValueOf(/Content-Security-Policy/.source),\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\talias: ['csp', 'languages-csp'],\n\t\t\t\t\t\tinside: Prism.languages.csp\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: headerValueOf(/Public-Key-Pins(?:-Report-Only)?/.source),\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\talias: ['hpkp', 'languages-hpkp'],\n\t\t\t\t\t\tinside: Prism.languages.hpkp\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: headerValueOf(/Strict-Transport-Security/.source),\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\talias: ['hsts', 'languages-hsts'],\n\t\t\t\t\t\tinside: Prism.languages.hsts\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: headerValueOf(/[^:]+/.source),\n\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t'header-name': {\n\t\t\t\t\tpattern: /^[^:]+/,\n\t\t\t\t\talias: 'keyword'\n\t\t\t\t},\n\t\t\t\t'punctuation': /^:/\n\t\t\t}\n\t\t}\n\t};\n\n\t// Create a mapping of Content-Type headers to language definitions\n\tvar langs = Prism.languages;\n\tvar httpLanguages = {\n\t\t'application/javascript': langs.javascript,\n\t\t'application/json': langs.json || langs.javascript,\n\t\t'application/xml': langs.xml,\n\t\t'text/xml': langs.xml,\n\t\t'text/html': langs.html,\n\t\t'text/css': langs.css,\n\t\t'text/plain': langs.plain\n\t};\n\n\t// Declare which types can also be suffixes\n\tvar suffixTypes = {\n\t\t'application/json': true,\n\t\t'application/xml': true\n\t};\n\n\t/**\n\t * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n\t *\n\t * @param {string} contentType\n\t * @returns {string}\n\t */\n\tfunction getSuffixPattern(contentType) {\n\t\tvar suffix = contentType.replace(/^[a-z]+\\//, '');\n\t\tvar suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])';\n\t\treturn '(?:' + contentType + '|' + suffixPattern + ')';\n\t}\n\n\t// Insert each content type parser that has its associated language\n\t// currently loaded.\n\tvar options;\n\tfor (var contentType in httpLanguages) {\n\t\tif (httpLanguages[contentType]) {\n\t\t\toptions = options || {};\n\n\t\t\tvar pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;\n\t\t\toptions[contentType.replace(/\\//g, '-')] = {\n\t\t\t\tpattern: RegExp(\n\t\t\t\t\t'(' + /content-type:\\s*/.source + pattern + /(?:(?:\\r\\n?|\\n)[\\w-].*)*(?:\\r(?:\\n|(?!\\n))|\\n)/.source + ')' +\n\t\t\t\t\t// This is a little interesting:\n\t\t\t\t\t// The HTTP format spec required 1 empty line before the body to make everything unambiguous.\n\t\t\t\t\t// However, when writing code by hand (e.g. to display on a website) people can forget about this,\n\t\t\t\t\t// so we want to be liberal here. We will allow the empty line to be omitted if the first line of\n\t\t\t\t\t// the body does not start with a [\\w-] character (as headers do).\n\t\t\t\t\t/[^ \\t\\w-][\\s\\S]*/.source,\n\t\t\t\t\t'i'\n\t\t\t\t),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: httpLanguages[contentType]\n\t\t\t};\n\t\t}\n\t}\n\tif (options) {\n\t\tPrism.languages.insertBefore('http', 'header', options);\n\t}\n\n}(Prism));\n"],"mappings":"AAAC,WAAUA,KAAV,EAAiB;EAEjB;AACD;AACA;AACA;EACC,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;IAC5B,OAAOC,MAAM,CAAC,UAAUD,IAAV,GAAiB,wBAAlB,EAA4C,GAA5C,CAAb;EACA;;EAEDF,KAAK,CAACI,SAAN,CAAgBC,IAAhB,GAAuB;IACtB,gBAAgB;MACfC,OAAO,EAAE,4GADM;MAEfC,MAAM,EAAE;QACP;QACA,UAAU;UACTD,OAAO,EAAE,WADA;UAETE,KAAK,EAAE;QAFE,CAFH;QAMP;QACA,kBAAkB;UACjBF,OAAO,EAAE,kCADQ;UAEjBG,UAAU,EAAE,IAFK;UAGjBD,KAAK,EAAE,KAHU;UAIjBD,MAAM,EAAEP,KAAK,CAACI,SAAN,CAAgBM;QAJP,CAPX;QAaP;QACA,gBAAgB;UACfJ,OAAO,EAAE,mBADM;UAEfG,UAAU,EAAE,IAFG;UAGfD,KAAK,EAAE;QAHQ;MAdT;IAFO,CADM;IAwBtB,mBAAmB;MAClBF,OAAO,EAAE,uBADS;MAElBC,MAAM,EAAE;QACP;QACA,gBAAgB;UACfD,OAAO,EAAE,eADM;UAEfE,KAAK,EAAE;QAFQ,CAFT;QAMP;QACA,eAAe;UACdF,OAAO,EAAE,gBADK;UAEdG,UAAU,EAAE,IAFE;UAGdD,KAAK,EAAE;QAHO,CAPR;QAYP;QACA,iBAAiB;UAChBF,OAAO,EAAE,SADO;UAEhBG,UAAU,EAAE,IAFI;UAGhBD,KAAK,EAAE;QAHS;MAbV;IAFU,CAxBG;IA8CtB,UAAU;MACTF,OAAO,EAAE,qCADA;MAETC,MAAM,EAAE;QACP,gBAAgB,CACf;UACCD,OAAO,EAAEL,aAAa,CAAC,0BAA0BU,MAA3B,CADvB;UAECF,UAAU,EAAE,IAFb;UAGCD,KAAK,EAAE,CAAC,KAAD,EAAQ,eAAR,CAHR;UAICD,MAAM,EAAEP,KAAK,CAACI,SAAN,CAAgBQ;QAJzB,CADe,EAOf;UACCN,OAAO,EAAEL,aAAa,CAAC,mCAAmCU,MAApC,CADvB;UAECF,UAAU,EAAE,IAFb;UAGCD,KAAK,EAAE,CAAC,MAAD,EAAS,gBAAT,CAHR;UAICD,MAAM,EAAEP,KAAK,CAACI,SAAN,CAAgBS;QAJzB,CAPe,EAaf;UACCP,OAAO,EAAEL,aAAa,CAAC,4BAA4BU,MAA7B,CADvB;UAECF,UAAU,EAAE,IAFb;UAGCD,KAAK,EAAE,CAAC,MAAD,EAAS,gBAAT,CAHR;UAICD,MAAM,EAAEP,KAAK,CAACI,SAAN,CAAgBU;QAJzB,CAbe,EAmBf;UACCR,OAAO,EAAEL,aAAa,CAAC,QAAQU,MAAT,CADvB;UAECF,UAAU,EAAE;QAFb,CAnBe,CADT;QAyBP,eAAe;UACdH,OAAO,EAAE,QADK;UAEdE,KAAK,EAAE;QAFO,CAzBR;QA6BP,eAAe;MA7BR;IAFC;EA9CY,CAAvB,CAViB,CA4FjB;;EACA,IAAIO,KAAK,GAAGf,KAAK,CAACI,SAAlB;EACA,IAAIY,aAAa,GAAG;IACnB,0BAA0BD,KAAK,CAACE,UADb;IAEnB,oBAAoBF,KAAK,CAACG,IAAN,IAAcH,KAAK,CAACE,UAFrB;IAGnB,mBAAmBF,KAAK,CAACI,GAHN;IAInB,YAAYJ,KAAK,CAACI,GAJC;IAKnB,aAAaJ,KAAK,CAACK,IALA;IAMnB,YAAYL,KAAK,CAACM,GANC;IAOnB,cAAcN,KAAK,CAACO;EAPD,CAApB,CA9FiB,CAwGjB;;EACA,IAAIC,WAAW,GAAG;IACjB,oBAAoB,IADH;IAEjB,mBAAmB;EAFF,CAAlB;EAKA;AACD;AACA;AACA;AACA;AACA;;EACC,SAASC,gBAAT,CAA0BC,WAA1B,EAAuC;IACtC,IAAIC,MAAM,GAAGD,WAAW,CAACE,OAAZ,CAAoB,WAApB,EAAiC,EAAjC,CAAb;IACA,IAAIC,aAAa,GAAG,0BAA0BF,MAA1B,GAAmC,cAAvD;IACA,OAAO,QAAQD,WAAR,GAAsB,GAAtB,GAA4BG,aAA5B,GAA4C,GAAnD;EACA,CAxHgB,CA0HjB;EACA;;;EACA,IAAIC,OAAJ;;EACA,KAAK,IAAIJ,WAAT,IAAwBT,aAAxB,EAAuC;IACtC,IAAIA,aAAa,CAACS,WAAD,CAAjB,EAAgC;MAC/BI,OAAO,GAAGA,OAAO,IAAI,EAArB;MAEA,IAAIvB,OAAO,GAAGiB,WAAW,CAACE,WAAD,CAAX,GAA2BD,gBAAgB,CAACC,WAAD,CAA3C,GAA2DA,WAAzE;MACAI,OAAO,CAACJ,WAAW,CAACE,OAAZ,CAAoB,KAApB,EAA2B,GAA3B,CAAD,CAAP,GAA2C;QAC1CrB,OAAO,EAAEH,MAAM,CACd,MAAM,mBAAmBQ,MAAzB,GAAkCL,OAAlC,GAA4C,iDAAiDK,MAA7F,GAAsG,GAAtG,GACA;QACA;QACA;QACA;QACA;QACA,mBAAmBA,MAPL,EAQd,GARc,CAD2B;QAW1CF,UAAU,EAAE,IAX8B;QAY1CF,MAAM,EAAES,aAAa,CAACS,WAAD;MAZqB,CAA3C;IAcA;EACD;;EACD,IAAII,OAAJ,EAAa;IACZ7B,KAAK,CAACI,SAAN,CAAgB0B,YAAhB,CAA6B,MAA7B,EAAqC,QAArC,EAA+CD,OAA/C;EACA;AAED,CAtJA,EAsJC7B,KAtJD,CAAD"},"metadata":{},"sourceType":"script"}