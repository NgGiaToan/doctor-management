{"ast":null,"code":"import _ from '@lodash';\nimport FuseUtils from '@fuse/utils';\nimport mockApi from '../mock-api.json';\nimport mock from '../mock';\nlet notificationsDB = mockApi.components.examples.notifications.value;\nmock.onGet('/api/notifications').reply(config => {\n  return [200, notificationsDB];\n});\nmock.onDelete('/api/notifications').reply(config => {\n  notificationsDB = [];\n  return [200];\n});\nmock.onPost('/api/notifications').reply(_ref => {\n  let {\n    data\n  } = _ref;\n  const newNotification = {\n    id: FuseUtils.generateGUID(),\n    ...JSON.parse(data)\n  };\n  notificationsDB.push(newNotification);\n  return [200, newNotification];\n});\nmock.onDelete(/\\/api\\/notifications\\/[^/]+/).reply(config => {\n  const {\n    id\n  } = config.url.match(/\\/api\\/notifications\\/(?<id>[^/]+)/).groups;\n\n  _.remove(notificationsDB, {\n    id\n  });\n\n  return [200, id];\n});","map":{"version":3,"names":["_","FuseUtils","mockApi","mock","notificationsDB","components","examples","notifications","value","onGet","reply","config","onDelete","onPost","data","newNotification","id","generateGUID","JSON","parse","push","url","match","groups","remove"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/src/@mock-api/api/notifications-api.js"],"sourcesContent":["import _ from '@lodash';\r\nimport FuseUtils from '@fuse/utils';\r\nimport mockApi from '../mock-api.json';\r\nimport mock from '../mock';\r\n\r\nlet notificationsDB = mockApi.components.examples.notifications.value;\r\n\r\nmock.onGet('/api/notifications').reply((config) => {\r\n  return [200, notificationsDB];\r\n});\r\n\r\nmock.onDelete('/api/notifications').reply((config) => {\r\n  notificationsDB = [];\r\n  return [200];\r\n});\r\n\r\nmock.onPost('/api/notifications').reply(({ data }) => {\r\n  const newNotification = { id: FuseUtils.generateGUID(), ...JSON.parse(data) };\r\n\r\n  notificationsDB.push(newNotification);\r\n\r\n  return [200, newNotification];\r\n});\r\n\r\nmock.onDelete(/\\/api\\/notifications\\/[^/]+/).reply((config) => {\r\n  const { id } = config.url.match(/\\/api\\/notifications\\/(?<id>[^/]+)/).groups;\r\n\r\n  _.remove(notificationsDB, { id });\r\n\r\n  return [200, id];\r\n});\r\n"],"mappings":"AAAA,OAAOA,CAAP,MAAc,SAAd;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AAEA,IAAIC,eAAe,GAAGF,OAAO,CAACG,UAAR,CAAmBC,QAAnB,CAA4BC,aAA5B,CAA0CC,KAAhE;AAEAL,IAAI,CAACM,KAAL,CAAW,oBAAX,EAAiCC,KAAjC,CAAwCC,MAAD,IAAY;EACjD,OAAO,CAAC,GAAD,EAAMP,eAAN,CAAP;AACD,CAFD;AAIAD,IAAI,CAACS,QAAL,CAAc,oBAAd,EAAoCF,KAApC,CAA2CC,MAAD,IAAY;EACpDP,eAAe,GAAG,EAAlB;EACA,OAAO,CAAC,GAAD,CAAP;AACD,CAHD;AAKAD,IAAI,CAACU,MAAL,CAAY,oBAAZ,EAAkCH,KAAlC,CAAwC,QAAc;EAAA,IAAb;IAAEI;EAAF,CAAa;EACpD,MAAMC,eAAe,GAAG;IAAEC,EAAE,EAAEf,SAAS,CAACgB,YAAV,EAAN;IAAgC,GAAGC,IAAI,CAACC,KAAL,CAAWL,IAAX;EAAnC,CAAxB;EAEAV,eAAe,CAACgB,IAAhB,CAAqBL,eAArB;EAEA,OAAO,CAAC,GAAD,EAAMA,eAAN,CAAP;AACD,CAND;AAQAZ,IAAI,CAACS,QAAL,CAAc,6BAAd,EAA6CF,KAA7C,CAAoDC,MAAD,IAAY;EAC7D,MAAM;IAAEK;EAAF,IAASL,MAAM,CAACU,GAAP,CAAWC,KAAX,CAAiB,oCAAjB,EAAuDC,MAAtE;;EAEAvB,CAAC,CAACwB,MAAF,CAASpB,eAAT,EAA0B;IAAEY;EAAF,CAA1B;;EAEA,OAAO,CAAC,GAAD,EAAMA,EAAN,CAAP;AACD,CAND"},"metadata":{},"sourceType":"module"}