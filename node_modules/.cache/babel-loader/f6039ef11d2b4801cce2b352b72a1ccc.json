{"ast":null,"code":"import _slicedToArray from\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import*as React from'react';import{useEffect,useState}from'react';import{useDispatch}from'react-redux';import FuseSplashScreen from'@fuse/core/FuseSplashScreen';import{showMessage}from'app/store/fuse/messageSlice';import{logoutUser,setUser}from'app/store/userSlice';import jwtService from'./services/jwtService';import{jsx as _jsx}from\"react/jsx-runtime\";var AuthContext=/*#__PURE__*/React.createContext();function AuthProvider(_ref){var children=_ref.children;var _useState=useState(undefined),_useState2=_slicedToArray(_useState,2),isAuthenticated=_useState2[0],setIsAuthenticated=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),waitAuthCheck=_useState4[0],setWaitAuthCheck=_useState4[1];var dispatch=useDispatch();useEffect(function(){jwtService.on('onAutoLogin',function(){dispatch(showMessage({message:'Signing in with JWT'}));/**\r\n       * Sign in and retrieve user data with stored token\r\n       */jwtService.signInWithToken().then(function(user){success(user,'Signed in with JWT');}).catch(function(error){pass(error.message);});});jwtService.on('onLogin',function(user){success(user,'Signed in');});jwtService.on('onLogout',function(){pass('Signed out');dispatch(logoutUser());});jwtService.on('onAutoLogout',function(message){pass(message);dispatch(logoutUser());});jwtService.on('onNoAccessToken',function(){pass();});jwtService.init();function success(user,message){if(message){dispatch(showMessage({message:message}));}Promise.all([dispatch(setUser(user))// You can receive data in here before app initialization\n]).then(function(values){setWaitAuthCheck(false);setIsAuthenticated(true);});}function pass(message){if(message){dispatch(showMessage({message:message}));}setWaitAuthCheck(false);setIsAuthenticated(false);}},[dispatch]);return waitAuthCheck?/*#__PURE__*/_jsx(FuseSplashScreen,{}):/*#__PURE__*/_jsx(AuthContext.Provider,{value:{isAuthenticated:isAuthenticated},children:children});}function useAuth(){var context=React.useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within a AuthProvider');}return context;}export{AuthProvider,useAuth};","map":null,"metadata":{},"sourceType":"module"}