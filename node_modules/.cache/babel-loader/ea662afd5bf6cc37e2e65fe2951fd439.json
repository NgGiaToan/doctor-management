{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Oas3_1Types = void 0;\n\nvar _1 = require(\".\");\n\nvar oas3_1 = require(\"./oas3\");\n\nvar DefinitionRoot = {\n  properties: {\n    openapi: null,\n    info: 'Info',\n    servers: _1.listOf('Server'),\n    security: _1.listOf('SecurityRequirement'),\n    tags: _1.listOf('Tag'),\n    externalDocs: 'ExternalDocs',\n    paths: 'PathMap',\n    webhooks: 'WebhooksMap',\n    components: 'Components',\n    jsonSchemaDialect: {\n      type: 'string'\n    }\n  },\n  required: ['openapi', 'info'],\n  requiredOneOf: ['paths', 'components', 'webhooks']\n};\nvar License = {\n  properties: {\n    name: {\n      type: 'string'\n    },\n    url: {\n      type: 'string'\n    },\n    identifier: {\n      type: 'string'\n    }\n  },\n  required: ['name']\n};\nvar Info = {\n  properties: {\n    title: {\n      type: 'string'\n    },\n    version: {\n      type: 'string'\n    },\n    description: {\n      type: 'string'\n    },\n    termsOfService: {\n      type: 'string'\n    },\n    summary: {\n      type: 'string'\n    },\n    contact: 'Contact',\n    license: 'License'\n  },\n  required: ['title', 'version']\n};\nvar Components = {\n  properties: {\n    parameters: 'NamedParameters',\n    schemas: 'NamedSchemas',\n    responses: 'NamedResponses',\n    examples: 'NamedExamples',\n    requestBodies: 'NamedRequestBodies',\n    headers: 'NamedHeaders',\n    securitySchemes: 'NamedSecuritySchemes',\n    links: 'NamedLinks',\n    callbacks: 'NamedCallbacks',\n    pathItems: 'NamedPathItems'\n  }\n};\nvar Operation = {\n  properties: {\n    tags: {\n      type: 'array',\n      items: {\n        type: 'string'\n      }\n    },\n    summary: {\n      type: 'string'\n    },\n    description: {\n      type: 'string'\n    },\n    externalDocs: 'ExternalDocs',\n    operationId: {\n      type: 'string'\n    },\n    parameters: _1.listOf('Parameter'),\n    security: _1.listOf('SecurityRequirement'),\n    servers: _1.listOf('Server'),\n    requestBody: 'RequestBody',\n    responses: 'ResponsesMap',\n    deprecated: {\n      type: 'boolean'\n    },\n    callbacks: _1.mapOf('Callback'),\n    'x-codeSamples': _1.listOf('XCodeSample'),\n    'x-code-samples': _1.listOf('XCodeSample') // deprecated\n\n  }\n};\nvar Schema = {\n  properties: {\n    $id: {\n      type: 'string'\n    },\n    id: {\n      type: 'string'\n    },\n    $schema: {\n      type: 'string'\n    },\n    definitions: 'NamedSchemas',\n    $defs: 'NamedSchemas',\n    $vocabulary: {\n      type: 'string'\n    },\n    externalDocs: 'ExternalDocs',\n    discriminator: 'Discriminator',\n    myArbitraryKeyword: {\n      type: 'boolean'\n    },\n    title: {\n      type: 'string'\n    },\n    multipleOf: {\n      type: 'number'\n    },\n    maximum: {\n      type: 'number'\n    },\n    minimum: {\n      type: 'number'\n    },\n    exclusiveMaximum: {\n      type: 'number'\n    },\n    exclusiveMinimum: {\n      type: 'number'\n    },\n    maxLength: {\n      type: 'number'\n    },\n    minLength: {\n      type: 'number'\n    },\n    pattern: {\n      type: 'string'\n    },\n    maxItems: {\n      type: 'number'\n    },\n    minItems: {\n      type: 'number'\n    },\n    uniqueItems: {\n      type: 'boolean'\n    },\n    maxProperties: {\n      type: 'number'\n    },\n    minProperties: {\n      type: 'number'\n    },\n    required: {\n      type: 'array',\n      items: {\n        type: 'string'\n      }\n    },\n    enum: {\n      type: 'array'\n    },\n    type: function type(value) {\n      if (Array.isArray(value)) {\n        return {\n          type: 'array',\n          items: {\n            enum: ['object', 'array', 'string', 'number', 'integer', 'boolean', 'null']\n          }\n        };\n      } else {\n        return {\n          enum: ['object', 'array', 'string', 'number', 'integer', 'boolean', 'null']\n        };\n      }\n    },\n    allOf: _1.listOf('Schema'),\n    anyOf: _1.listOf('Schema'),\n    oneOf: _1.listOf('Schema'),\n    not: 'Schema',\n    if: 'Schema',\n    then: 'Schema',\n    else: 'Schema',\n    dependentSchemas: _1.listOf('Schema'),\n    prefixItems: _1.listOf('Schema'),\n    contains: 'Schema',\n    patternProperties: {\n      type: 'object'\n    },\n    propertyNames: 'Schema',\n    unevaluatedItems: 'Schema',\n    unevaluatedProperties: function unevaluatedProperties(value) {\n      if (typeof value === 'boolean') {\n        return {\n          type: 'boolean'\n        };\n      } else {\n        return 'Schema';\n      }\n    },\n    summary: {\n      type: 'string'\n    },\n    properties: 'SchemaProperties',\n    items: function items(value) {\n      if (Array.isArray(value)) {\n        return _1.listOf('Schema');\n      } else if (typeof value === 'boolean') {\n        return {\n          type: 'boolean'\n        };\n      } else {\n        return 'Schema';\n      }\n    },\n    additionalProperties: function additionalProperties(value) {\n      return typeof value === 'boolean' ? {\n        type: 'boolean'\n      } : 'Schema';\n    },\n    description: {\n      type: 'string'\n    },\n    format: {\n      type: 'string'\n    },\n    contentEncoding: {\n      type: 'string'\n    },\n    contentMediaType: {\n      type: 'string'\n    },\n    default: null,\n    readOnly: {\n      type: 'boolean'\n    },\n    writeOnly: {\n      type: 'boolean'\n    },\n    xml: 'Xml',\n    examples: {\n      type: 'array'\n    },\n    example: {\n      isExample: true\n    },\n    deprecated: {\n      type: 'boolean'\n    },\n    const: null,\n    $comment: {\n      type: 'string'\n    }\n  }\n};\nvar SecurityScheme = {\n  properties: {\n    type: {\n      enum: ['apiKey', 'http', 'oauth2', 'openIdConnect', 'mutualTLS']\n    },\n    description: {\n      type: 'string'\n    },\n    name: {\n      type: 'string'\n    },\n    in: {\n      type: 'string',\n      enum: ['query', 'header', 'cookie']\n    },\n    scheme: {\n      type: 'string'\n    },\n    bearerFormat: {\n      type: 'string'\n    },\n    flows: 'SecuritySchemeFlows',\n    openIdConnectUrl: {\n      type: 'string'\n    }\n  },\n  required: function required(value) {\n    switch (value === null || value === void 0 ? void 0 : value.type) {\n      case 'apiKey':\n        return ['type', 'name', 'in'];\n\n      case 'http':\n        return ['type', 'scheme'];\n\n      case 'oauth2':\n        return ['type', 'flows'];\n\n      case 'openIdConnect':\n        return ['type', 'openIdConnectUrl'];\n\n      default:\n        return ['type'];\n    }\n  },\n  allowed: function allowed(value) {\n    switch (value === null || value === void 0 ? void 0 : value.type) {\n      case 'apiKey':\n        return ['type', 'name', 'in', 'description'];\n\n      case 'http':\n        return ['type', 'scheme', 'bearerFormat', 'description'];\n\n      case 'oauth2':\n        switch (value === null || value === void 0 ? void 0 : value.flows) {\n          case 'implicit':\n            return ['type', 'flows', 'authorizationUrl', 'refreshUrl', 'description', 'scopes'];\n\n          case 'password':\n          case 'clientCredentials':\n            return ['type', 'flows', 'tokenUrl', 'refreshUrl', 'description', 'scopes'];\n\n          case 'authorizationCode':\n            return ['type', 'flows', 'authorizationUrl', 'refreshUrl', 'tokenUrl', 'description', 'scopes'];\n\n          default:\n            return ['type', 'flows', 'authorizationUrl', 'refreshUrl', 'tokenUrl', 'description', 'scopes'];\n        }\n\n      case 'openIdConnect':\n        return ['type', 'openIdConnectUrl', 'description'];\n\n      case 'mutualTLS':\n        return ['type', 'description'];\n\n      default:\n        return ['type', 'description'];\n    }\n  },\n  extensionsPrefix: 'x-'\n};\nexports.Oas3_1Types = Object.assign(Object.assign({}, oas3_1.Oas3Types), {\n  Info: Info,\n  DefinitionRoot: DefinitionRoot,\n  Schema: Schema,\n  License: License,\n  Components: Components,\n  NamedPathItems: _1.mapOf('PathItem'),\n  SecurityScheme: SecurityScheme,\n  Operation: Operation\n});","map":null,"metadata":{},"sourceType":"script"}