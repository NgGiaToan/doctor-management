{"ast":null,"code":"import { traverse } from '../traverse';\nexport function sampleObject(schema) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var spec = arguments.length > 2 ? arguments[2] : undefined;\n  var context = arguments.length > 3 ? arguments[3] : undefined;\n  var res = {};\n  var depth = context && context.depth || 1;\n\n  if (schema && typeof schema.properties === 'object') {\n    var requiredKeys = Array.isArray(schema.required) ? schema.required : [];\n    var requiredKeyDict = requiredKeys.reduce(function (dict, key) {\n      dict[key] = true;\n      return dict;\n    }, {});\n    Object.keys(schema.properties).forEach(function (propertyName) {\n      // skip before traverse that could be costly\n      if (options.skipNonRequired && !requiredKeyDict.hasOwnProperty(propertyName)) {\n        return;\n      }\n\n      var sample = traverse(schema.properties[propertyName], options, spec, {\n        propertyName: propertyName,\n        depth: depth + 1\n      });\n\n      if (options.skipReadOnly && sample.readOnly) {\n        return;\n      }\n\n      if (options.skipWriteOnly && sample.writeOnly) {\n        return;\n      }\n\n      res[propertyName] = sample.value;\n    });\n  }\n\n  if (schema && typeof schema.additionalProperties === 'object') {\n    var propertyName = schema.additionalProperties['x-additionalPropertiesName'] || 'property';\n    res[\"\".concat(String(propertyName), \"1\")] = traverse(schema.additionalProperties, options, spec, {\n      depth: depth + 1\n    }).value;\n    res[\"\".concat(String(propertyName), \"2\")] = traverse(schema.additionalProperties, options, spec, {\n      depth: depth + 1\n    }).value;\n  }\n\n  return res;\n}","map":null,"metadata":{},"sourceType":"module"}