{"ast":null,"code":"(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n      lookbehind: true,\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      greedy: true,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/, {\n    pattern: /(\\s)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      greedy: true,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n      greedy: true,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n      lookbehind: true,\n      greedy: true\n    }\n  });\n})(Prism);","map":{"version":3,"names":["Prism","languages","sass","extend","pattern","lookbehind","greedy","insertBefore","inside","atrule","variable","operator","important","property"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/prismjs/components/prism-sass.js"],"sourcesContent":["(function (Prism) {\n\tPrism.languages.sass = Prism.languages.extend('css', {\n\t\t// Sass comments don't need to be closed, only indented\n\t\t'comment': {\n\t\t\tpattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('sass', 'atrule', {\n\t\t// We want to consume the whole line\n\t\t'atrule-line': {\n\t\t\t// Includes support for = and + shortcuts\n\t\t\tpattern: /^(?:[ \\t]*)[@+=].+/m,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'atrule': /(?:@[\\w-]+|[+=])/\n\t\t\t}\n\t\t}\n\t});\n\tdelete Prism.languages.sass.atrule;\n\n\n\tvar variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n\tvar operator = [\n\t\t/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/,\n\t\t{\n\t\t\tpattern: /(\\s)-(?=\\s)/,\n\t\t\tlookbehind: true\n\t\t}\n\t];\n\n\tPrism.languages.insertBefore('sass', 'property', {\n\t\t// We want to consume the whole line\n\t\t'variable-line': {\n\t\t\tpattern: /^[ \\t]*\\$.+/m,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /:/,\n\t\t\t\t'variable': variable,\n\t\t\t\t'operator': operator\n\t\t\t}\n\t\t},\n\t\t// We want to consume the whole line\n\t\t'property-line': {\n\t\t\tpattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'property': [\n\t\t\t\t\t/[^:\\s]+(?=\\s*:)/,\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: /(:)[^:\\s]+/,\n\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t'punctuation': /:/,\n\t\t\t\t'variable': variable,\n\t\t\t\t'operator': operator,\n\t\t\t\t'important': Prism.languages.sass.important\n\t\t\t}\n\t\t}\n\t});\n\tdelete Prism.languages.sass.property;\n\tdelete Prism.languages.sass.important;\n\n\t// Now that whole lines for other patterns are consumed,\n\t// what's left should be selectors\n\tPrism.languages.insertBefore('sass', 'punctuation', {\n\t\t'selector': {\n\t\t\tpattern: /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t});\n\n}(Prism));\n"],"mappings":"AAAC,WAAUA,KAAV,EAAiB;EACjBA,KAAK,CAACC,SAAN,CAAgBC,IAAhB,GAAuBF,KAAK,CAACC,SAAN,CAAgBE,MAAhB,CAAuB,KAAvB,EAA8B;IACpD;IACA,WAAW;MACVC,OAAO,EAAE,+CADC;MAEVC,UAAU,EAAE,IAFF;MAGVC,MAAM,EAAE;IAHE;EAFyC,CAA9B,CAAvB;EASAN,KAAK,CAACC,SAAN,CAAgBM,YAAhB,CAA6B,MAA7B,EAAqC,QAArC,EAA+C;IAC9C;IACA,eAAe;MACd;MACAH,OAAO,EAAE,qBAFK;MAGdE,MAAM,EAAE,IAHM;MAIdE,MAAM,EAAE;QACP,UAAU;MADH;IAJM;EAF+B,CAA/C;EAWA,OAAOR,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBO,MAA5B;EAGA,IAAIC,QAAQ,GAAG,wBAAf;EACA,IAAIC,QAAQ,GAAG,CACd,0CADc,EAEd;IACCP,OAAO,EAAE,aADV;IAECC,UAAU,EAAE;EAFb,CAFc,CAAf;EAQAL,KAAK,CAACC,SAAN,CAAgBM,YAAhB,CAA6B,MAA7B,EAAqC,UAArC,EAAiD;IAChD;IACA,iBAAiB;MAChBH,OAAO,EAAE,cADO;MAEhBE,MAAM,EAAE,IAFQ;MAGhBE,MAAM,EAAE;QACP,eAAe,GADR;QAEP,YAAYE,QAFL;QAGP,YAAYC;MAHL;IAHQ,CAF+B;IAWhD;IACA,iBAAiB;MAChBP,OAAO,EAAE,oCADO;MAEhBE,MAAM,EAAE,IAFQ;MAGhBE,MAAM,EAAE;QACP,YAAY,CACX,iBADW,EAEX;UACCJ,OAAO,EAAE,YADV;UAECC,UAAU,EAAE;QAFb,CAFW,CADL;QAQP,eAAe,GARR;QASP,YAAYK,QATL;QAUP,YAAYC,QAVL;QAWP,aAAaX,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBU;MAX3B;IAHQ;EAZ+B,CAAjD;EA8BA,OAAOZ,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBW,QAA5B;EACA,OAAOb,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBU,SAA5B,CAhEiB,CAkEjB;EACA;;EACAZ,KAAK,CAACC,SAAN,CAAgBM,YAAhB,CAA6B,MAA7B,EAAqC,aAArC,EAAoD;IACnD,YAAY;MACXH,OAAO,EAAE,wHADE;MAEXC,UAAU,EAAE,IAFD;MAGXC,MAAM,EAAE;IAHG;EADuC,CAApD;AAQA,CA5EA,EA4ECN,KA5ED,CAAD"},"metadata":{},"sourceType":"script"}