{"ast":null,"code":"/**\n * lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.3.9\n * Copyright (C) 2020 Oliver Nightingale\n * @license MIT\n */\n;\n\n(function () {\n  /**\n   * A convenience function for configuring and constructing\n   * a new lunr Index.\n   *\n   * A lunr.Builder instance is created and the pipeline setup\n   * with a trimmer, stop word filter and stemmer.\n   *\n   * This builder object is yielded to the configuration function\n   * that is passed as a parameter, allowing the list of fields\n   * and other builder parameters to be customised.\n   *\n   * All documents _must_ be added within the passed config function.\n   *\n   * @example\n   * var idx = lunr(function () {\n   *   this.field('title')\n   *   this.field('body')\n   *   this.ref('id')\n   *\n   *   documents.forEach(function (doc) {\n   *     this.add(doc)\n   *   }, this)\n   * })\n   *\n   * @see {@link lunr.Builder}\n   * @see {@link lunr.Pipeline}\n   * @see {@link lunr.trimmer}\n   * @see {@link lunr.stopWordFilter}\n   * @see {@link lunr.stemmer}\n   * @namespace {function} lunr\n   */\n  var lunr = function (config) {\n    var builder = new lunr.Builder();\n    builder.pipeline.add(lunr.trimmer, lunr.stopWordFilter, lunr.stemmer);\n    builder.searchPipeline.add(lunr.stemmer);\n    config.call(builder, builder);\n    return builder.build();\n  };\n\n  lunr.version = \"2.3.9\";\n  /*!\n   * lunr.utils\n   * Copyright (C) 2020 Oliver Nightingale\n   */\n\n  /**\n   * A namespace containing utils for the rest of the lunr library\n   * @namespace lunr.utils\n   */\n\n  lunr.utils = {};\n  /**\n   * Print a warning message to the console.\n   *\n   * @param {String} message The message to be printed.\n   * @memberOf lunr.utils\n   * @function\n   */\n\n  lunr.utils.warn = function (global) {\n    /* eslint-disable no-console */\n    return function (message) {\n      if (global.console && console.warn) {\n        console.warn(message);\n      }\n    };\n    /* eslint-enable no-console */\n  }(this);\n  /**\n   * Convert an object to a string.\n   *\n   * In the case of `null` and `undefined` the function returns\n   * the empty string, in all other cases the result of calling\n   * `toString` on the passed object is returned.\n   *\n   * @param {Any} obj The object to convert to a string.\n   * @return {String} string representation of the passed object.\n   * @memberOf lunr.utils\n   */\n\n\n  lunr.utils.asString = function (obj) {\n    if (obj === void 0 || obj === null) {\n      return \"\";\n    } else {\n      return obj.toString();\n    }\n  };\n  /**\n   * Clones an object.\n   *\n   * Will create a copy of an existing object such that any mutations\n   * on the copy cannot affect the original.\n   *\n   * Only shallow objects are supported, passing a nested object to this\n   * function will cause a TypeError.\n   *\n   * Objects with primitives, and arrays of primitives are supported.\n   *\n   * @param {Object} obj The object to clone.\n   * @return {Object} a clone of the passed object.\n   * @throws {TypeError} when a nested object is passed.\n   * @memberOf Utils\n   */\n\n\n  lunr.utils.clone = function (obj) {\n    if (obj === null || obj === undefined) {\n      return obj;\n    }\n\n    var clone = Object.create(null),\n        keys = Object.keys(obj);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i],\n          val = obj[key];\n\n      if (Array.isArray(val)) {\n        clone[key] = val.slice();\n        continue;\n      }\n\n      if (typeof val === 'string' || typeof val === 'number' || typeof val === 'boolean') {\n        clone[key] = val;\n        continue;\n      }\n\n      throw new TypeError(\"clone is not deep and does not support nested objects\");\n    }\n\n    return clone;\n  };\n\n  lunr.FieldRef = function (docRef, fieldName, stringValue) {\n    this.docRef = docRef;\n    this.fieldName = fieldName;\n    this._stringValue = stringValue;\n  };\n\n  lunr.FieldRef.joiner = \"/\";\n\n  lunr.FieldRef.fromString = function (s) {\n    var n = s.indexOf(lunr.FieldRef.joiner);\n\n    if (n === -1) {\n      throw \"malformed field ref string\";\n    }\n\n    var fieldRef = s.slice(0, n),\n        docRef = s.slice(n + 1);\n    return new lunr.FieldRef(docRef, fieldRef, s);\n  };\n\n  lunr.FieldRef.prototype.toString = function () {\n    if (this._stringValue == undefined) {\n      this._stringValue = this.fieldName + lunr.FieldRef.joiner + this.docRef;\n    }\n\n    return this._stringValue;\n  };\n  /*!\n   * lunr.Set\n   * Copyright (C) 2020 Oliver Nightingale\n   */\n\n  /**\n   * A lunr set.\n   *\n   * @constructor\n   */\n\n\n  lunr.Set = function (elements) {\n    this.elements = Object.create(null);\n\n    if (elements) {\n      this.length = elements.length;\n\n      for (var i = 0; i < this.length; i++) {\n        this.elements[elements[i]] = true;\n      }\n    } else {\n      this.length = 0;\n    }\n  };\n  /**\n   * A complete set that contains all elements.\n   *\n   * @static\n   * @readonly\n   * @type {lunr.Set}\n   */\n\n\n  lunr.Set.complete = {\n    intersect: function (other) {\n      return other;\n    },\n    union: function () {\n      return this;\n    },\n    contains: function () {\n      return true;\n    }\n  };\n  /**\n   * An empty set that contains no elements.\n   *\n   * @static\n   * @readonly\n   * @type {lunr.Set}\n   */\n\n  lunr.Set.empty = {\n    intersect: function () {\n      return this;\n    },\n    union: function (other) {\n      return other;\n    },\n    contains: function () {\n      return false;\n    }\n  };\n  /**\n   * Returns true if this set contains the specified object.\n   *\n   * @param {object} object - Object whose presence in this set is to be tested.\n   * @returns {boolean} - True if this set contains the specified object.\n   */\n\n  lunr.Set.prototype.contains = function (object) {\n    return !!this.elements[object];\n  };\n  /**\n   * Returns a new set containing only the elements that are present in both\n   * this set and the specified set.\n   *\n   * @param {lunr.Set} other - set to intersect with this set.\n   * @returns {lunr.Set} a new set that is the intersection of this and the specified set.\n   */\n\n\n  lunr.Set.prototype.intersect = function (other) {\n    var a,\n        b,\n        elements,\n        intersection = [];\n\n    if (other === lunr.Set.complete) {\n      return this;\n    }\n\n    if (other === lunr.Set.empty) {\n      return other;\n    }\n\n    if (this.length < other.length) {\n      a = this;\n      b = other;\n    } else {\n      a = other;\n      b = this;\n    }\n\n    elements = Object.keys(a.elements);\n\n    for (var i = 0; i < elements.length; i++) {\n      var element = elements[i];\n\n      if (element in b.elements) {\n        intersection.push(element);\n      }\n    }\n\n    return new lunr.Set(intersection);\n  };\n  /**\n   * Returns a new set combining the elements of this and the specified set.\n   *\n   * @param {lunr.Set} other - set to union with this set.\n   * @return {lunr.Set} a new set that is the union of this and the specified set.\n   */\n\n\n  lunr.Set.prototype.union = function (other) {\n    if (other === lunr.Set.complete) {\n      return lunr.Set.complete;\n    }\n\n    if (other === lunr.Set.empty) {\n      return this;\n    }\n\n    return new lunr.Set(Object.keys(this.elements).concat(Object.keys(other.elements)));\n  };\n  /**\n   * A function to calculate the inverse document frequency for\n   * a posting. This is shared between the builder and the index\n   *\n   * @private\n   * @param {object} posting - The posting for a given term\n   * @param {number} documentCount - The total number of documents.\n   */\n\n\n  lunr.idf = function (posting, documentCount) {\n    var documentsWithTerm = 0;\n\n    for (var fieldName in posting) {\n      if (fieldName == '_index') continue; // Ignore the term index, its not a field\n\n      documentsWithTerm += Object.keys(posting[fieldName]).length;\n    }\n\n    var x = (documentCount - documentsWithTerm + 0.5) / (documentsWithTerm + 0.5);\n    return Math.log(1 + Math.abs(x));\n  };\n  /**\n   * A token wraps a string representation of a token\n   * as it is passed through the text processing pipeline.\n   *\n   * @constructor\n   * @param {string} [str=''] - The string token being wrapped.\n   * @param {object} [metadata={}] - Metadata associated with this token.\n   */\n\n\n  lunr.Token = function (str, metadata) {\n    this.str = str || \"\";\n    this.metadata = metadata || {};\n  };\n  /**\n   * Returns the token string that is being wrapped by this object.\n   *\n   * @returns {string}\n   */\n\n\n  lunr.Token.prototype.toString = function () {\n    return this.str;\n  };\n  /**\n   * A token update function is used when updating or optionally\n   * when cloning a token.\n   *\n   * @callback lunr.Token~updateFunction\n   * @param {string} str - The string representation of the token.\n   * @param {Object} metadata - All metadata associated with this token.\n   */\n\n  /**\n   * Applies the given function to the wrapped string token.\n   *\n   * @example\n   * token.update(function (str, metadata) {\n   *   return str.toUpperCase()\n   * })\n   *\n   * @param {lunr.Token~updateFunction} fn - A function to apply to the token string.\n   * @returns {lunr.Token}\n   */\n\n\n  lunr.Token.prototype.update = function (fn) {\n    this.str = fn(this.str, this.metadata);\n    return this;\n  };\n  /**\n   * Creates a clone of this token. Optionally a function can be\n   * applied to the cloned token.\n   *\n   * @param {lunr.Token~updateFunction} [fn] - An optional function to apply to the cloned token.\n   * @returns {lunr.Token}\n   */\n\n\n  lunr.Token.prototype.clone = function (fn) {\n    fn = fn || function (s) {\n      return s;\n    };\n\n    return new lunr.Token(fn(this.str, this.metadata), this.metadata);\n  };\n  /*!\n   * lunr.tokenizer\n   * Copyright (C) 2020 Oliver Nightingale\n   */\n\n  /**\n   * A function for splitting a string into tokens ready to be inserted into\n   * the search index. Uses `lunr.tokenizer.separator` to split strings, change\n   * the value of this property to change how strings are split into tokens.\n   *\n   * This tokenizer will convert its parameter to a string by calling `toString` and\n   * then will split this string on the character in `lunr.tokenizer.separator`.\n   * Arrays will have their elements converted to strings and wrapped in a lunr.Token.\n   *\n   * Optional metadata can be passed to the tokenizer, this metadata will be cloned and\n   * added as metadata to every token that is created from the object to be tokenized.\n   *\n   * @static\n   * @param {?(string|object|object[])} obj - The object to convert into tokens\n   * @param {?object} metadata - Optional metadata to associate with every token\n   * @returns {lunr.Token[]}\n   * @see {@link lunr.Pipeline}\n   */\n\n\n  lunr.tokenizer = function (obj, metadata) {\n    if (obj == null || obj == undefined) {\n      return [];\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(function (t) {\n        return new lunr.Token(lunr.utils.asString(t).toLowerCase(), lunr.utils.clone(metadata));\n      });\n    }\n\n    var str = obj.toString().toLowerCase(),\n        len = str.length,\n        tokens = [];\n\n    for (var sliceEnd = 0, sliceStart = 0; sliceEnd <= len; sliceEnd++) {\n      var char = str.charAt(sliceEnd),\n          sliceLength = sliceEnd - sliceStart;\n\n      if (char.match(lunr.tokenizer.separator) || sliceEnd == len) {\n        if (sliceLength > 0) {\n          var tokenMetadata = lunr.utils.clone(metadata) || {};\n          tokenMetadata[\"position\"] = [sliceStart, sliceLength];\n          tokenMetadata[\"index\"] = tokens.length;\n          tokens.push(new lunr.Token(str.slice(sliceStart, sliceEnd), tokenMetadata));\n        }\n\n        sliceStart = sliceEnd + 1;\n      }\n    }\n\n    return tokens;\n  };\n  /**\n   * The separator used to split a string into tokens. Override this property to change the behaviour of\n   * `lunr.tokenizer` behaviour when tokenizing strings. By default this splits on whitespace and hyphens.\n   *\n   * @static\n   * @see lunr.tokenizer\n   */\n\n\n  lunr.tokenizer.separator = /[\\s\\-]+/;\n  /*!\n   * lunr.Pipeline\n   * Copyright (C) 2020 Oliver Nightingale\n   */\n\n  /**\n   * lunr.Pipelines maintain an ordered list of functions to be applied to all\n   * tokens in documents entering the search index and queries being ran against\n   * the index.\n   *\n   * An instance of lunr.Index created with the lunr shortcut will contain a\n   * pipeline with a stop word filter and an English language stemmer. Extra\n   * functions can be added before or after either of these functions or these\n   * default functions can be removed.\n   *\n   * When run the pipeline will call each function in turn, passing a token, the\n   * index of that token in the original list of all tokens and finally a list of\n   * all the original tokens.\n   *\n   * The output of functions in the pipeline will be passed to the next function\n   * in the pipeline. To exclude a token from entering the index the function\n   * should return undefined, the rest of the pipeline will not be called with\n   * this token.\n   *\n   * For serialisation of pipelines to work, all functions used in an instance of\n   * a pipeline should be registered with lunr.Pipeline. Registered functions can\n   * then be loaded. If trying to load a serialised pipeline that uses functions\n   * that are not registered an error will be thrown.\n   *\n   * If not planning on serialising the pipeline then registering pipeline functions\n   * is not necessary.\n   *\n   * @constructor\n   */\n\n  lunr.Pipeline = function () {\n    this._stack = [];\n  };\n\n  lunr.Pipeline.registeredFunctions = Object.create(null);\n  /**\n   * A pipeline function maps lunr.Token to lunr.Token. A lunr.Token contains the token\n   * string as well as all known metadata. A pipeline function can mutate the token string\n   * or mutate (or add) metadata for a given token.\n   *\n   * A pipeline function can indicate that the passed token should be discarded by returning\n   * null, undefined or an empty string. This token will not be passed to any downstream pipeline\n   * functions and will not be added to the index.\n   *\n   * Multiple tokens can be returned by returning an array of tokens. Each token will be passed\n   * to any downstream pipeline functions and all will returned tokens will be added to the index.\n   *\n   * Any number of pipeline functions may be chained together using a lunr.Pipeline.\n   *\n   * @interface lunr.PipelineFunction\n   * @param {lunr.Token} token - A token from the document being processed.\n   * @param {number} i - The index of this token in the complete list of tokens for this document/field.\n   * @param {lunr.Token[]} tokens - All tokens for this document/field.\n   * @returns {(?lunr.Token|lunr.Token[])}\n   */\n\n  /**\n   * Register a function with the pipeline.\n   *\n   * Functions that are used in the pipeline should be registered if the pipeline\n   * needs to be serialised, or a serialised pipeline needs to be loaded.\n   *\n   * Registering a function does not add it to a pipeline, functions must still be\n   * added to instances of the pipeline for them to be used when running a pipeline.\n   *\n   * @param {lunr.PipelineFunction} fn - The function to check for.\n   * @param {String} label - The label to register this function with\n   */\n\n  lunr.Pipeline.registerFunction = function (fn, label) {\n    if (label in this.registeredFunctions) {\n      lunr.utils.warn('Overwriting existing registered function: ' + label);\n    }\n\n    fn.label = label;\n    lunr.Pipeline.registeredFunctions[fn.label] = fn;\n  };\n  /**\n   * Warns if the function is not registered as a Pipeline function.\n   *\n   * @param {lunr.PipelineFunction} fn - The function to check for.\n   * @private\n   */\n\n\n  lunr.Pipeline.warnIfFunctionNotRegistered = function (fn) {\n    var isRegistered = fn.label && fn.label in this.registeredFunctions;\n\n    if (!isRegistered) {\n      lunr.utils.warn('Function is not registered with pipeline. This may cause problems when serialising the index.\\n', fn);\n    }\n  };\n  /**\n   * Loads a previously serialised pipeline.\n   *\n   * All functions to be loaded must already be registered with lunr.Pipeline.\n   * If any function from the serialised data has not been registered then an\n   * error will be thrown.\n   *\n   * @param {Object} serialised - The serialised pipeline to load.\n   * @returns {lunr.Pipeline}\n   */\n\n\n  lunr.Pipeline.load = function (serialised) {\n    var pipeline = new lunr.Pipeline();\n    serialised.forEach(function (fnName) {\n      var fn = lunr.Pipeline.registeredFunctions[fnName];\n\n      if (fn) {\n        pipeline.add(fn);\n      } else {\n        throw new Error('Cannot load unregistered function: ' + fnName);\n      }\n    });\n    return pipeline;\n  };\n  /**\n   * Adds new functions to the end of the pipeline.\n   *\n   * Logs a warning if the function has not been registered.\n   *\n   * @param {lunr.PipelineFunction[]} functions - Any number of functions to add to the pipeline.\n   */\n\n\n  lunr.Pipeline.prototype.add = function () {\n    var fns = Array.prototype.slice.call(arguments);\n    fns.forEach(function (fn) {\n      lunr.Pipeline.warnIfFunctionNotRegistered(fn);\n\n      this._stack.push(fn);\n    }, this);\n  };\n  /**\n   * Adds a single function after a function that already exists in the\n   * pipeline.\n   *\n   * Logs a warning if the function has not been registered.\n   *\n   * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n   * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n   */\n\n\n  lunr.Pipeline.prototype.after = function (existingFn, newFn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(newFn);\n\n    var pos = this._stack.indexOf(existingFn);\n\n    if (pos == -1) {\n      throw new Error('Cannot find existingFn');\n    }\n\n    pos = pos + 1;\n\n    this._stack.splice(pos, 0, newFn);\n  };\n  /**\n   * Adds a single function before a function that already exists in the\n   * pipeline.\n   *\n   * Logs a warning if the function has not been registered.\n   *\n   * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n   * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n   */\n\n\n  lunr.Pipeline.prototype.before = function (existingFn, newFn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(newFn);\n\n    var pos = this._stack.indexOf(existingFn);\n\n    if (pos == -1) {\n      throw new Error('Cannot find existingFn');\n    }\n\n    this._stack.splice(pos, 0, newFn);\n  };\n  /**\n   * Removes a function from the pipeline.\n   *\n   * @param {lunr.PipelineFunction} fn The function to remove from the pipeline.\n   */\n\n\n  lunr.Pipeline.prototype.remove = function (fn) {\n    var pos = this._stack.indexOf(fn);\n\n    if (pos == -1) {\n      return;\n    }\n\n    this._stack.splice(pos, 1);\n  };\n  /**\n   * Runs the current list of functions that make up the pipeline against the\n   * passed tokens.\n   *\n   * @param {Array} tokens The tokens to run through the pipeline.\n   * @returns {Array}\n   */\n\n\n  lunr.Pipeline.prototype.run = function (tokens) {\n    var stackLength = this._stack.length;\n\n    for (var i = 0; i < stackLength; i++) {\n      var fn = this._stack[i];\n      var memo = [];\n\n      for (var j = 0; j < tokens.length; j++) {\n        var result = fn(tokens[j], j, tokens);\n        if (result === null || result === void 0 || result === '') continue;\n\n        if (Array.isArray(result)) {\n          for (var k = 0; k < result.length; k++) {\n            memo.push(result[k]);\n          }\n        } else {\n          memo.push(result);\n        }\n      }\n\n      tokens = memo;\n    }\n\n    return tokens;\n  };\n  /**\n   * Convenience method for passing a string through a pipeline and getting\n   * strings out. This method takes care of wrapping the passed string in a\n   * token and mapping the resulting tokens back to strings.\n   *\n   * @param {string} str - The string to pass through the pipeline.\n   * @param {?object} metadata - Optional metadata to associate with the token\n   * passed to the pipeline.\n   * @returns {string[]}\n   */\n\n\n  lunr.Pipeline.prototype.runString = function (str, metadata) {\n    var token = new lunr.Token(str, metadata);\n    return this.run([token]).map(function (t) {\n      return t.toString();\n    });\n  };\n  /**\n   * Resets the pipeline by removing any existing processors.\n   *\n   */\n\n\n  lunr.Pipeline.prototype.reset = function () {\n    this._stack = [];\n  };\n  /**\n   * Returns a representation of the pipeline ready for serialisation.\n   *\n   * Logs a warning if the function has not been registered.\n   *\n   * @returns {Array}\n   */\n\n\n  lunr.Pipeline.prototype.toJSON = function () {\n    return this._stack.map(function (fn) {\n      lunr.Pipeline.warnIfFunctionNotRegistered(fn);\n      return fn.label;\n    });\n  };\n  /*!\n   * lunr.Vector\n   * Copyright (C) 2020 Oliver Nightingale\n   */\n\n  /**\n   * A vector is used to construct the vector space of documents and queries. These\n   * vectors support operations to determine the similarity between two documents or\n   * a document and a query.\n   *\n   * Normally no parameters are required for initializing a vector, but in the case of\n   * loading a previously dumped vector the raw elements can be provided to the constructor.\n   *\n   * For performance reasons vectors are implemented with a flat array, where an elements\n   * index is immediately followed by its value. E.g. [index, value, index, value]. This\n   * allows the underlying array to be as sparse as possible and still offer decent\n   * performance when being used for vector calculations.\n   *\n   * @constructor\n   * @param {Number[]} [elements] - The flat list of element index and element value pairs.\n   */\n\n\n  lunr.Vector = function (elements) {\n    this._magnitude = 0;\n    this.elements = elements || [];\n  };\n  /**\n   * Calculates the position within the vector to insert a given index.\n   *\n   * This is used internally by insert and upsert. If there are duplicate indexes then\n   * the position is returned as if the value for that index were to be updated, but it\n   * is the callers responsibility to check whether there is a duplicate at that index\n   *\n   * @param {Number} insertIdx - The index at which the element should be inserted.\n   * @returns {Number}\n   */\n\n\n  lunr.Vector.prototype.positionForIndex = function (index) {\n    // For an empty vector the tuple can be inserted at the beginning\n    if (this.elements.length == 0) {\n      return 0;\n    }\n\n    var start = 0,\n        end = this.elements.length / 2,\n        sliceLength = end - start,\n        pivotPoint = Math.floor(sliceLength / 2),\n        pivotIndex = this.elements[pivotPoint * 2];\n\n    while (sliceLength > 1) {\n      if (pivotIndex < index) {\n        start = pivotPoint;\n      }\n\n      if (pivotIndex > index) {\n        end = pivotPoint;\n      }\n\n      if (pivotIndex == index) {\n        break;\n      }\n\n      sliceLength = end - start;\n      pivotPoint = start + Math.floor(sliceLength / 2);\n      pivotIndex = this.elements[pivotPoint * 2];\n    }\n\n    if (pivotIndex == index) {\n      return pivotPoint * 2;\n    }\n\n    if (pivotIndex > index) {\n      return pivotPoint * 2;\n    }\n\n    if (pivotIndex < index) {\n      return (pivotPoint + 1) * 2;\n    }\n  };\n  /**\n   * Inserts an element at an index within the vector.\n   *\n   * Does not allow duplicates, will throw an error if there is already an entry\n   * for this index.\n   *\n   * @param {Number} insertIdx - The index at which the element should be inserted.\n   * @param {Number} val - The value to be inserted into the vector.\n   */\n\n\n  lunr.Vector.prototype.insert = function (insertIdx, val) {\n    this.upsert(insertIdx, val, function () {\n      throw \"duplicate index\";\n    });\n  };\n  /**\n   * Inserts or updates an existing index within the vector.\n   *\n   * @param {Number} insertIdx - The index at which the element should be inserted.\n   * @param {Number} val - The value to be inserted into the vector.\n   * @param {function} fn - A function that is called for updates, the existing value and the\n   * requested value are passed as arguments\n   */\n\n\n  lunr.Vector.prototype.upsert = function (insertIdx, val, fn) {\n    this._magnitude = 0;\n    var position = this.positionForIndex(insertIdx);\n\n    if (this.elements[position] == insertIdx) {\n      this.elements[position + 1] = fn(this.elements[position + 1], val);\n    } else {\n      this.elements.splice(position, 0, insertIdx, val);\n    }\n  };\n  /**\n   * Calculates the magnitude of this vector.\n   *\n   * @returns {Number}\n   */\n\n\n  lunr.Vector.prototype.magnitude = function () {\n    if (this._magnitude) return this._magnitude;\n    var sumOfSquares = 0,\n        elementsLength = this.elements.length;\n\n    for (var i = 1; i < elementsLength; i += 2) {\n      var val = this.elements[i];\n      sumOfSquares += val * val;\n    }\n\n    return this._magnitude = Math.sqrt(sumOfSquares);\n  };\n  /**\n   * Calculates the dot product of this vector and another vector.\n   *\n   * @param {lunr.Vector} otherVector - The vector to compute the dot product with.\n   * @returns {Number}\n   */\n\n\n  lunr.Vector.prototype.dot = function (otherVector) {\n    var dotProduct = 0,\n        a = this.elements,\n        b = otherVector.elements,\n        aLen = a.length,\n        bLen = b.length,\n        aVal = 0,\n        bVal = 0,\n        i = 0,\n        j = 0;\n\n    while (i < aLen && j < bLen) {\n      aVal = a[i], bVal = b[j];\n\n      if (aVal < bVal) {\n        i += 2;\n      } else if (aVal > bVal) {\n        j += 2;\n      } else if (aVal == bVal) {\n        dotProduct += a[i + 1] * b[j + 1];\n        i += 2;\n        j += 2;\n      }\n    }\n\n    return dotProduct;\n  };\n  /**\n   * Calculates the similarity between this vector and another vector.\n   *\n   * @param {lunr.Vector} otherVector - The other vector to calculate the\n   * similarity with.\n   * @returns {Number}\n   */\n\n\n  lunr.Vector.prototype.similarity = function (otherVector) {\n    return this.dot(otherVector) / this.magnitude() || 0;\n  };\n  /**\n   * Converts the vector to an array of the elements within the vector.\n   *\n   * @returns {Number[]}\n   */\n\n\n  lunr.Vector.prototype.toArray = function () {\n    var output = new Array(this.elements.length / 2);\n\n    for (var i = 1, j = 0; i < this.elements.length; i += 2, j++) {\n      output[j] = this.elements[i];\n    }\n\n    return output;\n  };\n  /**\n   * A JSON serializable representation of the vector.\n   *\n   * @returns {Number[]}\n   */\n\n\n  lunr.Vector.prototype.toJSON = function () {\n    return this.elements;\n  };\n  /* eslint-disable */\n\n  /*!\n   * lunr.stemmer\n   * Copyright (C) 2020 Oliver Nightingale\n   * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt\n   */\n\n  /**\n   * lunr.stemmer is an english language stemmer, this is a JavaScript\n   * implementation of the PorterStemmer taken from http://tartarus.org/~martin\n   *\n   * @static\n   * @implements {lunr.PipelineFunction}\n   * @param {lunr.Token} token - The string to stem\n   * @returns {lunr.Token}\n   * @see {@link lunr.Pipeline}\n   * @function\n   */\n\n\n  lunr.stemmer = function () {\n    var step2list = {\n      \"ational\": \"ate\",\n      \"tional\": \"tion\",\n      \"enci\": \"ence\",\n      \"anci\": \"ance\",\n      \"izer\": \"ize\",\n      \"bli\": \"ble\",\n      \"alli\": \"al\",\n      \"entli\": \"ent\",\n      \"eli\": \"e\",\n      \"ousli\": \"ous\",\n      \"ization\": \"ize\",\n      \"ation\": \"ate\",\n      \"ator\": \"ate\",\n      \"alism\": \"al\",\n      \"iveness\": \"ive\",\n      \"fulness\": \"ful\",\n      \"ousness\": \"ous\",\n      \"aliti\": \"al\",\n      \"iviti\": \"ive\",\n      \"biliti\": \"ble\",\n      \"logi\": \"log\"\n    },\n        step3list = {\n      \"icate\": \"ic\",\n      \"ative\": \"\",\n      \"alize\": \"al\",\n      \"iciti\": \"ic\",\n      \"ical\": \"ic\",\n      \"ful\": \"\",\n      \"ness\": \"\"\n    },\n        c = \"[^aeiou]\",\n        // consonant\n    v = \"[aeiouy]\",\n        // vowel\n    C = c + \"[^aeiouy]*\",\n        // consonant sequence\n    V = v + \"[aeiou]*\",\n        // vowel sequence\n    mgr0 = \"^(\" + C + \")?\" + V + C,\n        // [C]VC... is m>0\n    meq1 = \"^(\" + C + \")?\" + V + C + \"(\" + V + \")?$\",\n        // [C]VC[V] is m=1\n    mgr1 = \"^(\" + C + \")?\" + V + C + V + C,\n        // [C]VCVC... is m>1\n    s_v = \"^(\" + C + \")?\" + v; // vowel in stem\n\n    var re_mgr0 = new RegExp(mgr0);\n    var re_mgr1 = new RegExp(mgr1);\n    var re_meq1 = new RegExp(meq1);\n    var re_s_v = new RegExp(s_v);\n    var re_1a = /^(.+?)(ss|i)es$/;\n    var re2_1a = /^(.+?)([^s])s$/;\n    var re_1b = /^(.+?)eed$/;\n    var re2_1b = /^(.+?)(ed|ing)$/;\n    var re_1b_2 = /.$/;\n    var re2_1b_2 = /(at|bl|iz)$/;\n    var re3_1b_2 = new RegExp(\"([^aeiouylsz])\\\\1$\");\n    var re4_1b_2 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n    var re_1c = /^(.+?[^aeiou])y$/;\n    var re_2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;\n    var re_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;\n    var re_4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;\n    var re2_4 = /^(.+?)(s|t)(ion)$/;\n    var re_5 = /^(.+?)e$/;\n    var re_5_1 = /ll$/;\n    var re3_5 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n    var porterStemmer = function porterStemmer(w) {\n      var stem, suffix, firstch, re, re2, re3, re4;\n\n      if (w.length < 3) {\n        return w;\n      }\n\n      firstch = w.substr(0, 1);\n\n      if (firstch == \"y\") {\n        w = firstch.toUpperCase() + w.substr(1);\n      } // Step 1a\n\n\n      re = re_1a;\n      re2 = re2_1a;\n\n      if (re.test(w)) {\n        w = w.replace(re, \"$1$2\");\n      } else if (re2.test(w)) {\n        w = w.replace(re2, \"$1$2\");\n      } // Step 1b\n\n\n      re = re_1b;\n      re2 = re2_1b;\n\n      if (re.test(w)) {\n        var fp = re.exec(w);\n        re = re_mgr0;\n\n        if (re.test(fp[1])) {\n          re = re_1b_2;\n          w = w.replace(re, \"\");\n        }\n      } else if (re2.test(w)) {\n        var fp = re2.exec(w);\n        stem = fp[1];\n        re2 = re_s_v;\n\n        if (re2.test(stem)) {\n          w = stem;\n          re2 = re2_1b_2;\n          re3 = re3_1b_2;\n          re4 = re4_1b_2;\n\n          if (re2.test(w)) {\n            w = w + \"e\";\n          } else if (re3.test(w)) {\n            re = re_1b_2;\n            w = w.replace(re, \"\");\n          } else if (re4.test(w)) {\n            w = w + \"e\";\n          }\n        }\n      } // Step 1c - replace suffix y or Y by i if preceded by a non-vowel which is not the first letter of the word (so cry -> cri, by -> by, say -> say)\n\n\n      re = re_1c;\n\n      if (re.test(w)) {\n        var fp = re.exec(w);\n        stem = fp[1];\n        w = stem + \"i\";\n      } // Step 2\n\n\n      re = re_2;\n\n      if (re.test(w)) {\n        var fp = re.exec(w);\n        stem = fp[1];\n        suffix = fp[2];\n        re = re_mgr0;\n\n        if (re.test(stem)) {\n          w = stem + step2list[suffix];\n        }\n      } // Step 3\n\n\n      re = re_3;\n\n      if (re.test(w)) {\n        var fp = re.exec(w);\n        stem = fp[1];\n        suffix = fp[2];\n        re = re_mgr0;\n\n        if (re.test(stem)) {\n          w = stem + step3list[suffix];\n        }\n      } // Step 4\n\n\n      re = re_4;\n      re2 = re2_4;\n\n      if (re.test(w)) {\n        var fp = re.exec(w);\n        stem = fp[1];\n        re = re_mgr1;\n\n        if (re.test(stem)) {\n          w = stem;\n        }\n      } else if (re2.test(w)) {\n        var fp = re2.exec(w);\n        stem = fp[1] + fp[2];\n        re2 = re_mgr1;\n\n        if (re2.test(stem)) {\n          w = stem;\n        }\n      } // Step 5\n\n\n      re = re_5;\n\n      if (re.test(w)) {\n        var fp = re.exec(w);\n        stem = fp[1];\n        re = re_mgr1;\n        re2 = re_meq1;\n        re3 = re3_5;\n\n        if (re.test(stem) || re2.test(stem) && !re3.test(stem)) {\n          w = stem;\n        }\n      }\n\n      re = re_5_1;\n      re2 = re_mgr1;\n\n      if (re.test(w) && re2.test(w)) {\n        re = re_1b_2;\n        w = w.replace(re, \"\");\n      } // and turn initial Y back to y\n\n\n      if (firstch == \"y\") {\n        w = firstch.toLowerCase() + w.substr(1);\n      }\n\n      return w;\n    };\n\n    return function (token) {\n      return token.update(porterStemmer);\n    };\n  }();\n\n  lunr.Pipeline.registerFunction(lunr.stemmer, 'stemmer');\n  /*!\n   * lunr.stopWordFilter\n   * Copyright (C) 2020 Oliver Nightingale\n   */\n\n  /**\n   * lunr.generateStopWordFilter builds a stopWordFilter function from the provided\n   * list of stop words.\n   *\n   * The built in lunr.stopWordFilter is built using this generator and can be used\n   * to generate custom stopWordFilters for applications or non English languages.\n   *\n   * @function\n   * @param {Array} token The token to pass through the filter\n   * @returns {lunr.PipelineFunction}\n   * @see lunr.Pipeline\n   * @see lunr.stopWordFilter\n   */\n\n  lunr.generateStopWordFilter = function (stopWords) {\n    var words = stopWords.reduce(function (memo, stopWord) {\n      memo[stopWord] = stopWord;\n      return memo;\n    }, {});\n    return function (token) {\n      if (token && words[token.toString()] !== token.toString()) return token;\n    };\n  };\n  /**\n   * lunr.stopWordFilter is an English language stop word list filter, any words\n   * contained in the list will not be passed through the filter.\n   *\n   * This is intended to be used in the Pipeline. If the token does not pass the\n   * filter then undefined will be returned.\n   *\n   * @function\n   * @implements {lunr.PipelineFunction}\n   * @params {lunr.Token} token - A token to check for being a stop word.\n   * @returns {lunr.Token}\n   * @see {@link lunr.Pipeline}\n   */\n\n\n  lunr.stopWordFilter = lunr.generateStopWordFilter(['a', 'able', 'about', 'across', 'after', 'all', 'almost', 'also', 'am', 'among', 'an', 'and', 'any', 'are', 'as', 'at', 'be', 'because', 'been', 'but', 'by', 'can', 'cannot', 'could', 'dear', 'did', 'do', 'does', 'either', 'else', 'ever', 'every', 'for', 'from', 'get', 'got', 'had', 'has', 'have', 'he', 'her', 'hers', 'him', 'his', 'how', 'however', 'i', 'if', 'in', 'into', 'is', 'it', 'its', 'just', 'least', 'let', 'like', 'likely', 'may', 'me', 'might', 'most', 'must', 'my', 'neither', 'no', 'nor', 'not', 'of', 'off', 'often', 'on', 'only', 'or', 'other', 'our', 'own', 'rather', 'said', 'say', 'says', 'she', 'should', 'since', 'so', 'some', 'than', 'that', 'the', 'their', 'them', 'then', 'there', 'these', 'they', 'this', 'tis', 'to', 'too', 'twas', 'us', 'wants', 'was', 'we', 'were', 'what', 'when', 'where', 'which', 'while', 'who', 'whom', 'why', 'will', 'with', 'would', 'yet', 'you', 'your']);\n  lunr.Pipeline.registerFunction(lunr.stopWordFilter, 'stopWordFilter');\n  /*!\n   * lunr.trimmer\n   * Copyright (C) 2020 Oliver Nightingale\n   */\n\n  /**\n   * lunr.trimmer is a pipeline function for trimming non word\n   * characters from the beginning and end of tokens before they\n   * enter the index.\n   *\n   * This implementation may not work correctly for non latin\n   * characters and should either be removed or adapted for use\n   * with languages with non-latin characters.\n   *\n   * @static\n   * @implements {lunr.PipelineFunction}\n   * @param {lunr.Token} token The token to pass through the filter\n   * @returns {lunr.Token}\n   * @see lunr.Pipeline\n   */\n\n  lunr.trimmer = function (token) {\n    return token.update(function (s) {\n      return s.replace(/^\\W+/, '').replace(/\\W+$/, '');\n    });\n  };\n\n  lunr.Pipeline.registerFunction(lunr.trimmer, 'trimmer');\n  /*!\n   * lunr.TokenSet\n   * Copyright (C) 2020 Oliver Nightingale\n   */\n\n  /**\n   * A token set is used to store the unique list of all tokens\n   * within an index. Token sets are also used to represent an\n   * incoming query to the index, this query token set and index\n   * token set are then intersected to find which tokens to look\n   * up in the inverted index.\n   *\n   * A token set can hold multiple tokens, as in the case of the\n   * index token set, or it can hold a single token as in the\n   * case of a simple query token set.\n   *\n   * Additionally token sets are used to perform wildcard matching.\n   * Leading, contained and trailing wildcards are supported, and\n   * from this edit distance matching can also be provided.\n   *\n   * Token sets are implemented as a minimal finite state automata,\n   * where both common prefixes and suffixes are shared between tokens.\n   * This helps to reduce the space used for storing the token set.\n   *\n   * @constructor\n   */\n\n  lunr.TokenSet = function () {\n    this.final = false;\n    this.edges = {};\n    this.id = lunr.TokenSet._nextId;\n    lunr.TokenSet._nextId += 1;\n  };\n  /**\n   * Keeps track of the next, auto increment, identifier to assign\n   * to a new tokenSet.\n   *\n   * TokenSets require a unique identifier to be correctly minimised.\n   *\n   * @private\n   */\n\n\n  lunr.TokenSet._nextId = 1;\n  /**\n   * Creates a TokenSet instance from the given sorted array of words.\n   *\n   * @param {String[]} arr - A sorted array of strings to create the set from.\n   * @returns {lunr.TokenSet}\n   * @throws Will throw an error if the input array is not sorted.\n   */\n\n  lunr.TokenSet.fromArray = function (arr) {\n    var builder = new lunr.TokenSet.Builder();\n\n    for (var i = 0, len = arr.length; i < len; i++) {\n      builder.insert(arr[i]);\n    }\n\n    builder.finish();\n    return builder.root;\n  };\n  /**\n   * Creates a token set from a query clause.\n   *\n   * @private\n   * @param {Object} clause - A single clause from lunr.Query.\n   * @param {string} clause.term - The query clause term.\n   * @param {number} [clause.editDistance] - The optional edit distance for the term.\n   * @returns {lunr.TokenSet}\n   */\n\n\n  lunr.TokenSet.fromClause = function (clause) {\n    if ('editDistance' in clause) {\n      return lunr.TokenSet.fromFuzzyString(clause.term, clause.editDistance);\n    } else {\n      return lunr.TokenSet.fromString(clause.term);\n    }\n  };\n  /**\n   * Creates a token set representing a single string with a specified\n   * edit distance.\n   *\n   * Insertions, deletions, substitutions and transpositions are each\n   * treated as an edit distance of 1.\n   *\n   * Increasing the allowed edit distance will have a dramatic impact\n   * on the performance of both creating and intersecting these TokenSets.\n   * It is advised to keep the edit distance less than 3.\n   *\n   * @param {string} str - The string to create the token set from.\n   * @param {number} editDistance - The allowed edit distance to match.\n   * @returns {lunr.Vector}\n   */\n\n\n  lunr.TokenSet.fromFuzzyString = function (str, editDistance) {\n    var root = new lunr.TokenSet();\n    var stack = [{\n      node: root,\n      editsRemaining: editDistance,\n      str: str\n    }];\n\n    while (stack.length) {\n      var frame = stack.pop(); // no edit\n\n      if (frame.str.length > 0) {\n        var char = frame.str.charAt(0),\n            noEditNode;\n\n        if (char in frame.node.edges) {\n          noEditNode = frame.node.edges[char];\n        } else {\n          noEditNode = new lunr.TokenSet();\n          frame.node.edges[char] = noEditNode;\n        }\n\n        if (frame.str.length == 1) {\n          noEditNode.final = true;\n        }\n\n        stack.push({\n          node: noEditNode,\n          editsRemaining: frame.editsRemaining,\n          str: frame.str.slice(1)\n        });\n      }\n\n      if (frame.editsRemaining == 0) {\n        continue;\n      } // insertion\n\n\n      if (\"*\" in frame.node.edges) {\n        var insertionNode = frame.node.edges[\"*\"];\n      } else {\n        var insertionNode = new lunr.TokenSet();\n        frame.node.edges[\"*\"] = insertionNode;\n      }\n\n      if (frame.str.length == 0) {\n        insertionNode.final = true;\n      }\n\n      stack.push({\n        node: insertionNode,\n        editsRemaining: frame.editsRemaining - 1,\n        str: frame.str\n      }); // deletion\n      // can only do a deletion if we have enough edits remaining\n      // and if there are characters left to delete in the string\n\n      if (frame.str.length > 1) {\n        stack.push({\n          node: frame.node,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str.slice(1)\n        });\n      } // deletion\n      // just removing the last character from the str\n\n\n      if (frame.str.length == 1) {\n        frame.node.final = true;\n      } // substitution\n      // can only do a substitution if we have enough edits remaining\n      // and if there are characters left to substitute\n\n\n      if (frame.str.length >= 1) {\n        if (\"*\" in frame.node.edges) {\n          var substitutionNode = frame.node.edges[\"*\"];\n        } else {\n          var substitutionNode = new lunr.TokenSet();\n          frame.node.edges[\"*\"] = substitutionNode;\n        }\n\n        if (frame.str.length == 1) {\n          substitutionNode.final = true;\n        }\n\n        stack.push({\n          node: substitutionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str.slice(1)\n        });\n      } // transposition\n      // can only do a transposition if there are edits remaining\n      // and there are enough characters to transpose\n\n\n      if (frame.str.length > 1) {\n        var charA = frame.str.charAt(0),\n            charB = frame.str.charAt(1),\n            transposeNode;\n\n        if (charB in frame.node.edges) {\n          transposeNode = frame.node.edges[charB];\n        } else {\n          transposeNode = new lunr.TokenSet();\n          frame.node.edges[charB] = transposeNode;\n        }\n\n        if (frame.str.length == 1) {\n          transposeNode.final = true;\n        }\n\n        stack.push({\n          node: transposeNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: charA + frame.str.slice(2)\n        });\n      }\n    }\n\n    return root;\n  };\n  /**\n   * Creates a TokenSet from a string.\n   *\n   * The string may contain one or more wildcard characters (*)\n   * that will allow wildcard matching when intersecting with\n   * another TokenSet.\n   *\n   * @param {string} str - The string to create a TokenSet from.\n   * @returns {lunr.TokenSet}\n   */\n\n\n  lunr.TokenSet.fromString = function (str) {\n    var node = new lunr.TokenSet(),\n        root = node;\n    /*\n     * Iterates through all characters within the passed string\n     * appending a node for each character.\n     *\n     * When a wildcard character is found then a self\n     * referencing edge is introduced to continually match\n     * any number of any characters.\n     */\n\n    for (var i = 0, len = str.length; i < len; i++) {\n      var char = str[i],\n          final = i == len - 1;\n\n      if (char == \"*\") {\n        node.edges[char] = node;\n        node.final = final;\n      } else {\n        var next = new lunr.TokenSet();\n        next.final = final;\n        node.edges[char] = next;\n        node = next;\n      }\n    }\n\n    return root;\n  };\n  /**\n   * Converts this TokenSet into an array of strings\n   * contained within the TokenSet.\n   *\n   * This is not intended to be used on a TokenSet that\n   * contains wildcards, in these cases the results are\n   * undefined and are likely to cause an infinite loop.\n   *\n   * @returns {string[]}\n   */\n\n\n  lunr.TokenSet.prototype.toArray = function () {\n    var words = [];\n    var stack = [{\n      prefix: \"\",\n      node: this\n    }];\n\n    while (stack.length) {\n      var frame = stack.pop(),\n          edges = Object.keys(frame.node.edges),\n          len = edges.length;\n\n      if (frame.node.final) {\n        /* In Safari, at this point the prefix is sometimes corrupted, see:\n         * https://github.com/olivernn/lunr.js/issues/279 Calling any\n         * String.prototype method forces Safari to \"cast\" this string to what\n         * it's supposed to be, fixing the bug. */\n        frame.prefix.charAt(0);\n        words.push(frame.prefix);\n      }\n\n      for (var i = 0; i < len; i++) {\n        var edge = edges[i];\n        stack.push({\n          prefix: frame.prefix.concat(edge),\n          node: frame.node.edges[edge]\n        });\n      }\n    }\n\n    return words;\n  };\n  /**\n   * Generates a string representation of a TokenSet.\n   *\n   * This is intended to allow TokenSets to be used as keys\n   * in objects, largely to aid the construction and minimisation\n   * of a TokenSet. As such it is not designed to be a human\n   * friendly representation of the TokenSet.\n   *\n   * @returns {string}\n   */\n\n\n  lunr.TokenSet.prototype.toString = function () {\n    // NOTE: Using Object.keys here as this.edges is very likely\n    // to enter 'hash-mode' with many keys being added\n    //\n    // avoiding a for-in loop here as it leads to the function\n    // being de-optimised (at least in V8). From some simple\n    // benchmarks the performance is comparable, but allowing\n    // V8 to optimize may mean easy performance wins in the future.\n    if (this._str) {\n      return this._str;\n    }\n\n    var str = this.final ? '1' : '0',\n        labels = Object.keys(this.edges).sort(),\n        len = labels.length;\n\n    for (var i = 0; i < len; i++) {\n      var label = labels[i],\n          node = this.edges[label];\n      str = str + label + node.id;\n    }\n\n    return str;\n  };\n  /**\n   * Returns a new TokenSet that is the intersection of\n   * this TokenSet and the passed TokenSet.\n   *\n   * This intersection will take into account any wildcards\n   * contained within the TokenSet.\n   *\n   * @param {lunr.TokenSet} b - An other TokenSet to intersect with.\n   * @returns {lunr.TokenSet}\n   */\n\n\n  lunr.TokenSet.prototype.intersect = function (b) {\n    var output = new lunr.TokenSet(),\n        frame = undefined;\n    var stack = [{\n      qNode: b,\n      output: output,\n      node: this\n    }];\n\n    while (stack.length) {\n      frame = stack.pop(); // NOTE: As with the #toString method, we are using\n      // Object.keys and a for loop instead of a for-in loop\n      // as both of these objects enter 'hash' mode, causing\n      // the function to be de-optimised in V8\n\n      var qEdges = Object.keys(frame.qNode.edges),\n          qLen = qEdges.length,\n          nEdges = Object.keys(frame.node.edges),\n          nLen = nEdges.length;\n\n      for (var q = 0; q < qLen; q++) {\n        var qEdge = qEdges[q];\n\n        for (var n = 0; n < nLen; n++) {\n          var nEdge = nEdges[n];\n\n          if (nEdge == qEdge || qEdge == '*') {\n            var node = frame.node.edges[nEdge],\n                qNode = frame.qNode.edges[qEdge],\n                final = node.final && qNode.final,\n                next = undefined;\n\n            if (nEdge in frame.output.edges) {\n              // an edge already exists for this character\n              // no need to create a new node, just set the finality\n              // bit unless this node is already final\n              next = frame.output.edges[nEdge];\n              next.final = next.final || final;\n            } else {\n              // no edge exists yet, must create one\n              // set the finality bit and insert it\n              // into the output\n              next = new lunr.TokenSet();\n              next.final = final;\n              frame.output.edges[nEdge] = next;\n            }\n\n            stack.push({\n              qNode: qNode,\n              output: next,\n              node: node\n            });\n          }\n        }\n      }\n    }\n\n    return output;\n  };\n\n  lunr.TokenSet.Builder = function () {\n    this.previousWord = \"\";\n    this.root = new lunr.TokenSet();\n    this.uncheckedNodes = [];\n    this.minimizedNodes = {};\n  };\n\n  lunr.TokenSet.Builder.prototype.insert = function (word) {\n    var node,\n        commonPrefix = 0;\n\n    if (word < this.previousWord) {\n      throw new Error(\"Out of order word insertion\");\n    }\n\n    for (var i = 0; i < word.length && i < this.previousWord.length; i++) {\n      if (word[i] != this.previousWord[i]) break;\n      commonPrefix++;\n    }\n\n    this.minimize(commonPrefix);\n\n    if (this.uncheckedNodes.length == 0) {\n      node = this.root;\n    } else {\n      node = this.uncheckedNodes[this.uncheckedNodes.length - 1].child;\n    }\n\n    for (var i = commonPrefix; i < word.length; i++) {\n      var nextNode = new lunr.TokenSet(),\n          char = word[i];\n      node.edges[char] = nextNode;\n      this.uncheckedNodes.push({\n        parent: node,\n        char: char,\n        child: nextNode\n      });\n      node = nextNode;\n    }\n\n    node.final = true;\n    this.previousWord = word;\n  };\n\n  lunr.TokenSet.Builder.prototype.finish = function () {\n    this.minimize(0);\n  };\n\n  lunr.TokenSet.Builder.prototype.minimize = function (downTo) {\n    for (var i = this.uncheckedNodes.length - 1; i >= downTo; i--) {\n      var node = this.uncheckedNodes[i],\n          childKey = node.child.toString();\n\n      if (childKey in this.minimizedNodes) {\n        node.parent.edges[node.char] = this.minimizedNodes[childKey];\n      } else {\n        // Cache the key for this node since\n        // we know it can't change anymore\n        node.child._str = childKey;\n        this.minimizedNodes[childKey] = node.child;\n      }\n\n      this.uncheckedNodes.pop();\n    }\n  };\n  /*!\n   * lunr.Index\n   * Copyright (C) 2020 Oliver Nightingale\n   */\n\n  /**\n   * An index contains the built index of all documents and provides a query interface\n   * to the index.\n   *\n   * Usually instances of lunr.Index will not be created using this constructor, instead\n   * lunr.Builder should be used to construct new indexes, or lunr.Index.load should be\n   * used to load previously built and serialized indexes.\n   *\n   * @constructor\n   * @param {Object} attrs - The attributes of the built search index.\n   * @param {Object} attrs.invertedIndex - An index of term/field to document reference.\n   * @param {Object<string, lunr.Vector>} attrs.fieldVectors - Field vectors\n   * @param {lunr.TokenSet} attrs.tokenSet - An set of all corpus tokens.\n   * @param {string[]} attrs.fields - The names of indexed document fields.\n   * @param {lunr.Pipeline} attrs.pipeline - The pipeline to use for search terms.\n   */\n\n\n  lunr.Index = function (attrs) {\n    this.invertedIndex = attrs.invertedIndex;\n    this.fieldVectors = attrs.fieldVectors;\n    this.tokenSet = attrs.tokenSet;\n    this.fields = attrs.fields;\n    this.pipeline = attrs.pipeline;\n  };\n  /**\n   * A result contains details of a document matching a search query.\n   * @typedef {Object} lunr.Index~Result\n   * @property {string} ref - The reference of the document this result represents.\n   * @property {number} score - A number between 0 and 1 representing how similar this document is to the query.\n   * @property {lunr.MatchData} matchData - Contains metadata about this match including which term(s) caused the match.\n   */\n\n  /**\n   * Although lunr provides the ability to create queries using lunr.Query, it also provides a simple\n   * query language which itself is parsed into an instance of lunr.Query.\n   *\n   * For programmatically building queries it is advised to directly use lunr.Query, the query language\n   * is best used for human entered text rather than program generated text.\n   *\n   * At its simplest queries can just be a single term, e.g. `hello`, multiple terms are also supported\n   * and will be combined with OR, e.g `hello world` will match documents that contain either 'hello'\n   * or 'world', though those that contain both will rank higher in the results.\n   *\n   * Wildcards can be included in terms to match one or more unspecified characters, these wildcards can\n   * be inserted anywhere within the term, and more than one wildcard can exist in a single term. Adding\n   * wildcards will increase the number of documents that will be found but can also have a negative\n   * impact on query performance, especially with wildcards at the beginning of a term.\n   *\n   * Terms can be restricted to specific fields, e.g. `title:hello`, only documents with the term\n   * hello in the title field will match this query. Using a field not present in the index will lead\n   * to an error being thrown.\n   *\n   * Modifiers can also be added to terms, lunr supports edit distance and boost modifiers on terms. A term\n   * boost will make documents matching that term score higher, e.g. `foo^5`. Edit distance is also supported\n   * to provide fuzzy matching, e.g. 'hello~2' will match documents with hello with an edit distance of 2.\n   * Avoid large values for edit distance to improve query performance.\n   *\n   * Each term also supports a presence modifier. By default a term's presence in document is optional, however\n   * this can be changed to either required or prohibited. For a term's presence to be required in a document the\n   * term should be prefixed with a '+', e.g. `+foo bar` is a search for documents that must contain 'foo' and\n   * optionally contain 'bar'. Conversely a leading '-' sets the terms presence to prohibited, i.e. it must not\n   * appear in a document, e.g. `-foo bar` is a search for documents that do not contain 'foo' but may contain 'bar'.\n   *\n   * To escape special characters the backslash character '\\' can be used, this allows searches to include\n   * characters that would normally be considered modifiers, e.g. `foo\\~2` will search for a term \"foo~2\" instead\n   * of attempting to apply a boost of 2 to the search term \"foo\".\n   *\n   * @typedef {string} lunr.Index~QueryString\n   * @example <caption>Simple single term query</caption>\n   * hello\n   * @example <caption>Multiple term query</caption>\n   * hello world\n   * @example <caption>term scoped to a field</caption>\n   * title:hello\n   * @example <caption>term with a boost of 10</caption>\n   * hello^10\n   * @example <caption>term with an edit distance of 2</caption>\n   * hello~2\n   * @example <caption>terms with presence modifiers</caption>\n   * -foo +bar baz\n   */\n\n  /**\n   * Performs a search against the index using lunr query syntax.\n   *\n   * Results will be returned sorted by their score, the most relevant results\n   * will be returned first.  For details on how the score is calculated, please see\n   * the {@link https://lunrjs.com/guides/searching.html#scoring|guide}.\n   *\n   * For more programmatic querying use lunr.Index#query.\n   *\n   * @param {lunr.Index~QueryString} queryString - A string containing a lunr query.\n   * @throws {lunr.QueryParseError} If the passed query string cannot be parsed.\n   * @returns {lunr.Index~Result[]}\n   */\n\n\n  lunr.Index.prototype.search = function (queryString) {\n    return this.query(function (query) {\n      var parser = new lunr.QueryParser(queryString, query);\n      parser.parse();\n    });\n  };\n  /**\n   * A query builder callback provides a query object to be used to express\n   * the query to perform on the index.\n   *\n   * @callback lunr.Index~queryBuilder\n   * @param {lunr.Query} query - The query object to build up.\n   * @this lunr.Query\n   */\n\n  /**\n   * Performs a query against the index using the yielded lunr.Query object.\n   *\n   * If performing programmatic queries against the index, this method is preferred\n   * over lunr.Index#search so as to avoid the additional query parsing overhead.\n   *\n   * A query object is yielded to the supplied function which should be used to\n   * express the query to be run against the index.\n   *\n   * Note that although this function takes a callback parameter it is _not_ an\n   * asynchronous operation, the callback is just yielded a query object to be\n   * customized.\n   *\n   * @param {lunr.Index~queryBuilder} fn - A function that is used to build the query.\n   * @returns {lunr.Index~Result[]}\n   */\n\n\n  lunr.Index.prototype.query = function (fn) {\n    // for each query clause\n    // * process terms\n    // * expand terms from token set\n    // * find matching documents and metadata\n    // * get document vectors\n    // * score documents\n    var query = new lunr.Query(this.fields),\n        matchingFields = Object.create(null),\n        queryVectors = Object.create(null),\n        termFieldCache = Object.create(null),\n        requiredMatches = Object.create(null),\n        prohibitedMatches = Object.create(null);\n    /*\n     * To support field level boosts a query vector is created per\n     * field. An empty vector is eagerly created to support negated\n     * queries.\n     */\n\n    for (var i = 0; i < this.fields.length; i++) {\n      queryVectors[this.fields[i]] = new lunr.Vector();\n    }\n\n    fn.call(query, query);\n\n    for (var i = 0; i < query.clauses.length; i++) {\n      /*\n       * Unless the pipeline has been disabled for this term, which is\n       * the case for terms with wildcards, we need to pass the clause\n       * term through the search pipeline. A pipeline returns an array\n       * of processed terms. Pipeline functions may expand the passed\n       * term, which means we may end up performing multiple index lookups\n       * for a single query term.\n       */\n      var clause = query.clauses[i],\n          terms = null,\n          clauseMatches = lunr.Set.empty;\n\n      if (clause.usePipeline) {\n        terms = this.pipeline.runString(clause.term, {\n          fields: clause.fields\n        });\n      } else {\n        terms = [clause.term];\n      }\n\n      for (var m = 0; m < terms.length; m++) {\n        var term = terms[m];\n        /*\n         * Each term returned from the pipeline needs to use the same query\n         * clause object, e.g. the same boost and or edit distance. The\n         * simplest way to do this is to re-use the clause object but mutate\n         * its term property.\n         */\n\n        clause.term = term;\n        /*\n         * From the term in the clause we create a token set which will then\n         * be used to intersect the indexes token set to get a list of terms\n         * to lookup in the inverted index\n         */\n\n        var termTokenSet = lunr.TokenSet.fromClause(clause),\n            expandedTerms = this.tokenSet.intersect(termTokenSet).toArray();\n        /*\n         * If a term marked as required does not exist in the tokenSet it is\n         * impossible for the search to return any matches. We set all the field\n         * scoped required matches set to empty and stop examining any further\n         * clauses.\n         */\n\n        if (expandedTerms.length === 0 && clause.presence === lunr.Query.presence.REQUIRED) {\n          for (var k = 0; k < clause.fields.length; k++) {\n            var field = clause.fields[k];\n            requiredMatches[field] = lunr.Set.empty;\n          }\n\n          break;\n        }\n\n        for (var j = 0; j < expandedTerms.length; j++) {\n          /*\n           * For each term get the posting and termIndex, this is required for\n           * building the query vector.\n           */\n          var expandedTerm = expandedTerms[j],\n              posting = this.invertedIndex[expandedTerm],\n              termIndex = posting._index;\n\n          for (var k = 0; k < clause.fields.length; k++) {\n            /*\n             * For each field that this query term is scoped by (by default\n             * all fields are in scope) we need to get all the document refs\n             * that have this term in that field.\n             *\n             * The posting is the entry in the invertedIndex for the matching\n             * term from above.\n             */\n            var field = clause.fields[k],\n                fieldPosting = posting[field],\n                matchingDocumentRefs = Object.keys(fieldPosting),\n                termField = expandedTerm + \"/\" + field,\n                matchingDocumentsSet = new lunr.Set(matchingDocumentRefs);\n            /*\n             * if the presence of this term is required ensure that the matching\n             * documents are added to the set of required matches for this clause.\n             *\n             */\n\n            if (clause.presence == lunr.Query.presence.REQUIRED) {\n              clauseMatches = clauseMatches.union(matchingDocumentsSet);\n\n              if (requiredMatches[field] === undefined) {\n                requiredMatches[field] = lunr.Set.complete;\n              }\n            }\n            /*\n             * if the presence of this term is prohibited ensure that the matching\n             * documents are added to the set of prohibited matches for this field,\n             * creating that set if it does not yet exist.\n             */\n\n\n            if (clause.presence == lunr.Query.presence.PROHIBITED) {\n              if (prohibitedMatches[field] === undefined) {\n                prohibitedMatches[field] = lunr.Set.empty;\n              }\n\n              prohibitedMatches[field] = prohibitedMatches[field].union(matchingDocumentsSet);\n              /*\n               * Prohibited matches should not be part of the query vector used for\n               * similarity scoring and no metadata should be extracted so we continue\n               * to the next field\n               */\n\n              continue;\n            }\n            /*\n             * The query field vector is populated using the termIndex found for\n             * the term and a unit value with the appropriate boost applied.\n             * Using upsert because there could already be an entry in the vector\n             * for the term we are working with. In that case we just add the scores\n             * together.\n             */\n\n\n            queryVectors[field].upsert(termIndex, clause.boost, function (a, b) {\n              return a + b;\n            });\n            /**\n             * If we've already seen this term, field combo then we've already collected\n             * the matching documents and metadata, no need to go through all that again\n             */\n\n            if (termFieldCache[termField]) {\n              continue;\n            }\n\n            for (var l = 0; l < matchingDocumentRefs.length; l++) {\n              /*\n               * All metadata for this term/field/document triple\n               * are then extracted and collected into an instance\n               * of lunr.MatchData ready to be returned in the query\n               * results\n               */\n              var matchingDocumentRef = matchingDocumentRefs[l],\n                  matchingFieldRef = new lunr.FieldRef(matchingDocumentRef, field),\n                  metadata = fieldPosting[matchingDocumentRef],\n                  fieldMatch;\n\n              if ((fieldMatch = matchingFields[matchingFieldRef]) === undefined) {\n                matchingFields[matchingFieldRef] = new lunr.MatchData(expandedTerm, field, metadata);\n              } else {\n                fieldMatch.add(expandedTerm, field, metadata);\n              }\n            }\n\n            termFieldCache[termField] = true;\n          }\n        }\n      }\n      /**\n       * If the presence was required we need to update the requiredMatches field sets.\n       * We do this after all fields for the term have collected their matches because\n       * the clause terms presence is required in _any_ of the fields not _all_ of the\n       * fields.\n       */\n\n\n      if (clause.presence === lunr.Query.presence.REQUIRED) {\n        for (var k = 0; k < clause.fields.length; k++) {\n          var field = clause.fields[k];\n          requiredMatches[field] = requiredMatches[field].intersect(clauseMatches);\n        }\n      }\n    }\n    /**\n     * Need to combine the field scoped required and prohibited\n     * matching documents into a global set of required and prohibited\n     * matches\n     */\n\n\n    var allRequiredMatches = lunr.Set.complete,\n        allProhibitedMatches = lunr.Set.empty;\n\n    for (var i = 0; i < this.fields.length; i++) {\n      var field = this.fields[i];\n\n      if (requiredMatches[field]) {\n        allRequiredMatches = allRequiredMatches.intersect(requiredMatches[field]);\n      }\n\n      if (prohibitedMatches[field]) {\n        allProhibitedMatches = allProhibitedMatches.union(prohibitedMatches[field]);\n      }\n    }\n\n    var matchingFieldRefs = Object.keys(matchingFields),\n        results = [],\n        matches = Object.create(null);\n    /*\n     * If the query is negated (contains only prohibited terms)\n     * we need to get _all_ fieldRefs currently existing in the\n     * index. This is only done when we know that the query is\n     * entirely prohibited terms to avoid any cost of getting all\n     * fieldRefs unnecessarily.\n     *\n     * Additionally, blank MatchData must be created to correctly\n     * populate the results.\n     */\n\n    if (query.isNegated()) {\n      matchingFieldRefs = Object.keys(this.fieldVectors);\n\n      for (var i = 0; i < matchingFieldRefs.length; i++) {\n        var matchingFieldRef = matchingFieldRefs[i];\n        var fieldRef = lunr.FieldRef.fromString(matchingFieldRef);\n        matchingFields[matchingFieldRef] = new lunr.MatchData();\n      }\n    }\n\n    for (var i = 0; i < matchingFieldRefs.length; i++) {\n      /*\n       * Currently we have document fields that match the query, but we\n       * need to return documents. The matchData and scores are combined\n       * from multiple fields belonging to the same document.\n       *\n       * Scores are calculated by field, using the query vectors created\n       * above, and combined into a final document score using addition.\n       */\n      var fieldRef = lunr.FieldRef.fromString(matchingFieldRefs[i]),\n          docRef = fieldRef.docRef;\n\n      if (!allRequiredMatches.contains(docRef)) {\n        continue;\n      }\n\n      if (allProhibitedMatches.contains(docRef)) {\n        continue;\n      }\n\n      var fieldVector = this.fieldVectors[fieldRef],\n          score = queryVectors[fieldRef.fieldName].similarity(fieldVector),\n          docMatch;\n\n      if ((docMatch = matches[docRef]) !== undefined) {\n        docMatch.score += score;\n        docMatch.matchData.combine(matchingFields[fieldRef]);\n      } else {\n        var match = {\n          ref: docRef,\n          score: score,\n          matchData: matchingFields[fieldRef]\n        };\n        matches[docRef] = match;\n        results.push(match);\n      }\n    }\n    /*\n     * Sort the results objects by score, highest first.\n     */\n\n\n    return results.sort(function (a, b) {\n      return b.score - a.score;\n    });\n  };\n  /**\n   * Prepares the index for JSON serialization.\n   *\n   * The schema for this JSON blob will be described in a\n   * separate JSON schema file.\n   *\n   * @returns {Object}\n   */\n\n\n  lunr.Index.prototype.toJSON = function () {\n    var invertedIndex = Object.keys(this.invertedIndex).sort().map(function (term) {\n      return [term, this.invertedIndex[term]];\n    }, this);\n    var fieldVectors = Object.keys(this.fieldVectors).map(function (ref) {\n      return [ref, this.fieldVectors[ref].toJSON()];\n    }, this);\n    return {\n      version: lunr.version,\n      fields: this.fields,\n      fieldVectors: fieldVectors,\n      invertedIndex: invertedIndex,\n      pipeline: this.pipeline.toJSON()\n    };\n  };\n  /**\n   * Loads a previously serialized lunr.Index\n   *\n   * @param {Object} serializedIndex - A previously serialized lunr.Index\n   * @returns {lunr.Index}\n   */\n\n\n  lunr.Index.load = function (serializedIndex) {\n    var attrs = {},\n        fieldVectors = {},\n        serializedVectors = serializedIndex.fieldVectors,\n        invertedIndex = Object.create(null),\n        serializedInvertedIndex = serializedIndex.invertedIndex,\n        tokenSetBuilder = new lunr.TokenSet.Builder(),\n        pipeline = lunr.Pipeline.load(serializedIndex.pipeline);\n\n    if (serializedIndex.version != lunr.version) {\n      lunr.utils.warn(\"Version mismatch when loading serialised index. Current version of lunr '\" + lunr.version + \"' does not match serialized index '\" + serializedIndex.version + \"'\");\n    }\n\n    for (var i = 0; i < serializedVectors.length; i++) {\n      var tuple = serializedVectors[i],\n          ref = tuple[0],\n          elements = tuple[1];\n      fieldVectors[ref] = new lunr.Vector(elements);\n    }\n\n    for (var i = 0; i < serializedInvertedIndex.length; i++) {\n      var tuple = serializedInvertedIndex[i],\n          term = tuple[0],\n          posting = tuple[1];\n      tokenSetBuilder.insert(term);\n      invertedIndex[term] = posting;\n    }\n\n    tokenSetBuilder.finish();\n    attrs.fields = serializedIndex.fields;\n    attrs.fieldVectors = fieldVectors;\n    attrs.invertedIndex = invertedIndex;\n    attrs.tokenSet = tokenSetBuilder.root;\n    attrs.pipeline = pipeline;\n    return new lunr.Index(attrs);\n  };\n  /*!\n   * lunr.Builder\n   * Copyright (C) 2020 Oliver Nightingale\n   */\n\n  /**\n   * lunr.Builder performs indexing on a set of documents and\n   * returns instances of lunr.Index ready for querying.\n   *\n   * All configuration of the index is done via the builder, the\n   * fields to index, the document reference, the text processing\n   * pipeline and document scoring parameters are all set on the\n   * builder before indexing.\n   *\n   * @constructor\n   * @property {string} _ref - Internal reference to the document reference field.\n   * @property {string[]} _fields - Internal reference to the document fields to index.\n   * @property {object} invertedIndex - The inverted index maps terms to document fields.\n   * @property {object} documentTermFrequencies - Keeps track of document term frequencies.\n   * @property {object} documentLengths - Keeps track of the length of documents added to the index.\n   * @property {lunr.tokenizer} tokenizer - Function for splitting strings into tokens for indexing.\n   * @property {lunr.Pipeline} pipeline - The pipeline performs text processing on tokens before indexing.\n   * @property {lunr.Pipeline} searchPipeline - A pipeline for processing search terms before querying the index.\n   * @property {number} documentCount - Keeps track of the total number of documents indexed.\n   * @property {number} _b - A parameter to control field length normalization, setting this to 0 disabled normalization, 1 fully normalizes field lengths, the default value is 0.75.\n   * @property {number} _k1 - A parameter to control how quickly an increase in term frequency results in term frequency saturation, the default value is 1.2.\n   * @property {number} termIndex - A counter incremented for each unique term, used to identify a terms position in the vector space.\n   * @property {array} metadataWhitelist - A list of metadata keys that have been whitelisted for entry in the index.\n   */\n\n\n  lunr.Builder = function () {\n    this._ref = \"id\";\n    this._fields = Object.create(null);\n    this._documents = Object.create(null);\n    this.invertedIndex = Object.create(null);\n    this.fieldTermFrequencies = {};\n    this.fieldLengths = {};\n    this.tokenizer = lunr.tokenizer;\n    this.pipeline = new lunr.Pipeline();\n    this.searchPipeline = new lunr.Pipeline();\n    this.documentCount = 0;\n    this._b = 0.75;\n    this._k1 = 1.2;\n    this.termIndex = 0;\n    this.metadataWhitelist = [];\n  };\n  /**\n   * Sets the document field used as the document reference. Every document must have this field.\n   * The type of this field in the document should be a string, if it is not a string it will be\n   * coerced into a string by calling toString.\n   *\n   * The default ref is 'id'.\n   *\n   * The ref should _not_ be changed during indexing, it should be set before any documents are\n   * added to the index. Changing it during indexing can lead to inconsistent results.\n   *\n   * @param {string} ref - The name of the reference field in the document.\n   */\n\n\n  lunr.Builder.prototype.ref = function (ref) {\n    this._ref = ref;\n  };\n  /**\n   * A function that is used to extract a field from a document.\n   *\n   * Lunr expects a field to be at the top level of a document, if however the field\n   * is deeply nested within a document an extractor function can be used to extract\n   * the right field for indexing.\n   *\n   * @callback fieldExtractor\n   * @param {object} doc - The document being added to the index.\n   * @returns {?(string|object|object[])} obj - The object that will be indexed for this field.\n   * @example <caption>Extracting a nested field</caption>\n   * function (doc) { return doc.nested.field }\n   */\n\n  /**\n   * Adds a field to the list of document fields that will be indexed. Every document being\n   * indexed should have this field. Null values for this field in indexed documents will\n   * not cause errors but will limit the chance of that document being retrieved by searches.\n   *\n   * All fields should be added before adding documents to the index. Adding fields after\n   * a document has been indexed will have no effect on already indexed documents.\n   *\n   * Fields can be boosted at build time. This allows terms within that field to have more\n   * importance when ranking search results. Use a field boost to specify that matches within\n   * one field are more important than other fields.\n   *\n   * @param {string} fieldName - The name of a field to index in all documents.\n   * @param {object} attributes - Optional attributes associated with this field.\n   * @param {number} [attributes.boost=1] - Boost applied to all terms within this field.\n   * @param {fieldExtractor} [attributes.extractor] - Function to extract a field from a document.\n   * @throws {RangeError} fieldName cannot contain unsupported characters '/'\n   */\n\n\n  lunr.Builder.prototype.field = function (fieldName, attributes) {\n    if (/\\//.test(fieldName)) {\n      throw new RangeError(\"Field '\" + fieldName + \"' contains illegal character '/'\");\n    }\n\n    this._fields[fieldName] = attributes || {};\n  };\n  /**\n   * A parameter to tune the amount of field length normalisation that is applied when\n   * calculating relevance scores. A value of 0 will completely disable any normalisation\n   * and a value of 1 will fully normalise field lengths. The default is 0.75. Values of b\n   * will be clamped to the range 0 - 1.\n   *\n   * @param {number} number - The value to set for this tuning parameter.\n   */\n\n\n  lunr.Builder.prototype.b = function (number) {\n    if (number < 0) {\n      this._b = 0;\n    } else if (number > 1) {\n      this._b = 1;\n    } else {\n      this._b = number;\n    }\n  };\n  /**\n   * A parameter that controls the speed at which a rise in term frequency results in term\n   * frequency saturation. The default value is 1.2. Setting this to a higher value will give\n   * slower saturation levels, a lower value will result in quicker saturation.\n   *\n   * @param {number} number - The value to set for this tuning parameter.\n   */\n\n\n  lunr.Builder.prototype.k1 = function (number) {\n    this._k1 = number;\n  };\n  /**\n   * Adds a document to the index.\n   *\n   * Before adding fields to the index the index should have been fully setup, with the document\n   * ref and all fields to index already having been specified.\n   *\n   * The document must have a field name as specified by the ref (by default this is 'id') and\n   * it should have all fields defined for indexing, though null or undefined values will not\n   * cause errors.\n   *\n   * Entire documents can be boosted at build time. Applying a boost to a document indicates that\n   * this document should rank higher in search results than other documents.\n   *\n   * @param {object} doc - The document to add to the index.\n   * @param {object} attributes - Optional attributes associated with this document.\n   * @param {number} [attributes.boost=1] - Boost applied to all terms within this document.\n   */\n\n\n  lunr.Builder.prototype.add = function (doc, attributes) {\n    var docRef = doc[this._ref],\n        fields = Object.keys(this._fields);\n    this._documents[docRef] = attributes || {};\n    this.documentCount += 1;\n\n    for (var i = 0; i < fields.length; i++) {\n      var fieldName = fields[i],\n          extractor = this._fields[fieldName].extractor,\n          field = extractor ? extractor(doc) : doc[fieldName],\n          tokens = this.tokenizer(field, {\n        fields: [fieldName]\n      }),\n          terms = this.pipeline.run(tokens),\n          fieldRef = new lunr.FieldRef(docRef, fieldName),\n          fieldTerms = Object.create(null);\n      this.fieldTermFrequencies[fieldRef] = fieldTerms;\n      this.fieldLengths[fieldRef] = 0; // store the length of this field for this document\n\n      this.fieldLengths[fieldRef] += terms.length; // calculate term frequencies for this field\n\n      for (var j = 0; j < terms.length; j++) {\n        var term = terms[j];\n\n        if (fieldTerms[term] == undefined) {\n          fieldTerms[term] = 0;\n        }\n\n        fieldTerms[term] += 1; // add to inverted index\n        // create an initial posting if one doesn't exist\n\n        if (this.invertedIndex[term] == undefined) {\n          var posting = Object.create(null);\n          posting[\"_index\"] = this.termIndex;\n          this.termIndex += 1;\n\n          for (var k = 0; k < fields.length; k++) {\n            posting[fields[k]] = Object.create(null);\n          }\n\n          this.invertedIndex[term] = posting;\n        } // add an entry for this term/fieldName/docRef to the invertedIndex\n\n\n        if (this.invertedIndex[term][fieldName][docRef] == undefined) {\n          this.invertedIndex[term][fieldName][docRef] = Object.create(null);\n        } // store all whitelisted metadata about this token in the\n        // inverted index\n\n\n        for (var l = 0; l < this.metadataWhitelist.length; l++) {\n          var metadataKey = this.metadataWhitelist[l],\n              metadata = term.metadata[metadataKey];\n\n          if (this.invertedIndex[term][fieldName][docRef][metadataKey] == undefined) {\n            this.invertedIndex[term][fieldName][docRef][metadataKey] = [];\n          }\n\n          this.invertedIndex[term][fieldName][docRef][metadataKey].push(metadata);\n        }\n      }\n    }\n  };\n  /**\n   * Calculates the average document length for this index\n   *\n   * @private\n   */\n\n\n  lunr.Builder.prototype.calculateAverageFieldLengths = function () {\n    var fieldRefs = Object.keys(this.fieldLengths),\n        numberOfFields = fieldRefs.length,\n        accumulator = {},\n        documentsWithField = {};\n\n    for (var i = 0; i < numberOfFields; i++) {\n      var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n          field = fieldRef.fieldName;\n      documentsWithField[field] || (documentsWithField[field] = 0);\n      documentsWithField[field] += 1;\n      accumulator[field] || (accumulator[field] = 0);\n      accumulator[field] += this.fieldLengths[fieldRef];\n    }\n\n    var fields = Object.keys(this._fields);\n\n    for (var i = 0; i < fields.length; i++) {\n      var fieldName = fields[i];\n      accumulator[fieldName] = accumulator[fieldName] / documentsWithField[fieldName];\n    }\n\n    this.averageFieldLength = accumulator;\n  };\n  /**\n   * Builds a vector space model of every document using lunr.Vector\n   *\n   * @private\n   */\n\n\n  lunr.Builder.prototype.createFieldVectors = function () {\n    var fieldVectors = {},\n        fieldRefs = Object.keys(this.fieldTermFrequencies),\n        fieldRefsLength = fieldRefs.length,\n        termIdfCache = Object.create(null);\n\n    for (var i = 0; i < fieldRefsLength; i++) {\n      var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n          fieldName = fieldRef.fieldName,\n          fieldLength = this.fieldLengths[fieldRef],\n          fieldVector = new lunr.Vector(),\n          termFrequencies = this.fieldTermFrequencies[fieldRef],\n          terms = Object.keys(termFrequencies),\n          termsLength = terms.length;\n      var fieldBoost = this._fields[fieldName].boost || 1,\n          docBoost = this._documents[fieldRef.docRef].boost || 1;\n\n      for (var j = 0; j < termsLength; j++) {\n        var term = terms[j],\n            tf = termFrequencies[term],\n            termIndex = this.invertedIndex[term]._index,\n            idf,\n            score,\n            scoreWithPrecision;\n\n        if (termIdfCache[term] === undefined) {\n          idf = lunr.idf(this.invertedIndex[term], this.documentCount);\n          termIdfCache[term] = idf;\n        } else {\n          idf = termIdfCache[term];\n        }\n\n        score = idf * ((this._k1 + 1) * tf) / (this._k1 * (1 - this._b + this._b * (fieldLength / this.averageFieldLength[fieldName])) + tf);\n        score *= fieldBoost;\n        score *= docBoost;\n        scoreWithPrecision = Math.round(score * 1000) / 1000; // Converts 1.23456789 to 1.234.\n        // Reducing the precision so that the vectors take up less\n        // space when serialised. Doing it now so that they behave\n        // the same before and after serialisation. Also, this is\n        // the fastest approach to reducing a number's precision in\n        // JavaScript.\n\n        fieldVector.insert(termIndex, scoreWithPrecision);\n      }\n\n      fieldVectors[fieldRef] = fieldVector;\n    }\n\n    this.fieldVectors = fieldVectors;\n  };\n  /**\n   * Creates a token set of all tokens in the index using lunr.TokenSet\n   *\n   * @private\n   */\n\n\n  lunr.Builder.prototype.createTokenSet = function () {\n    this.tokenSet = lunr.TokenSet.fromArray(Object.keys(this.invertedIndex).sort());\n  };\n  /**\n   * Builds the index, creating an instance of lunr.Index.\n   *\n   * This completes the indexing process and should only be called\n   * once all documents have been added to the index.\n   *\n   * @returns {lunr.Index}\n   */\n\n\n  lunr.Builder.prototype.build = function () {\n    this.calculateAverageFieldLengths();\n    this.createFieldVectors();\n    this.createTokenSet();\n    return new lunr.Index({\n      invertedIndex: this.invertedIndex,\n      fieldVectors: this.fieldVectors,\n      tokenSet: this.tokenSet,\n      fields: Object.keys(this._fields),\n      pipeline: this.searchPipeline\n    });\n  };\n  /**\n   * Applies a plugin to the index builder.\n   *\n   * A plugin is a function that is called with the index builder as its context.\n   * Plugins can be used to customise or extend the behaviour of the index\n   * in some way. A plugin is just a function, that encapsulated the custom\n   * behaviour that should be applied when building the index.\n   *\n   * The plugin function will be called with the index builder as its argument, additional\n   * arguments can also be passed when calling use. The function will be called\n   * with the index builder as its context.\n   *\n   * @param {Function} plugin The plugin to apply.\n   */\n\n\n  lunr.Builder.prototype.use = function (fn) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    args.unshift(this);\n    fn.apply(this, args);\n  };\n  /**\n   * Contains and collects metadata about a matching document.\n   * A single instance of lunr.MatchData is returned as part of every\n   * lunr.Index~Result.\n   *\n   * @constructor\n   * @param {string} term - The term this match data is associated with\n   * @param {string} field - The field in which the term was found\n   * @param {object} metadata - The metadata recorded about this term in this field\n   * @property {object} metadata - A cloned collection of metadata associated with this document.\n   * @see {@link lunr.Index~Result}\n   */\n\n\n  lunr.MatchData = function (term, field, metadata) {\n    var clonedMetadata = Object.create(null),\n        metadataKeys = Object.keys(metadata || {}); // Cloning the metadata to prevent the original\n    // being mutated during match data combination.\n    // Metadata is kept in an array within the inverted\n    // index so cloning the data can be done with\n    // Array#slice\n\n    for (var i = 0; i < metadataKeys.length; i++) {\n      var key = metadataKeys[i];\n      clonedMetadata[key] = metadata[key].slice();\n    }\n\n    this.metadata = Object.create(null);\n\n    if (term !== undefined) {\n      this.metadata[term] = Object.create(null);\n      this.metadata[term][field] = clonedMetadata;\n    }\n  };\n  /**\n   * An instance of lunr.MatchData will be created for every term that matches a\n   * document. However only one instance is required in a lunr.Index~Result. This\n   * method combines metadata from another instance of lunr.MatchData with this\n   * objects metadata.\n   *\n   * @param {lunr.MatchData} otherMatchData - Another instance of match data to merge with this one.\n   * @see {@link lunr.Index~Result}\n   */\n\n\n  lunr.MatchData.prototype.combine = function (otherMatchData) {\n    var terms = Object.keys(otherMatchData.metadata);\n\n    for (var i = 0; i < terms.length; i++) {\n      var term = terms[i],\n          fields = Object.keys(otherMatchData.metadata[term]);\n\n      if (this.metadata[term] == undefined) {\n        this.metadata[term] = Object.create(null);\n      }\n\n      for (var j = 0; j < fields.length; j++) {\n        var field = fields[j],\n            keys = Object.keys(otherMatchData.metadata[term][field]);\n\n        if (this.metadata[term][field] == undefined) {\n          this.metadata[term][field] = Object.create(null);\n        }\n\n        for (var k = 0; k < keys.length; k++) {\n          var key = keys[k];\n\n          if (this.metadata[term][field][key] == undefined) {\n            this.metadata[term][field][key] = otherMatchData.metadata[term][field][key];\n          } else {\n            this.metadata[term][field][key] = this.metadata[term][field][key].concat(otherMatchData.metadata[term][field][key]);\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Add metadata for a term/field pair to this instance of match data.\n   *\n   * @param {string} term - The term this match data is associated with\n   * @param {string} field - The field in which the term was found\n   * @param {object} metadata - The metadata recorded about this term in this field\n   */\n\n\n  lunr.MatchData.prototype.add = function (term, field, metadata) {\n    if (!(term in this.metadata)) {\n      this.metadata[term] = Object.create(null);\n      this.metadata[term][field] = metadata;\n      return;\n    }\n\n    if (!(field in this.metadata[term])) {\n      this.metadata[term][field] = metadata;\n      return;\n    }\n\n    var metadataKeys = Object.keys(metadata);\n\n    for (var i = 0; i < metadataKeys.length; i++) {\n      var key = metadataKeys[i];\n\n      if (key in this.metadata[term][field]) {\n        this.metadata[term][field][key] = this.metadata[term][field][key].concat(metadata[key]);\n      } else {\n        this.metadata[term][field][key] = metadata[key];\n      }\n    }\n  };\n  /**\n   * A lunr.Query provides a programmatic way of defining queries to be performed\n   * against a {@link lunr.Index}.\n   *\n   * Prefer constructing a lunr.Query using the {@link lunr.Index#query} method\n   * so the query object is pre-initialized with the right index fields.\n   *\n   * @constructor\n   * @property {lunr.Query~Clause[]} clauses - An array of query clauses.\n   * @property {string[]} allFields - An array of all available fields in a lunr.Index.\n   */\n\n\n  lunr.Query = function (allFields) {\n    this.clauses = [];\n    this.allFields = allFields;\n  };\n  /**\n   * Constants for indicating what kind of automatic wildcard insertion will be used when constructing a query clause.\n   *\n   * This allows wildcards to be added to the beginning and end of a term without having to manually do any string\n   * concatenation.\n   *\n   * The wildcard constants can be bitwise combined to select both leading and trailing wildcards.\n   *\n   * @constant\n   * @default\n   * @property {number} wildcard.NONE - The term will have no wildcards inserted, this is the default behaviour\n   * @property {number} wildcard.LEADING - Prepend the term with a wildcard, unless a leading wildcard already exists\n   * @property {number} wildcard.TRAILING - Append a wildcard to the term, unless a trailing wildcard already exists\n   * @see lunr.Query~Clause\n   * @see lunr.Query#clause\n   * @see lunr.Query#term\n   * @example <caption>query term with trailing wildcard</caption>\n   * query.term('foo', { wildcard: lunr.Query.wildcard.TRAILING })\n   * @example <caption>query term with leading and trailing wildcard</caption>\n   * query.term('foo', {\n   *   wildcard: lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING\n   * })\n   */\n\n\n  lunr.Query.wildcard = new String(\"*\");\n  lunr.Query.wildcard.NONE = 0;\n  lunr.Query.wildcard.LEADING = 1;\n  lunr.Query.wildcard.TRAILING = 2;\n  /**\n   * Constants for indicating what kind of presence a term must have in matching documents.\n   *\n   * @constant\n   * @enum {number}\n   * @see lunr.Query~Clause\n   * @see lunr.Query#clause\n   * @see lunr.Query#term\n   * @example <caption>query term with required presence</caption>\n   * query.term('foo', { presence: lunr.Query.presence.REQUIRED })\n   */\n\n  lunr.Query.presence = {\n    /**\n     * Term's presence in a document is optional, this is the default value.\n     */\n    OPTIONAL: 1,\n\n    /**\n     * Term's presence in a document is required, documents that do not contain\n     * this term will not be returned.\n     */\n    REQUIRED: 2,\n\n    /**\n     * Term's presence in a document is prohibited, documents that do contain\n     * this term will not be returned.\n     */\n    PROHIBITED: 3\n  };\n  /**\n   * A single clause in a {@link lunr.Query} contains a term and details on how to\n   * match that term against a {@link lunr.Index}.\n   *\n   * @typedef {Object} lunr.Query~Clause\n   * @property {string[]} fields - The fields in an index this clause should be matched against.\n   * @property {number} [boost=1] - Any boost that should be applied when matching this clause.\n   * @property {number} [editDistance] - Whether the term should have fuzzy matching applied, and how fuzzy the match should be.\n   * @property {boolean} [usePipeline] - Whether the term should be passed through the search pipeline.\n   * @property {number} [wildcard=lunr.Query.wildcard.NONE] - Whether the term should have wildcards appended or prepended.\n   * @property {number} [presence=lunr.Query.presence.OPTIONAL] - The terms presence in any matching documents.\n   */\n\n  /**\n   * Adds a {@link lunr.Query~Clause} to this query.\n   *\n   * Unless the clause contains the fields to be matched all fields will be matched. In addition\n   * a default boost of 1 is applied to the clause.\n   *\n   * @param {lunr.Query~Clause} clause - The clause to add to this query.\n   * @see lunr.Query~Clause\n   * @returns {lunr.Query}\n   */\n\n  lunr.Query.prototype.clause = function (clause) {\n    if (!('fields' in clause)) {\n      clause.fields = this.allFields;\n    }\n\n    if (!('boost' in clause)) {\n      clause.boost = 1;\n    }\n\n    if (!('usePipeline' in clause)) {\n      clause.usePipeline = true;\n    }\n\n    if (!('wildcard' in clause)) {\n      clause.wildcard = lunr.Query.wildcard.NONE;\n    }\n\n    if (clause.wildcard & lunr.Query.wildcard.LEADING && clause.term.charAt(0) != lunr.Query.wildcard) {\n      clause.term = \"*\" + clause.term;\n    }\n\n    if (clause.wildcard & lunr.Query.wildcard.TRAILING && clause.term.slice(-1) != lunr.Query.wildcard) {\n      clause.term = \"\" + clause.term + \"*\";\n    }\n\n    if (!('presence' in clause)) {\n      clause.presence = lunr.Query.presence.OPTIONAL;\n    }\n\n    this.clauses.push(clause);\n    return this;\n  };\n  /**\n   * A negated query is one in which every clause has a presence of\n   * prohibited. These queries require some special processing to return\n   * the expected results.\n   *\n   * @returns boolean\n   */\n\n\n  lunr.Query.prototype.isNegated = function () {\n    for (var i = 0; i < this.clauses.length; i++) {\n      if (this.clauses[i].presence != lunr.Query.presence.PROHIBITED) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Adds a term to the current query, under the covers this will create a {@link lunr.Query~Clause}\n   * to the list of clauses that make up this query.\n   *\n   * The term is used as is, i.e. no tokenization will be performed by this method. Instead conversion\n   * to a token or token-like string should be done before calling this method.\n   *\n   * The term will be converted to a string by calling `toString`. Multiple terms can be passed as an\n   * array, each term in the array will share the same options.\n   *\n   * @param {object|object[]} term - The term(s) to add to the query.\n   * @param {object} [options] - Any additional properties to add to the query clause.\n   * @returns {lunr.Query}\n   * @see lunr.Query#clause\n   * @see lunr.Query~Clause\n   * @example <caption>adding a single term to a query</caption>\n   * query.term(\"foo\")\n   * @example <caption>adding a single term to a query and specifying search fields, term boost and automatic trailing wildcard</caption>\n   * query.term(\"foo\", {\n   *   fields: [\"title\"],\n   *   boost: 10,\n   *   wildcard: lunr.Query.wildcard.TRAILING\n   * })\n   * @example <caption>using lunr.tokenizer to convert a string to tokens before using them as terms</caption>\n   * query.term(lunr.tokenizer(\"foo bar\"))\n   */\n\n\n  lunr.Query.prototype.term = function (term, options) {\n    if (Array.isArray(term)) {\n      term.forEach(function (t) {\n        this.term(t, lunr.utils.clone(options));\n      }, this);\n      return this;\n    }\n\n    var clause = options || {};\n    clause.term = term.toString();\n    this.clause(clause);\n    return this;\n  };\n\n  lunr.QueryParseError = function (message, start, end) {\n    this.name = \"QueryParseError\";\n    this.message = message;\n    this.start = start;\n    this.end = end;\n  };\n\n  lunr.QueryParseError.prototype = new Error();\n\n  lunr.QueryLexer = function (str) {\n    this.lexemes = [];\n    this.str = str;\n    this.length = str.length;\n    this.pos = 0;\n    this.start = 0;\n    this.escapeCharPositions = [];\n  };\n\n  lunr.QueryLexer.prototype.run = function () {\n    var state = lunr.QueryLexer.lexText;\n\n    while (state) {\n      state = state(this);\n    }\n  };\n\n  lunr.QueryLexer.prototype.sliceString = function () {\n    var subSlices = [],\n        sliceStart = this.start,\n        sliceEnd = this.pos;\n\n    for (var i = 0; i < this.escapeCharPositions.length; i++) {\n      sliceEnd = this.escapeCharPositions[i];\n      subSlices.push(this.str.slice(sliceStart, sliceEnd));\n      sliceStart = sliceEnd + 1;\n    }\n\n    subSlices.push(this.str.slice(sliceStart, this.pos));\n    this.escapeCharPositions.length = 0;\n    return subSlices.join('');\n  };\n\n  lunr.QueryLexer.prototype.emit = function (type) {\n    this.lexemes.push({\n      type: type,\n      str: this.sliceString(),\n      start: this.start,\n      end: this.pos\n    });\n    this.start = this.pos;\n  };\n\n  lunr.QueryLexer.prototype.escapeCharacter = function () {\n    this.escapeCharPositions.push(this.pos - 1);\n    this.pos += 1;\n  };\n\n  lunr.QueryLexer.prototype.next = function () {\n    if (this.pos >= this.length) {\n      return lunr.QueryLexer.EOS;\n    }\n\n    var char = this.str.charAt(this.pos);\n    this.pos += 1;\n    return char;\n  };\n\n  lunr.QueryLexer.prototype.width = function () {\n    return this.pos - this.start;\n  };\n\n  lunr.QueryLexer.prototype.ignore = function () {\n    if (this.start == this.pos) {\n      this.pos += 1;\n    }\n\n    this.start = this.pos;\n  };\n\n  lunr.QueryLexer.prototype.backup = function () {\n    this.pos -= 1;\n  };\n\n  lunr.QueryLexer.prototype.acceptDigitRun = function () {\n    var char, charCode;\n\n    do {\n      char = this.next();\n      charCode = char.charCodeAt(0);\n    } while (charCode > 47 && charCode < 58);\n\n    if (char != lunr.QueryLexer.EOS) {\n      this.backup();\n    }\n  };\n\n  lunr.QueryLexer.prototype.more = function () {\n    return this.pos < this.length;\n  };\n\n  lunr.QueryLexer.EOS = 'EOS';\n  lunr.QueryLexer.FIELD = 'FIELD';\n  lunr.QueryLexer.TERM = 'TERM';\n  lunr.QueryLexer.EDIT_DISTANCE = 'EDIT_DISTANCE';\n  lunr.QueryLexer.BOOST = 'BOOST';\n  lunr.QueryLexer.PRESENCE = 'PRESENCE';\n\n  lunr.QueryLexer.lexField = function (lexer) {\n    lexer.backup();\n    lexer.emit(lunr.QueryLexer.FIELD);\n    lexer.ignore();\n    return lunr.QueryLexer.lexText;\n  };\n\n  lunr.QueryLexer.lexTerm = function (lexer) {\n    if (lexer.width() > 1) {\n      lexer.backup();\n      lexer.emit(lunr.QueryLexer.TERM);\n    }\n\n    lexer.ignore();\n\n    if (lexer.more()) {\n      return lunr.QueryLexer.lexText;\n    }\n  };\n\n  lunr.QueryLexer.lexEditDistance = function (lexer) {\n    lexer.ignore();\n    lexer.acceptDigitRun();\n    lexer.emit(lunr.QueryLexer.EDIT_DISTANCE);\n    return lunr.QueryLexer.lexText;\n  };\n\n  lunr.QueryLexer.lexBoost = function (lexer) {\n    lexer.ignore();\n    lexer.acceptDigitRun();\n    lexer.emit(lunr.QueryLexer.BOOST);\n    return lunr.QueryLexer.lexText;\n  };\n\n  lunr.QueryLexer.lexEOS = function (lexer) {\n    if (lexer.width() > 0) {\n      lexer.emit(lunr.QueryLexer.TERM);\n    }\n  }; // This matches the separator used when tokenising fields\n  // within a document. These should match otherwise it is\n  // not possible to search for some tokens within a document.\n  //\n  // It is possible for the user to change the separator on the\n  // tokenizer so it _might_ clash with any other of the special\n  // characters already used within the search string, e.g. :.\n  //\n  // This means that it is possible to change the separator in\n  // such a way that makes some words unsearchable using a search\n  // string.\n\n\n  lunr.QueryLexer.termSeparator = lunr.tokenizer.separator;\n\n  lunr.QueryLexer.lexText = function (lexer) {\n    while (true) {\n      var char = lexer.next();\n\n      if (char == lunr.QueryLexer.EOS) {\n        return lunr.QueryLexer.lexEOS;\n      } // Escape character is '\\'\n\n\n      if (char.charCodeAt(0) == 92) {\n        lexer.escapeCharacter();\n        continue;\n      }\n\n      if (char == \":\") {\n        return lunr.QueryLexer.lexField;\n      }\n\n      if (char == \"~\") {\n        lexer.backup();\n\n        if (lexer.width() > 0) {\n          lexer.emit(lunr.QueryLexer.TERM);\n        }\n\n        return lunr.QueryLexer.lexEditDistance;\n      }\n\n      if (char == \"^\") {\n        lexer.backup();\n\n        if (lexer.width() > 0) {\n          lexer.emit(lunr.QueryLexer.TERM);\n        }\n\n        return lunr.QueryLexer.lexBoost;\n      } // \"+\" indicates term presence is required\n      // checking for length to ensure that only\n      // leading \"+\" are considered\n\n\n      if (char == \"+\" && lexer.width() === 1) {\n        lexer.emit(lunr.QueryLexer.PRESENCE);\n        return lunr.QueryLexer.lexText;\n      } // \"-\" indicates term presence is prohibited\n      // checking for length to ensure that only\n      // leading \"-\" are considered\n\n\n      if (char == \"-\" && lexer.width() === 1) {\n        lexer.emit(lunr.QueryLexer.PRESENCE);\n        return lunr.QueryLexer.lexText;\n      }\n\n      if (char.match(lunr.QueryLexer.termSeparator)) {\n        return lunr.QueryLexer.lexTerm;\n      }\n    }\n  };\n\n  lunr.QueryParser = function (str, query) {\n    this.lexer = new lunr.QueryLexer(str);\n    this.query = query;\n    this.currentClause = {};\n    this.lexemeIdx = 0;\n  };\n\n  lunr.QueryParser.prototype.parse = function () {\n    this.lexer.run();\n    this.lexemes = this.lexer.lexemes;\n    var state = lunr.QueryParser.parseClause;\n\n    while (state) {\n      state = state(this);\n    }\n\n    return this.query;\n  };\n\n  lunr.QueryParser.prototype.peekLexeme = function () {\n    return this.lexemes[this.lexemeIdx];\n  };\n\n  lunr.QueryParser.prototype.consumeLexeme = function () {\n    var lexeme = this.peekLexeme();\n    this.lexemeIdx += 1;\n    return lexeme;\n  };\n\n  lunr.QueryParser.prototype.nextClause = function () {\n    var completedClause = this.currentClause;\n    this.query.clause(completedClause);\n    this.currentClause = {};\n  };\n\n  lunr.QueryParser.parseClause = function (parser) {\n    var lexeme = parser.peekLexeme();\n\n    if (lexeme == undefined) {\n      return;\n    }\n\n    switch (lexeme.type) {\n      case lunr.QueryLexer.PRESENCE:\n        return lunr.QueryParser.parsePresence;\n\n      case lunr.QueryLexer.FIELD:\n        return lunr.QueryParser.parseField;\n\n      case lunr.QueryLexer.TERM:\n        return lunr.QueryParser.parseTerm;\n\n      default:\n        var errorMessage = \"expected either a field or a term, found \" + lexeme.type;\n\n        if (lexeme.str.length >= 1) {\n          errorMessage += \" with value '\" + lexeme.str + \"'\";\n        }\n\n        throw new lunr.QueryParseError(errorMessage, lexeme.start, lexeme.end);\n    }\n  };\n\n  lunr.QueryParser.parsePresence = function (parser) {\n    var lexeme = parser.consumeLexeme();\n\n    if (lexeme == undefined) {\n      return;\n    }\n\n    switch (lexeme.str) {\n      case \"-\":\n        parser.currentClause.presence = lunr.Query.presence.PROHIBITED;\n        break;\n\n      case \"+\":\n        parser.currentClause.presence = lunr.Query.presence.REQUIRED;\n        break;\n\n      default:\n        var errorMessage = \"unrecognised presence operator'\" + lexeme.str + \"'\";\n        throw new lunr.QueryParseError(errorMessage, lexeme.start, lexeme.end);\n    }\n\n    var nextLexeme = parser.peekLexeme();\n\n    if (nextLexeme == undefined) {\n      var errorMessage = \"expecting term or field, found nothing\";\n      throw new lunr.QueryParseError(errorMessage, lexeme.start, lexeme.end);\n    }\n\n    switch (nextLexeme.type) {\n      case lunr.QueryLexer.FIELD:\n        return lunr.QueryParser.parseField;\n\n      case lunr.QueryLexer.TERM:\n        return lunr.QueryParser.parseTerm;\n\n      default:\n        var errorMessage = \"expecting term or field, found '\" + nextLexeme.type + \"'\";\n        throw new lunr.QueryParseError(errorMessage, nextLexeme.start, nextLexeme.end);\n    }\n  };\n\n  lunr.QueryParser.parseField = function (parser) {\n    var lexeme = parser.consumeLexeme();\n\n    if (lexeme == undefined) {\n      return;\n    }\n\n    if (parser.query.allFields.indexOf(lexeme.str) == -1) {\n      var possibleFields = parser.query.allFields.map(function (f) {\n        return \"'\" + f + \"'\";\n      }).join(', '),\n          errorMessage = \"unrecognised field '\" + lexeme.str + \"', possible fields: \" + possibleFields;\n      throw new lunr.QueryParseError(errorMessage, lexeme.start, lexeme.end);\n    }\n\n    parser.currentClause.fields = [lexeme.str];\n    var nextLexeme = parser.peekLexeme();\n\n    if (nextLexeme == undefined) {\n      var errorMessage = \"expecting term, found nothing\";\n      throw new lunr.QueryParseError(errorMessage, lexeme.start, lexeme.end);\n    }\n\n    switch (nextLexeme.type) {\n      case lunr.QueryLexer.TERM:\n        return lunr.QueryParser.parseTerm;\n\n      default:\n        var errorMessage = \"expecting term, found '\" + nextLexeme.type + \"'\";\n        throw new lunr.QueryParseError(errorMessage, nextLexeme.start, nextLexeme.end);\n    }\n  };\n\n  lunr.QueryParser.parseTerm = function (parser) {\n    var lexeme = parser.consumeLexeme();\n\n    if (lexeme == undefined) {\n      return;\n    }\n\n    parser.currentClause.term = lexeme.str.toLowerCase();\n\n    if (lexeme.str.indexOf(\"*\") != -1) {\n      parser.currentClause.usePipeline = false;\n    }\n\n    var nextLexeme = parser.peekLexeme();\n\n    if (nextLexeme == undefined) {\n      parser.nextClause();\n      return;\n    }\n\n    switch (nextLexeme.type) {\n      case lunr.QueryLexer.TERM:\n        parser.nextClause();\n        return lunr.QueryParser.parseTerm;\n\n      case lunr.QueryLexer.FIELD:\n        parser.nextClause();\n        return lunr.QueryParser.parseField;\n\n      case lunr.QueryLexer.EDIT_DISTANCE:\n        return lunr.QueryParser.parseEditDistance;\n\n      case lunr.QueryLexer.BOOST:\n        return lunr.QueryParser.parseBoost;\n\n      case lunr.QueryLexer.PRESENCE:\n        parser.nextClause();\n        return lunr.QueryParser.parsePresence;\n\n      default:\n        var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\";\n        throw new lunr.QueryParseError(errorMessage, nextLexeme.start, nextLexeme.end);\n    }\n  };\n\n  lunr.QueryParser.parseEditDistance = function (parser) {\n    var lexeme = parser.consumeLexeme();\n\n    if (lexeme == undefined) {\n      return;\n    }\n\n    var editDistance = parseInt(lexeme.str, 10);\n\n    if (isNaN(editDistance)) {\n      var errorMessage = \"edit distance must be numeric\";\n      throw new lunr.QueryParseError(errorMessage, lexeme.start, lexeme.end);\n    }\n\n    parser.currentClause.editDistance = editDistance;\n    var nextLexeme = parser.peekLexeme();\n\n    if (nextLexeme == undefined) {\n      parser.nextClause();\n      return;\n    }\n\n    switch (nextLexeme.type) {\n      case lunr.QueryLexer.TERM:\n        parser.nextClause();\n        return lunr.QueryParser.parseTerm;\n\n      case lunr.QueryLexer.FIELD:\n        parser.nextClause();\n        return lunr.QueryParser.parseField;\n\n      case lunr.QueryLexer.EDIT_DISTANCE:\n        return lunr.QueryParser.parseEditDistance;\n\n      case lunr.QueryLexer.BOOST:\n        return lunr.QueryParser.parseBoost;\n\n      case lunr.QueryLexer.PRESENCE:\n        parser.nextClause();\n        return lunr.QueryParser.parsePresence;\n\n      default:\n        var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\";\n        throw new lunr.QueryParseError(errorMessage, nextLexeme.start, nextLexeme.end);\n    }\n  };\n\n  lunr.QueryParser.parseBoost = function (parser) {\n    var lexeme = parser.consumeLexeme();\n\n    if (lexeme == undefined) {\n      return;\n    }\n\n    var boost = parseInt(lexeme.str, 10);\n\n    if (isNaN(boost)) {\n      var errorMessage = \"boost must be numeric\";\n      throw new lunr.QueryParseError(errorMessage, lexeme.start, lexeme.end);\n    }\n\n    parser.currentClause.boost = boost;\n    var nextLexeme = parser.peekLexeme();\n\n    if (nextLexeme == undefined) {\n      parser.nextClause();\n      return;\n    }\n\n    switch (nextLexeme.type) {\n      case lunr.QueryLexer.TERM:\n        parser.nextClause();\n        return lunr.QueryParser.parseTerm;\n\n      case lunr.QueryLexer.FIELD:\n        parser.nextClause();\n        return lunr.QueryParser.parseField;\n\n      case lunr.QueryLexer.EDIT_DISTANCE:\n        return lunr.QueryParser.parseEditDistance;\n\n      case lunr.QueryLexer.BOOST:\n        return lunr.QueryParser.parseBoost;\n\n      case lunr.QueryLexer.PRESENCE:\n        parser.nextClause();\n        return lunr.QueryParser.parsePresence;\n\n      default:\n        var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\";\n        throw new lunr.QueryParseError(errorMessage, nextLexeme.start, nextLexeme.end);\n    }\n  }\n  /**\n   * export the module via AMD, CommonJS or as a browser global\n   * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js\n   */\n  ;\n\n  (function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      // AMD. Register as an anonymous module.\n      define(factory);\n    } else if (typeof exports === 'object') {\n      /**\n       * Node. Does not work with strict CommonJS, but\n       * only CommonJS-like enviroments that support module.exports,\n       * like Node.\n       */\n      module.exports = factory();\n    } else {\n      // Browser globals (root is window)\n      root.lunr = factory();\n    }\n  })(this, function () {\n    /**\n     * Just return a value to define the module export.\n     * This example returns an object, but the module\n     * can return a function as the exported value.\n     */\n    return lunr;\n  });\n})();","map":{"version":3,"names":["lunr","config","builder","Builder","pipeline","add","trimmer","stopWordFilter","stemmer","searchPipeline","call","build","version","utils","warn","global","message","console","asString","obj","toString","clone","undefined","Object","create","keys","i","length","key","val","Array","isArray","slice","TypeError","FieldRef","docRef","fieldName","stringValue","_stringValue","joiner","fromString","s","n","indexOf","fieldRef","prototype","Set","elements","complete","intersect","other","union","contains","empty","object","a","b","intersection","element","push","concat","idf","posting","documentCount","documentsWithTerm","x","Math","log","abs","Token","str","metadata","update","fn","tokenizer","map","t","toLowerCase","len","tokens","sliceEnd","sliceStart","char","charAt","sliceLength","match","separator","tokenMetadata","Pipeline","_stack","registeredFunctions","registerFunction","label","warnIfFunctionNotRegistered","isRegistered","load","serialised","forEach","fnName","Error","fns","arguments","after","existingFn","newFn","pos","splice","before","remove","run","stackLength","memo","j","result","k","runString","token","reset","toJSON","Vector","_magnitude","positionForIndex","index","start","end","pivotPoint","floor","pivotIndex","insert","insertIdx","upsert","position","magnitude","sumOfSquares","elementsLength","sqrt","dot","otherVector","dotProduct","aLen","bLen","aVal","bVal","similarity","toArray","output","step2list","step3list","c","v","C","V","mgr0","meq1","mgr1","s_v","re_mgr0","RegExp","re_mgr1","re_meq1","re_s_v","re_1a","re2_1a","re_1b","re2_1b","re_1b_2","re2_1b_2","re3_1b_2","re4_1b_2","re_1c","re_2","re_3","re_4","re2_4","re_5","re_5_1","re3_5","porterStemmer","w","stem","suffix","firstch","re","re2","re3","re4","substr","toUpperCase","test","replace","fp","exec","generateStopWordFilter","stopWords","words","reduce","stopWord","TokenSet","final","edges","id","_nextId","fromArray","arr","finish","root","fromClause","clause","fromFuzzyString","term","editDistance","stack","node","editsRemaining","frame","pop","noEditNode","insertionNode","substitutionNode","charA","charB","transposeNode","next","prefix","edge","_str","labels","sort","qNode","qEdges","qLen","nEdges","nLen","q","qEdge","nEdge","previousWord","uncheckedNodes","minimizedNodes","word","commonPrefix","minimize","child","nextNode","parent","downTo","childKey","Index","attrs","invertedIndex","fieldVectors","tokenSet","fields","search","queryString","query","parser","QueryParser","parse","Query","matchingFields","queryVectors","termFieldCache","requiredMatches","prohibitedMatches","clauses","terms","clauseMatches","usePipeline","m","termTokenSet","expandedTerms","presence","REQUIRED","field","expandedTerm","termIndex","_index","fieldPosting","matchingDocumentRefs","termField","matchingDocumentsSet","PROHIBITED","boost","l","matchingDocumentRef","matchingFieldRef","fieldMatch","MatchData","allRequiredMatches","allProhibitedMatches","matchingFieldRefs","results","matches","isNegated","fieldVector","score","docMatch","matchData","combine","ref","serializedIndex","serializedVectors","serializedInvertedIndex","tokenSetBuilder","tuple","_ref","_fields","_documents","fieldTermFrequencies","fieldLengths","_b","_k1","metadataWhitelist","attributes","RangeError","number","k1","doc","extractor","fieldTerms","metadataKey","calculateAverageFieldLengths","fieldRefs","numberOfFields","accumulator","documentsWithField","averageFieldLength","createFieldVectors","fieldRefsLength","termIdfCache","fieldLength","termFrequencies","termsLength","fieldBoost","docBoost","tf","scoreWithPrecision","round","createTokenSet","use","args","unshift","apply","clonedMetadata","metadataKeys","otherMatchData","allFields","wildcard","String","NONE","LEADING","TRAILING","OPTIONAL","options","QueryParseError","name","QueryLexer","lexemes","escapeCharPositions","state","lexText","sliceString","subSlices","join","emit","type","escapeCharacter","EOS","width","ignore","backup","acceptDigitRun","charCode","charCodeAt","more","FIELD","TERM","EDIT_DISTANCE","BOOST","PRESENCE","lexField","lexer","lexTerm","lexEditDistance","lexBoost","lexEOS","termSeparator","currentClause","lexemeIdx","parseClause","peekLexeme","consumeLexeme","lexeme","nextClause","completedClause","parsePresence","parseField","parseTerm","errorMessage","nextLexeme","possibleFields","f","parseEditDistance","parseBoost","parseInt","isNaN","factory","define","amd","exports","module"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/lunr/lunr.js"],"sourcesContent":["/**\n * lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.3.9\n * Copyright (C) 2020 Oliver Nightingale\n * @license MIT\n */\n\n;(function(){\n\n/**\n * A convenience function for configuring and constructing\n * a new lunr Index.\n *\n * A lunr.Builder instance is created and the pipeline setup\n * with a trimmer, stop word filter and stemmer.\n *\n * This builder object is yielded to the configuration function\n * that is passed as a parameter, allowing the list of fields\n * and other builder parameters to be customised.\n *\n * All documents _must_ be added within the passed config function.\n *\n * @example\n * var idx = lunr(function () {\n *   this.field('title')\n *   this.field('body')\n *   this.ref('id')\n *\n *   documents.forEach(function (doc) {\n *     this.add(doc)\n *   }, this)\n * })\n *\n * @see {@link lunr.Builder}\n * @see {@link lunr.Pipeline}\n * @see {@link lunr.trimmer}\n * @see {@link lunr.stopWordFilter}\n * @see {@link lunr.stemmer}\n * @namespace {function} lunr\n */\nvar lunr = function (config) {\n  var builder = new lunr.Builder\n\n  builder.pipeline.add(\n    lunr.trimmer,\n    lunr.stopWordFilter,\n    lunr.stemmer\n  )\n\n  builder.searchPipeline.add(\n    lunr.stemmer\n  )\n\n  config.call(builder, builder)\n  return builder.build()\n}\n\nlunr.version = \"2.3.9\"\n/*!\n * lunr.utils\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * A namespace containing utils for the rest of the lunr library\n * @namespace lunr.utils\n */\nlunr.utils = {}\n\n/**\n * Print a warning message to the console.\n *\n * @param {String} message The message to be printed.\n * @memberOf lunr.utils\n * @function\n */\nlunr.utils.warn = (function (global) {\n  /* eslint-disable no-console */\n  return function (message) {\n    if (global.console && console.warn) {\n      console.warn(message)\n    }\n  }\n  /* eslint-enable no-console */\n})(this)\n\n/**\n * Convert an object to a string.\n *\n * In the case of `null` and `undefined` the function returns\n * the empty string, in all other cases the result of calling\n * `toString` on the passed object is returned.\n *\n * @param {Any} obj The object to convert to a string.\n * @return {String} string representation of the passed object.\n * @memberOf lunr.utils\n */\nlunr.utils.asString = function (obj) {\n  if (obj === void 0 || obj === null) {\n    return \"\"\n  } else {\n    return obj.toString()\n  }\n}\n\n/**\n * Clones an object.\n *\n * Will create a copy of an existing object such that any mutations\n * on the copy cannot affect the original.\n *\n * Only shallow objects are supported, passing a nested object to this\n * function will cause a TypeError.\n *\n * Objects with primitives, and arrays of primitives are supported.\n *\n * @param {Object} obj The object to clone.\n * @return {Object} a clone of the passed object.\n * @throws {TypeError} when a nested object is passed.\n * @memberOf Utils\n */\nlunr.utils.clone = function (obj) {\n  if (obj === null || obj === undefined) {\n    return obj\n  }\n\n  var clone = Object.create(null),\n      keys = Object.keys(obj)\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i],\n        val = obj[key]\n\n    if (Array.isArray(val)) {\n      clone[key] = val.slice()\n      continue\n    }\n\n    if (typeof val === 'string' ||\n        typeof val === 'number' ||\n        typeof val === 'boolean') {\n      clone[key] = val\n      continue\n    }\n\n    throw new TypeError(\"clone is not deep and does not support nested objects\")\n  }\n\n  return clone\n}\nlunr.FieldRef = function (docRef, fieldName, stringValue) {\n  this.docRef = docRef\n  this.fieldName = fieldName\n  this._stringValue = stringValue\n}\n\nlunr.FieldRef.joiner = \"/\"\n\nlunr.FieldRef.fromString = function (s) {\n  var n = s.indexOf(lunr.FieldRef.joiner)\n\n  if (n === -1) {\n    throw \"malformed field ref string\"\n  }\n\n  var fieldRef = s.slice(0, n),\n      docRef = s.slice(n + 1)\n\n  return new lunr.FieldRef (docRef, fieldRef, s)\n}\n\nlunr.FieldRef.prototype.toString = function () {\n  if (this._stringValue == undefined) {\n    this._stringValue = this.fieldName + lunr.FieldRef.joiner + this.docRef\n  }\n\n  return this._stringValue\n}\n/*!\n * lunr.Set\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * A lunr set.\n *\n * @constructor\n */\nlunr.Set = function (elements) {\n  this.elements = Object.create(null)\n\n  if (elements) {\n    this.length = elements.length\n\n    for (var i = 0; i < this.length; i++) {\n      this.elements[elements[i]] = true\n    }\n  } else {\n    this.length = 0\n  }\n}\n\n/**\n * A complete set that contains all elements.\n *\n * @static\n * @readonly\n * @type {lunr.Set}\n */\nlunr.Set.complete = {\n  intersect: function (other) {\n    return other\n  },\n\n  union: function () {\n    return this\n  },\n\n  contains: function () {\n    return true\n  }\n}\n\n/**\n * An empty set that contains no elements.\n *\n * @static\n * @readonly\n * @type {lunr.Set}\n */\nlunr.Set.empty = {\n  intersect: function () {\n    return this\n  },\n\n  union: function (other) {\n    return other\n  },\n\n  contains: function () {\n    return false\n  }\n}\n\n/**\n * Returns true if this set contains the specified object.\n *\n * @param {object} object - Object whose presence in this set is to be tested.\n * @returns {boolean} - True if this set contains the specified object.\n */\nlunr.Set.prototype.contains = function (object) {\n  return !!this.elements[object]\n}\n\n/**\n * Returns a new set containing only the elements that are present in both\n * this set and the specified set.\n *\n * @param {lunr.Set} other - set to intersect with this set.\n * @returns {lunr.Set} a new set that is the intersection of this and the specified set.\n */\n\nlunr.Set.prototype.intersect = function (other) {\n  var a, b, elements, intersection = []\n\n  if (other === lunr.Set.complete) {\n    return this\n  }\n\n  if (other === lunr.Set.empty) {\n    return other\n  }\n\n  if (this.length < other.length) {\n    a = this\n    b = other\n  } else {\n    a = other\n    b = this\n  }\n\n  elements = Object.keys(a.elements)\n\n  for (var i = 0; i < elements.length; i++) {\n    var element = elements[i]\n    if (element in b.elements) {\n      intersection.push(element)\n    }\n  }\n\n  return new lunr.Set (intersection)\n}\n\n/**\n * Returns a new set combining the elements of this and the specified set.\n *\n * @param {lunr.Set} other - set to union with this set.\n * @return {lunr.Set} a new set that is the union of this and the specified set.\n */\n\nlunr.Set.prototype.union = function (other) {\n  if (other === lunr.Set.complete) {\n    return lunr.Set.complete\n  }\n\n  if (other === lunr.Set.empty) {\n    return this\n  }\n\n  return new lunr.Set(Object.keys(this.elements).concat(Object.keys(other.elements)))\n}\n/**\n * A function to calculate the inverse document frequency for\n * a posting. This is shared between the builder and the index\n *\n * @private\n * @param {object} posting - The posting for a given term\n * @param {number} documentCount - The total number of documents.\n */\nlunr.idf = function (posting, documentCount) {\n  var documentsWithTerm = 0\n\n  for (var fieldName in posting) {\n    if (fieldName == '_index') continue // Ignore the term index, its not a field\n    documentsWithTerm += Object.keys(posting[fieldName]).length\n  }\n\n  var x = (documentCount - documentsWithTerm + 0.5) / (documentsWithTerm + 0.5)\n\n  return Math.log(1 + Math.abs(x))\n}\n\n/**\n * A token wraps a string representation of a token\n * as it is passed through the text processing pipeline.\n *\n * @constructor\n * @param {string} [str=''] - The string token being wrapped.\n * @param {object} [metadata={}] - Metadata associated with this token.\n */\nlunr.Token = function (str, metadata) {\n  this.str = str || \"\"\n  this.metadata = metadata || {}\n}\n\n/**\n * Returns the token string that is being wrapped by this object.\n *\n * @returns {string}\n */\nlunr.Token.prototype.toString = function () {\n  return this.str\n}\n\n/**\n * A token update function is used when updating or optionally\n * when cloning a token.\n *\n * @callback lunr.Token~updateFunction\n * @param {string} str - The string representation of the token.\n * @param {Object} metadata - All metadata associated with this token.\n */\n\n/**\n * Applies the given function to the wrapped string token.\n *\n * @example\n * token.update(function (str, metadata) {\n *   return str.toUpperCase()\n * })\n *\n * @param {lunr.Token~updateFunction} fn - A function to apply to the token string.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.update = function (fn) {\n  this.str = fn(this.str, this.metadata)\n  return this\n}\n\n/**\n * Creates a clone of this token. Optionally a function can be\n * applied to the cloned token.\n *\n * @param {lunr.Token~updateFunction} [fn] - An optional function to apply to the cloned token.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.clone = function (fn) {\n  fn = fn || function (s) { return s }\n  return new lunr.Token (fn(this.str, this.metadata), this.metadata)\n}\n/*!\n * lunr.tokenizer\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * A function for splitting a string into tokens ready to be inserted into\n * the search index. Uses `lunr.tokenizer.separator` to split strings, change\n * the value of this property to change how strings are split into tokens.\n *\n * This tokenizer will convert its parameter to a string by calling `toString` and\n * then will split this string on the character in `lunr.tokenizer.separator`.\n * Arrays will have their elements converted to strings and wrapped in a lunr.Token.\n *\n * Optional metadata can be passed to the tokenizer, this metadata will be cloned and\n * added as metadata to every token that is created from the object to be tokenized.\n *\n * @static\n * @param {?(string|object|object[])} obj - The object to convert into tokens\n * @param {?object} metadata - Optional metadata to associate with every token\n * @returns {lunr.Token[]}\n * @see {@link lunr.Pipeline}\n */\nlunr.tokenizer = function (obj, metadata) {\n  if (obj == null || obj == undefined) {\n    return []\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(function (t) {\n      return new lunr.Token(\n        lunr.utils.asString(t).toLowerCase(),\n        lunr.utils.clone(metadata)\n      )\n    })\n  }\n\n  var str = obj.toString().toLowerCase(),\n      len = str.length,\n      tokens = []\n\n  for (var sliceEnd = 0, sliceStart = 0; sliceEnd <= len; sliceEnd++) {\n    var char = str.charAt(sliceEnd),\n        sliceLength = sliceEnd - sliceStart\n\n    if ((char.match(lunr.tokenizer.separator) || sliceEnd == len)) {\n\n      if (sliceLength > 0) {\n        var tokenMetadata = lunr.utils.clone(metadata) || {}\n        tokenMetadata[\"position\"] = [sliceStart, sliceLength]\n        tokenMetadata[\"index\"] = tokens.length\n\n        tokens.push(\n          new lunr.Token (\n            str.slice(sliceStart, sliceEnd),\n            tokenMetadata\n          )\n        )\n      }\n\n      sliceStart = sliceEnd + 1\n    }\n\n  }\n\n  return tokens\n}\n\n/**\n * The separator used to split a string into tokens. Override this property to change the behaviour of\n * `lunr.tokenizer` behaviour when tokenizing strings. By default this splits on whitespace and hyphens.\n *\n * @static\n * @see lunr.tokenizer\n */\nlunr.tokenizer.separator = /[\\s\\-]+/\n/*!\n * lunr.Pipeline\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * lunr.Pipelines maintain an ordered list of functions to be applied to all\n * tokens in documents entering the search index and queries being ran against\n * the index.\n *\n * An instance of lunr.Index created with the lunr shortcut will contain a\n * pipeline with a stop word filter and an English language stemmer. Extra\n * functions can be added before or after either of these functions or these\n * default functions can be removed.\n *\n * When run the pipeline will call each function in turn, passing a token, the\n * index of that token in the original list of all tokens and finally a list of\n * all the original tokens.\n *\n * The output of functions in the pipeline will be passed to the next function\n * in the pipeline. To exclude a token from entering the index the function\n * should return undefined, the rest of the pipeline will not be called with\n * this token.\n *\n * For serialisation of pipelines to work, all functions used in an instance of\n * a pipeline should be registered with lunr.Pipeline. Registered functions can\n * then be loaded. If trying to load a serialised pipeline that uses functions\n * that are not registered an error will be thrown.\n *\n * If not planning on serialising the pipeline then registering pipeline functions\n * is not necessary.\n *\n * @constructor\n */\nlunr.Pipeline = function () {\n  this._stack = []\n}\n\nlunr.Pipeline.registeredFunctions = Object.create(null)\n\n/**\n * A pipeline function maps lunr.Token to lunr.Token. A lunr.Token contains the token\n * string as well as all known metadata. A pipeline function can mutate the token string\n * or mutate (or add) metadata for a given token.\n *\n * A pipeline function can indicate that the passed token should be discarded by returning\n * null, undefined or an empty string. This token will not be passed to any downstream pipeline\n * functions and will not be added to the index.\n *\n * Multiple tokens can be returned by returning an array of tokens. Each token will be passed\n * to any downstream pipeline functions and all will returned tokens will be added to the index.\n *\n * Any number of pipeline functions may be chained together using a lunr.Pipeline.\n *\n * @interface lunr.PipelineFunction\n * @param {lunr.Token} token - A token from the document being processed.\n * @param {number} i - The index of this token in the complete list of tokens for this document/field.\n * @param {lunr.Token[]} tokens - All tokens for this document/field.\n * @returns {(?lunr.Token|lunr.Token[])}\n */\n\n/**\n * Register a function with the pipeline.\n *\n * Functions that are used in the pipeline should be registered if the pipeline\n * needs to be serialised, or a serialised pipeline needs to be loaded.\n *\n * Registering a function does not add it to a pipeline, functions must still be\n * added to instances of the pipeline for them to be used when running a pipeline.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @param {String} label - The label to register this function with\n */\nlunr.Pipeline.registerFunction = function (fn, label) {\n  if (label in this.registeredFunctions) {\n    lunr.utils.warn('Overwriting existing registered function: ' + label)\n  }\n\n  fn.label = label\n  lunr.Pipeline.registeredFunctions[fn.label] = fn\n}\n\n/**\n * Warns if the function is not registered as a Pipeline function.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @private\n */\nlunr.Pipeline.warnIfFunctionNotRegistered = function (fn) {\n  var isRegistered = fn.label && (fn.label in this.registeredFunctions)\n\n  if (!isRegistered) {\n    lunr.utils.warn('Function is not registered with pipeline. This may cause problems when serialising the index.\\n', fn)\n  }\n}\n\n/**\n * Loads a previously serialised pipeline.\n *\n * All functions to be loaded must already be registered with lunr.Pipeline.\n * If any function from the serialised data has not been registered then an\n * error will be thrown.\n *\n * @param {Object} serialised - The serialised pipeline to load.\n * @returns {lunr.Pipeline}\n */\nlunr.Pipeline.load = function (serialised) {\n  var pipeline = new lunr.Pipeline\n\n  serialised.forEach(function (fnName) {\n    var fn = lunr.Pipeline.registeredFunctions[fnName]\n\n    if (fn) {\n      pipeline.add(fn)\n    } else {\n      throw new Error('Cannot load unregistered function: ' + fnName)\n    }\n  })\n\n  return pipeline\n}\n\n/**\n * Adds new functions to the end of the pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction[]} functions - Any number of functions to add to the pipeline.\n */\nlunr.Pipeline.prototype.add = function () {\n  var fns = Array.prototype.slice.call(arguments)\n\n  fns.forEach(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n    this._stack.push(fn)\n  }, this)\n}\n\n/**\n * Adds a single function after a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.after = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  pos = pos + 1\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Adds a single function before a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.before = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Removes a function from the pipeline.\n *\n * @param {lunr.PipelineFunction} fn The function to remove from the pipeline.\n */\nlunr.Pipeline.prototype.remove = function (fn) {\n  var pos = this._stack.indexOf(fn)\n  if (pos == -1) {\n    return\n  }\n\n  this._stack.splice(pos, 1)\n}\n\n/**\n * Runs the current list of functions that make up the pipeline against the\n * passed tokens.\n *\n * @param {Array} tokens The tokens to run through the pipeline.\n * @returns {Array}\n */\nlunr.Pipeline.prototype.run = function (tokens) {\n  var stackLength = this._stack.length\n\n  for (var i = 0; i < stackLength; i++) {\n    var fn = this._stack[i]\n    var memo = []\n\n    for (var j = 0; j < tokens.length; j++) {\n      var result = fn(tokens[j], j, tokens)\n\n      if (result === null || result === void 0 || result === '') continue\n\n      if (Array.isArray(result)) {\n        for (var k = 0; k < result.length; k++) {\n          memo.push(result[k])\n        }\n      } else {\n        memo.push(result)\n      }\n    }\n\n    tokens = memo\n  }\n\n  return tokens\n}\n\n/**\n * Convenience method for passing a string through a pipeline and getting\n * strings out. This method takes care of wrapping the passed string in a\n * token and mapping the resulting tokens back to strings.\n *\n * @param {string} str - The string to pass through the pipeline.\n * @param {?object} metadata - Optional metadata to associate with the token\n * passed to the pipeline.\n * @returns {string[]}\n */\nlunr.Pipeline.prototype.runString = function (str, metadata) {\n  var token = new lunr.Token (str, metadata)\n\n  return this.run([token]).map(function (t) {\n    return t.toString()\n  })\n}\n\n/**\n * Resets the pipeline by removing any existing processors.\n *\n */\nlunr.Pipeline.prototype.reset = function () {\n  this._stack = []\n}\n\n/**\n * Returns a representation of the pipeline ready for serialisation.\n *\n * Logs a warning if the function has not been registered.\n *\n * @returns {Array}\n */\nlunr.Pipeline.prototype.toJSON = function () {\n  return this._stack.map(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n\n    return fn.label\n  })\n}\n/*!\n * lunr.Vector\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * A vector is used to construct the vector space of documents and queries. These\n * vectors support operations to determine the similarity between two documents or\n * a document and a query.\n *\n * Normally no parameters are required for initializing a vector, but in the case of\n * loading a previously dumped vector the raw elements can be provided to the constructor.\n *\n * For performance reasons vectors are implemented with a flat array, where an elements\n * index is immediately followed by its value. E.g. [index, value, index, value]. This\n * allows the underlying array to be as sparse as possible and still offer decent\n * performance when being used for vector calculations.\n *\n * @constructor\n * @param {Number[]} [elements] - The flat list of element index and element value pairs.\n */\nlunr.Vector = function (elements) {\n  this._magnitude = 0\n  this.elements = elements || []\n}\n\n\n/**\n * Calculates the position within the vector to insert a given index.\n *\n * This is used internally by insert and upsert. If there are duplicate indexes then\n * the position is returned as if the value for that index were to be updated, but it\n * is the callers responsibility to check whether there is a duplicate at that index\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @returns {Number}\n */\nlunr.Vector.prototype.positionForIndex = function (index) {\n  // For an empty vector the tuple can be inserted at the beginning\n  if (this.elements.length == 0) {\n    return 0\n  }\n\n  var start = 0,\n      end = this.elements.length / 2,\n      sliceLength = end - start,\n      pivotPoint = Math.floor(sliceLength / 2),\n      pivotIndex = this.elements[pivotPoint * 2]\n\n  while (sliceLength > 1) {\n    if (pivotIndex < index) {\n      start = pivotPoint\n    }\n\n    if (pivotIndex > index) {\n      end = pivotPoint\n    }\n\n    if (pivotIndex == index) {\n      break\n    }\n\n    sliceLength = end - start\n    pivotPoint = start + Math.floor(sliceLength / 2)\n    pivotIndex = this.elements[pivotPoint * 2]\n  }\n\n  if (pivotIndex == index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex > index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex < index) {\n    return (pivotPoint + 1) * 2\n  }\n}\n\n/**\n * Inserts an element at an index within the vector.\n *\n * Does not allow duplicates, will throw an error if there is already an entry\n * for this index.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n */\nlunr.Vector.prototype.insert = function (insertIdx, val) {\n  this.upsert(insertIdx, val, function () {\n    throw \"duplicate index\"\n  })\n}\n\n/**\n * Inserts or updates an existing index within the vector.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n * @param {function} fn - A function that is called for updates, the existing value and the\n * requested value are passed as arguments\n */\nlunr.Vector.prototype.upsert = function (insertIdx, val, fn) {\n  this._magnitude = 0\n  var position = this.positionForIndex(insertIdx)\n\n  if (this.elements[position] == insertIdx) {\n    this.elements[position + 1] = fn(this.elements[position + 1], val)\n  } else {\n    this.elements.splice(position, 0, insertIdx, val)\n  }\n}\n\n/**\n * Calculates the magnitude of this vector.\n *\n * @returns {Number}\n */\nlunr.Vector.prototype.magnitude = function () {\n  if (this._magnitude) return this._magnitude\n\n  var sumOfSquares = 0,\n      elementsLength = this.elements.length\n\n  for (var i = 1; i < elementsLength; i += 2) {\n    var val = this.elements[i]\n    sumOfSquares += val * val\n  }\n\n  return this._magnitude = Math.sqrt(sumOfSquares)\n}\n\n/**\n * Calculates the dot product of this vector and another vector.\n *\n * @param {lunr.Vector} otherVector - The vector to compute the dot product with.\n * @returns {Number}\n */\nlunr.Vector.prototype.dot = function (otherVector) {\n  var dotProduct = 0,\n      a = this.elements, b = otherVector.elements,\n      aLen = a.length, bLen = b.length,\n      aVal = 0, bVal = 0,\n      i = 0, j = 0\n\n  while (i < aLen && j < bLen) {\n    aVal = a[i], bVal = b[j]\n    if (aVal < bVal) {\n      i += 2\n    } else if (aVal > bVal) {\n      j += 2\n    } else if (aVal == bVal) {\n      dotProduct += a[i + 1] * b[j + 1]\n      i += 2\n      j += 2\n    }\n  }\n\n  return dotProduct\n}\n\n/**\n * Calculates the similarity between this vector and another vector.\n *\n * @param {lunr.Vector} otherVector - The other vector to calculate the\n * similarity with.\n * @returns {Number}\n */\nlunr.Vector.prototype.similarity = function (otherVector) {\n  return this.dot(otherVector) / this.magnitude() || 0\n}\n\n/**\n * Converts the vector to an array of the elements within the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toArray = function () {\n  var output = new Array (this.elements.length / 2)\n\n  for (var i = 1, j = 0; i < this.elements.length; i += 2, j++) {\n    output[j] = this.elements[i]\n  }\n\n  return output\n}\n\n/**\n * A JSON serializable representation of the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toJSON = function () {\n  return this.elements\n}\n/* eslint-disable */\n/*!\n * lunr.stemmer\n * Copyright (C) 2020 Oliver Nightingale\n * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt\n */\n\n/**\n * lunr.stemmer is an english language stemmer, this is a JavaScript\n * implementation of the PorterStemmer taken from http://tartarus.org/~martin\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token - The string to stem\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n * @function\n */\nlunr.stemmer = (function(){\n  var step2list = {\n      \"ational\" : \"ate\",\n      \"tional\" : \"tion\",\n      \"enci\" : \"ence\",\n      \"anci\" : \"ance\",\n      \"izer\" : \"ize\",\n      \"bli\" : \"ble\",\n      \"alli\" : \"al\",\n      \"entli\" : \"ent\",\n      \"eli\" : \"e\",\n      \"ousli\" : \"ous\",\n      \"ization\" : \"ize\",\n      \"ation\" : \"ate\",\n      \"ator\" : \"ate\",\n      \"alism\" : \"al\",\n      \"iveness\" : \"ive\",\n      \"fulness\" : \"ful\",\n      \"ousness\" : \"ous\",\n      \"aliti\" : \"al\",\n      \"iviti\" : \"ive\",\n      \"biliti\" : \"ble\",\n      \"logi\" : \"log\"\n    },\n\n    step3list = {\n      \"icate\" : \"ic\",\n      \"ative\" : \"\",\n      \"alize\" : \"al\",\n      \"iciti\" : \"ic\",\n      \"ical\" : \"ic\",\n      \"ful\" : \"\",\n      \"ness\" : \"\"\n    },\n\n    c = \"[^aeiou]\",          // consonant\n    v = \"[aeiouy]\",          // vowel\n    C = c + \"[^aeiouy]*\",    // consonant sequence\n    V = v + \"[aeiou]*\",      // vowel sequence\n\n    mgr0 = \"^(\" + C + \")?\" + V + C,               // [C]VC... is m>0\n    meq1 = \"^(\" + C + \")?\" + V + C + \"(\" + V + \")?$\",  // [C]VC[V] is m=1\n    mgr1 = \"^(\" + C + \")?\" + V + C + V + C,       // [C]VCVC... is m>1\n    s_v = \"^(\" + C + \")?\" + v;                   // vowel in stem\n\n  var re_mgr0 = new RegExp(mgr0);\n  var re_mgr1 = new RegExp(mgr1);\n  var re_meq1 = new RegExp(meq1);\n  var re_s_v = new RegExp(s_v);\n\n  var re_1a = /^(.+?)(ss|i)es$/;\n  var re2_1a = /^(.+?)([^s])s$/;\n  var re_1b = /^(.+?)eed$/;\n  var re2_1b = /^(.+?)(ed|ing)$/;\n  var re_1b_2 = /.$/;\n  var re2_1b_2 = /(at|bl|iz)$/;\n  var re3_1b_2 = new RegExp(\"([^aeiouylsz])\\\\1$\");\n  var re4_1b_2 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var re_1c = /^(.+?[^aeiou])y$/;\n  var re_2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;\n\n  var re_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;\n\n  var re_4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;\n  var re2_4 = /^(.+?)(s|t)(ion)$/;\n\n  var re_5 = /^(.+?)e$/;\n  var re_5_1 = /ll$/;\n  var re3_5 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var porterStemmer = function porterStemmer(w) {\n    var stem,\n      suffix,\n      firstch,\n      re,\n      re2,\n      re3,\n      re4;\n\n    if (w.length < 3) { return w; }\n\n    firstch = w.substr(0,1);\n    if (firstch == \"y\") {\n      w = firstch.toUpperCase() + w.substr(1);\n    }\n\n    // Step 1a\n    re = re_1a\n    re2 = re2_1a;\n\n    if (re.test(w)) { w = w.replace(re,\"$1$2\"); }\n    else if (re2.test(w)) { w = w.replace(re2,\"$1$2\"); }\n\n    // Step 1b\n    re = re_1b;\n    re2 = re2_1b;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      re = re_mgr0;\n      if (re.test(fp[1])) {\n        re = re_1b_2;\n        w = w.replace(re,\"\");\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1];\n      re2 = re_s_v;\n      if (re2.test(stem)) {\n        w = stem;\n        re2 = re2_1b_2;\n        re3 = re3_1b_2;\n        re4 = re4_1b_2;\n        if (re2.test(w)) { w = w + \"e\"; }\n        else if (re3.test(w)) { re = re_1b_2; w = w.replace(re,\"\"); }\n        else if (re4.test(w)) { w = w + \"e\"; }\n      }\n    }\n\n    // Step 1c - replace suffix y or Y by i if preceded by a non-vowel which is not the first letter of the word (so cry -> cri, by -> by, say -> say)\n    re = re_1c;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      w = stem + \"i\";\n    }\n\n    // Step 2\n    re = re_2;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step2list[suffix];\n      }\n    }\n\n    // Step 3\n    re = re_3;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step3list[suffix];\n      }\n    }\n\n    // Step 4\n    re = re_4;\n    re2 = re2_4;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      if (re.test(stem)) {\n        w = stem;\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1] + fp[2];\n      re2 = re_mgr1;\n      if (re2.test(stem)) {\n        w = stem;\n      }\n    }\n\n    // Step 5\n    re = re_5;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      re2 = re_meq1;\n      re3 = re3_5;\n      if (re.test(stem) || (re2.test(stem) && !(re3.test(stem)))) {\n        w = stem;\n      }\n    }\n\n    re = re_5_1;\n    re2 = re_mgr1;\n    if (re.test(w) && re2.test(w)) {\n      re = re_1b_2;\n      w = w.replace(re,\"\");\n    }\n\n    // and turn initial Y back to y\n\n    if (firstch == \"y\") {\n      w = firstch.toLowerCase() + w.substr(1);\n    }\n\n    return w;\n  };\n\n  return function (token) {\n    return token.update(porterStemmer);\n  }\n})();\n\nlunr.Pipeline.registerFunction(lunr.stemmer, 'stemmer')\n/*!\n * lunr.stopWordFilter\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * lunr.generateStopWordFilter builds a stopWordFilter function from the provided\n * list of stop words.\n *\n * The built in lunr.stopWordFilter is built using this generator and can be used\n * to generate custom stopWordFilters for applications or non English languages.\n *\n * @function\n * @param {Array} token The token to pass through the filter\n * @returns {lunr.PipelineFunction}\n * @see lunr.Pipeline\n * @see lunr.stopWordFilter\n */\nlunr.generateStopWordFilter = function (stopWords) {\n  var words = stopWords.reduce(function (memo, stopWord) {\n    memo[stopWord] = stopWord\n    return memo\n  }, {})\n\n  return function (token) {\n    if (token && words[token.toString()] !== token.toString()) return token\n  }\n}\n\n/**\n * lunr.stopWordFilter is an English language stop word list filter, any words\n * contained in the list will not be passed through the filter.\n *\n * This is intended to be used in the Pipeline. If the token does not pass the\n * filter then undefined will be returned.\n *\n * @function\n * @implements {lunr.PipelineFunction}\n * @params {lunr.Token} token - A token to check for being a stop word.\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n */\nlunr.stopWordFilter = lunr.generateStopWordFilter([\n  'a',\n  'able',\n  'about',\n  'across',\n  'after',\n  'all',\n  'almost',\n  'also',\n  'am',\n  'among',\n  'an',\n  'and',\n  'any',\n  'are',\n  'as',\n  'at',\n  'be',\n  'because',\n  'been',\n  'but',\n  'by',\n  'can',\n  'cannot',\n  'could',\n  'dear',\n  'did',\n  'do',\n  'does',\n  'either',\n  'else',\n  'ever',\n  'every',\n  'for',\n  'from',\n  'get',\n  'got',\n  'had',\n  'has',\n  'have',\n  'he',\n  'her',\n  'hers',\n  'him',\n  'his',\n  'how',\n  'however',\n  'i',\n  'if',\n  'in',\n  'into',\n  'is',\n  'it',\n  'its',\n  'just',\n  'least',\n  'let',\n  'like',\n  'likely',\n  'may',\n  'me',\n  'might',\n  'most',\n  'must',\n  'my',\n  'neither',\n  'no',\n  'nor',\n  'not',\n  'of',\n  'off',\n  'often',\n  'on',\n  'only',\n  'or',\n  'other',\n  'our',\n  'own',\n  'rather',\n  'said',\n  'say',\n  'says',\n  'she',\n  'should',\n  'since',\n  'so',\n  'some',\n  'than',\n  'that',\n  'the',\n  'their',\n  'them',\n  'then',\n  'there',\n  'these',\n  'they',\n  'this',\n  'tis',\n  'to',\n  'too',\n  'twas',\n  'us',\n  'wants',\n  'was',\n  'we',\n  'were',\n  'what',\n  'when',\n  'where',\n  'which',\n  'while',\n  'who',\n  'whom',\n  'why',\n  'will',\n  'with',\n  'would',\n  'yet',\n  'you',\n  'your'\n])\n\nlunr.Pipeline.registerFunction(lunr.stopWordFilter, 'stopWordFilter')\n/*!\n * lunr.trimmer\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * lunr.trimmer is a pipeline function for trimming non word\n * characters from the beginning and end of tokens before they\n * enter the index.\n *\n * This implementation may not work correctly for non latin\n * characters and should either be removed or adapted for use\n * with languages with non-latin characters.\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token The token to pass through the filter\n * @returns {lunr.Token}\n * @see lunr.Pipeline\n */\nlunr.trimmer = function (token) {\n  return token.update(function (s) {\n    return s.replace(/^\\W+/, '').replace(/\\W+$/, '')\n  })\n}\n\nlunr.Pipeline.registerFunction(lunr.trimmer, 'trimmer')\n/*!\n * lunr.TokenSet\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * A token set is used to store the unique list of all tokens\n * within an index. Token sets are also used to represent an\n * incoming query to the index, this query token set and index\n * token set are then intersected to find which tokens to look\n * up in the inverted index.\n *\n * A token set can hold multiple tokens, as in the case of the\n * index token set, or it can hold a single token as in the\n * case of a simple query token set.\n *\n * Additionally token sets are used to perform wildcard matching.\n * Leading, contained and trailing wildcards are supported, and\n * from this edit distance matching can also be provided.\n *\n * Token sets are implemented as a minimal finite state automata,\n * where both common prefixes and suffixes are shared between tokens.\n * This helps to reduce the space used for storing the token set.\n *\n * @constructor\n */\nlunr.TokenSet = function () {\n  this.final = false\n  this.edges = {}\n  this.id = lunr.TokenSet._nextId\n  lunr.TokenSet._nextId += 1\n}\n\n/**\n * Keeps track of the next, auto increment, identifier to assign\n * to a new tokenSet.\n *\n * TokenSets require a unique identifier to be correctly minimised.\n *\n * @private\n */\nlunr.TokenSet._nextId = 1\n\n/**\n * Creates a TokenSet instance from the given sorted array of words.\n *\n * @param {String[]} arr - A sorted array of strings to create the set from.\n * @returns {lunr.TokenSet}\n * @throws Will throw an error if the input array is not sorted.\n */\nlunr.TokenSet.fromArray = function (arr) {\n  var builder = new lunr.TokenSet.Builder\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    builder.insert(arr[i])\n  }\n\n  builder.finish()\n  return builder.root\n}\n\n/**\n * Creates a token set from a query clause.\n *\n * @private\n * @param {Object} clause - A single clause from lunr.Query.\n * @param {string} clause.term - The query clause term.\n * @param {number} [clause.editDistance] - The optional edit distance for the term.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromClause = function (clause) {\n  if ('editDistance' in clause) {\n    return lunr.TokenSet.fromFuzzyString(clause.term, clause.editDistance)\n  } else {\n    return lunr.TokenSet.fromString(clause.term)\n  }\n}\n\n/**\n * Creates a token set representing a single string with a specified\n * edit distance.\n *\n * Insertions, deletions, substitutions and transpositions are each\n * treated as an edit distance of 1.\n *\n * Increasing the allowed edit distance will have a dramatic impact\n * on the performance of both creating and intersecting these TokenSets.\n * It is advised to keep the edit distance less than 3.\n *\n * @param {string} str - The string to create the token set from.\n * @param {number} editDistance - The allowed edit distance to match.\n * @returns {lunr.Vector}\n */\nlunr.TokenSet.fromFuzzyString = function (str, editDistance) {\n  var root = new lunr.TokenSet\n\n  var stack = [{\n    node: root,\n    editsRemaining: editDistance,\n    str: str\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop()\n\n    // no edit\n    if (frame.str.length > 0) {\n      var char = frame.str.charAt(0),\n          noEditNode\n\n      if (char in frame.node.edges) {\n        noEditNode = frame.node.edges[char]\n      } else {\n        noEditNode = new lunr.TokenSet\n        frame.node.edges[char] = noEditNode\n      }\n\n      if (frame.str.length == 1) {\n        noEditNode.final = true\n      }\n\n      stack.push({\n        node: noEditNode,\n        editsRemaining: frame.editsRemaining,\n        str: frame.str.slice(1)\n      })\n    }\n\n    if (frame.editsRemaining == 0) {\n      continue\n    }\n\n    // insertion\n    if (\"*\" in frame.node.edges) {\n      var insertionNode = frame.node.edges[\"*\"]\n    } else {\n      var insertionNode = new lunr.TokenSet\n      frame.node.edges[\"*\"] = insertionNode\n    }\n\n    if (frame.str.length == 0) {\n      insertionNode.final = true\n    }\n\n    stack.push({\n      node: insertionNode,\n      editsRemaining: frame.editsRemaining - 1,\n      str: frame.str\n    })\n\n    // deletion\n    // can only do a deletion if we have enough edits remaining\n    // and if there are characters left to delete in the string\n    if (frame.str.length > 1) {\n      stack.push({\n        node: frame.node,\n        editsRemaining: frame.editsRemaining - 1,\n        str: frame.str.slice(1)\n      })\n    }\n\n    // deletion\n    // just removing the last character from the str\n    if (frame.str.length == 1) {\n      frame.node.final = true\n    }\n\n    // substitution\n    // can only do a substitution if we have enough edits remaining\n    // and if there are characters left to substitute\n    if (frame.str.length >= 1) {\n      if (\"*\" in frame.node.edges) {\n        var substitutionNode = frame.node.edges[\"*\"]\n      } else {\n        var substitutionNode = new lunr.TokenSet\n        frame.node.edges[\"*\"] = substitutionNode\n      }\n\n      if (frame.str.length == 1) {\n        substitutionNode.final = true\n      }\n\n      stack.push({\n        node: substitutionNode,\n        editsRemaining: frame.editsRemaining - 1,\n        str: frame.str.slice(1)\n      })\n    }\n\n    // transposition\n    // can only do a transposition if there are edits remaining\n    // and there are enough characters to transpose\n    if (frame.str.length > 1) {\n      var charA = frame.str.charAt(0),\n          charB = frame.str.charAt(1),\n          transposeNode\n\n      if (charB in frame.node.edges) {\n        transposeNode = frame.node.edges[charB]\n      } else {\n        transposeNode = new lunr.TokenSet\n        frame.node.edges[charB] = transposeNode\n      }\n\n      if (frame.str.length == 1) {\n        transposeNode.final = true\n      }\n\n      stack.push({\n        node: transposeNode,\n        editsRemaining: frame.editsRemaining - 1,\n        str: charA + frame.str.slice(2)\n      })\n    }\n  }\n\n  return root\n}\n\n/**\n * Creates a TokenSet from a string.\n *\n * The string may contain one or more wildcard characters (*)\n * that will allow wildcard matching when intersecting with\n * another TokenSet.\n *\n * @param {string} str - The string to create a TokenSet from.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromString = function (str) {\n  var node = new lunr.TokenSet,\n      root = node\n\n  /*\n   * Iterates through all characters within the passed string\n   * appending a node for each character.\n   *\n   * When a wildcard character is found then a self\n   * referencing edge is introduced to continually match\n   * any number of any characters.\n   */\n  for (var i = 0, len = str.length; i < len; i++) {\n    var char = str[i],\n        final = (i == len - 1)\n\n    if (char == \"*\") {\n      node.edges[char] = node\n      node.final = final\n\n    } else {\n      var next = new lunr.TokenSet\n      next.final = final\n\n      node.edges[char] = next\n      node = next\n    }\n  }\n\n  return root\n}\n\n/**\n * Converts this TokenSet into an array of strings\n * contained within the TokenSet.\n *\n * This is not intended to be used on a TokenSet that\n * contains wildcards, in these cases the results are\n * undefined and are likely to cause an infinite loop.\n *\n * @returns {string[]}\n */\nlunr.TokenSet.prototype.toArray = function () {\n  var words = []\n\n  var stack = [{\n    prefix: \"\",\n    node: this\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop(),\n        edges = Object.keys(frame.node.edges),\n        len = edges.length\n\n    if (frame.node.final) {\n      /* In Safari, at this point the prefix is sometimes corrupted, see:\n       * https://github.com/olivernn/lunr.js/issues/279 Calling any\n       * String.prototype method forces Safari to \"cast\" this string to what\n       * it's supposed to be, fixing the bug. */\n      frame.prefix.charAt(0)\n      words.push(frame.prefix)\n    }\n\n    for (var i = 0; i < len; i++) {\n      var edge = edges[i]\n\n      stack.push({\n        prefix: frame.prefix.concat(edge),\n        node: frame.node.edges[edge]\n      })\n    }\n  }\n\n  return words\n}\n\n/**\n * Generates a string representation of a TokenSet.\n *\n * This is intended to allow TokenSets to be used as keys\n * in objects, largely to aid the construction and minimisation\n * of a TokenSet. As such it is not designed to be a human\n * friendly representation of the TokenSet.\n *\n * @returns {string}\n */\nlunr.TokenSet.prototype.toString = function () {\n  // NOTE: Using Object.keys here as this.edges is very likely\n  // to enter 'hash-mode' with many keys being added\n  //\n  // avoiding a for-in loop here as it leads to the function\n  // being de-optimised (at least in V8). From some simple\n  // benchmarks the performance is comparable, but allowing\n  // V8 to optimize may mean easy performance wins in the future.\n\n  if (this._str) {\n    return this._str\n  }\n\n  var str = this.final ? '1' : '0',\n      labels = Object.keys(this.edges).sort(),\n      len = labels.length\n\n  for (var i = 0; i < len; i++) {\n    var label = labels[i],\n        node = this.edges[label]\n\n    str = str + label + node.id\n  }\n\n  return str\n}\n\n/**\n * Returns a new TokenSet that is the intersection of\n * this TokenSet and the passed TokenSet.\n *\n * This intersection will take into account any wildcards\n * contained within the TokenSet.\n *\n * @param {lunr.TokenSet} b - An other TokenSet to intersect with.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.prototype.intersect = function (b) {\n  var output = new lunr.TokenSet,\n      frame = undefined\n\n  var stack = [{\n    qNode: b,\n    output: output,\n    node: this\n  }]\n\n  while (stack.length) {\n    frame = stack.pop()\n\n    // NOTE: As with the #toString method, we are using\n    // Object.keys and a for loop instead of a for-in loop\n    // as both of these objects enter 'hash' mode, causing\n    // the function to be de-optimised in V8\n    var qEdges = Object.keys(frame.qNode.edges),\n        qLen = qEdges.length,\n        nEdges = Object.keys(frame.node.edges),\n        nLen = nEdges.length\n\n    for (var q = 0; q < qLen; q++) {\n      var qEdge = qEdges[q]\n\n      for (var n = 0; n < nLen; n++) {\n        var nEdge = nEdges[n]\n\n        if (nEdge == qEdge || qEdge == '*') {\n          var node = frame.node.edges[nEdge],\n              qNode = frame.qNode.edges[qEdge],\n              final = node.final && qNode.final,\n              next = undefined\n\n          if (nEdge in frame.output.edges) {\n            // an edge already exists for this character\n            // no need to create a new node, just set the finality\n            // bit unless this node is already final\n            next = frame.output.edges[nEdge]\n            next.final = next.final || final\n\n          } else {\n            // no edge exists yet, must create one\n            // set the finality bit and insert it\n            // into the output\n            next = new lunr.TokenSet\n            next.final = final\n            frame.output.edges[nEdge] = next\n          }\n\n          stack.push({\n            qNode: qNode,\n            output: next,\n            node: node\n          })\n        }\n      }\n    }\n  }\n\n  return output\n}\nlunr.TokenSet.Builder = function () {\n  this.previousWord = \"\"\n  this.root = new lunr.TokenSet\n  this.uncheckedNodes = []\n  this.minimizedNodes = {}\n}\n\nlunr.TokenSet.Builder.prototype.insert = function (word) {\n  var node,\n      commonPrefix = 0\n\n  if (word < this.previousWord) {\n    throw new Error (\"Out of order word insertion\")\n  }\n\n  for (var i = 0; i < word.length && i < this.previousWord.length; i++) {\n    if (word[i] != this.previousWord[i]) break\n    commonPrefix++\n  }\n\n  this.minimize(commonPrefix)\n\n  if (this.uncheckedNodes.length == 0) {\n    node = this.root\n  } else {\n    node = this.uncheckedNodes[this.uncheckedNodes.length - 1].child\n  }\n\n  for (var i = commonPrefix; i < word.length; i++) {\n    var nextNode = new lunr.TokenSet,\n        char = word[i]\n\n    node.edges[char] = nextNode\n\n    this.uncheckedNodes.push({\n      parent: node,\n      char: char,\n      child: nextNode\n    })\n\n    node = nextNode\n  }\n\n  node.final = true\n  this.previousWord = word\n}\n\nlunr.TokenSet.Builder.prototype.finish = function () {\n  this.minimize(0)\n}\n\nlunr.TokenSet.Builder.prototype.minimize = function (downTo) {\n  for (var i = this.uncheckedNodes.length - 1; i >= downTo; i--) {\n    var node = this.uncheckedNodes[i],\n        childKey = node.child.toString()\n\n    if (childKey in this.minimizedNodes) {\n      node.parent.edges[node.char] = this.minimizedNodes[childKey]\n    } else {\n      // Cache the key for this node since\n      // we know it can't change anymore\n      node.child._str = childKey\n\n      this.minimizedNodes[childKey] = node.child\n    }\n\n    this.uncheckedNodes.pop()\n  }\n}\n/*!\n * lunr.Index\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * An index contains the built index of all documents and provides a query interface\n * to the index.\n *\n * Usually instances of lunr.Index will not be created using this constructor, instead\n * lunr.Builder should be used to construct new indexes, or lunr.Index.load should be\n * used to load previously built and serialized indexes.\n *\n * @constructor\n * @param {Object} attrs - The attributes of the built search index.\n * @param {Object} attrs.invertedIndex - An index of term/field to document reference.\n * @param {Object<string, lunr.Vector>} attrs.fieldVectors - Field vectors\n * @param {lunr.TokenSet} attrs.tokenSet - An set of all corpus tokens.\n * @param {string[]} attrs.fields - The names of indexed document fields.\n * @param {lunr.Pipeline} attrs.pipeline - The pipeline to use for search terms.\n */\nlunr.Index = function (attrs) {\n  this.invertedIndex = attrs.invertedIndex\n  this.fieldVectors = attrs.fieldVectors\n  this.tokenSet = attrs.tokenSet\n  this.fields = attrs.fields\n  this.pipeline = attrs.pipeline\n}\n\n/**\n * A result contains details of a document matching a search query.\n * @typedef {Object} lunr.Index~Result\n * @property {string} ref - The reference of the document this result represents.\n * @property {number} score - A number between 0 and 1 representing how similar this document is to the query.\n * @property {lunr.MatchData} matchData - Contains metadata about this match including which term(s) caused the match.\n */\n\n/**\n * Although lunr provides the ability to create queries using lunr.Query, it also provides a simple\n * query language which itself is parsed into an instance of lunr.Query.\n *\n * For programmatically building queries it is advised to directly use lunr.Query, the query language\n * is best used for human entered text rather than program generated text.\n *\n * At its simplest queries can just be a single term, e.g. `hello`, multiple terms are also supported\n * and will be combined with OR, e.g `hello world` will match documents that contain either 'hello'\n * or 'world', though those that contain both will rank higher in the results.\n *\n * Wildcards can be included in terms to match one or more unspecified characters, these wildcards can\n * be inserted anywhere within the term, and more than one wildcard can exist in a single term. Adding\n * wildcards will increase the number of documents that will be found but can also have a negative\n * impact on query performance, especially with wildcards at the beginning of a term.\n *\n * Terms can be restricted to specific fields, e.g. `title:hello`, only documents with the term\n * hello in the title field will match this query. Using a field not present in the index will lead\n * to an error being thrown.\n *\n * Modifiers can also be added to terms, lunr supports edit distance and boost modifiers on terms. A term\n * boost will make documents matching that term score higher, e.g. `foo^5`. Edit distance is also supported\n * to provide fuzzy matching, e.g. 'hello~2' will match documents with hello with an edit distance of 2.\n * Avoid large values for edit distance to improve query performance.\n *\n * Each term also supports a presence modifier. By default a term's presence in document is optional, however\n * this can be changed to either required or prohibited. For a term's presence to be required in a document the\n * term should be prefixed with a '+', e.g. `+foo bar` is a search for documents that must contain 'foo' and\n * optionally contain 'bar'. Conversely a leading '-' sets the terms presence to prohibited, i.e. it must not\n * appear in a document, e.g. `-foo bar` is a search for documents that do not contain 'foo' but may contain 'bar'.\n *\n * To escape special characters the backslash character '\\' can be used, this allows searches to include\n * characters that would normally be considered modifiers, e.g. `foo\\~2` will search for a term \"foo~2\" instead\n * of attempting to apply a boost of 2 to the search term \"foo\".\n *\n * @typedef {string} lunr.Index~QueryString\n * @example <caption>Simple single term query</caption>\n * hello\n * @example <caption>Multiple term query</caption>\n * hello world\n * @example <caption>term scoped to a field</caption>\n * title:hello\n * @example <caption>term with a boost of 10</caption>\n * hello^10\n * @example <caption>term with an edit distance of 2</caption>\n * hello~2\n * @example <caption>terms with presence modifiers</caption>\n * -foo +bar baz\n */\n\n/**\n * Performs a search against the index using lunr query syntax.\n *\n * Results will be returned sorted by their score, the most relevant results\n * will be returned first.  For details on how the score is calculated, please see\n * the {@link https://lunrjs.com/guides/searching.html#scoring|guide}.\n *\n * For more programmatic querying use lunr.Index#query.\n *\n * @param {lunr.Index~QueryString} queryString - A string containing a lunr query.\n * @throws {lunr.QueryParseError} If the passed query string cannot be parsed.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.search = function (queryString) {\n  return this.query(function (query) {\n    var parser = new lunr.QueryParser(queryString, query)\n    parser.parse()\n  })\n}\n\n/**\n * A query builder callback provides a query object to be used to express\n * the query to perform on the index.\n *\n * @callback lunr.Index~queryBuilder\n * @param {lunr.Query} query - The query object to build up.\n * @this lunr.Query\n */\n\n/**\n * Performs a query against the index using the yielded lunr.Query object.\n *\n * If performing programmatic queries against the index, this method is preferred\n * over lunr.Index#search so as to avoid the additional query parsing overhead.\n *\n * A query object is yielded to the supplied function which should be used to\n * express the query to be run against the index.\n *\n * Note that although this function takes a callback parameter it is _not_ an\n * asynchronous operation, the callback is just yielded a query object to be\n * customized.\n *\n * @param {lunr.Index~queryBuilder} fn - A function that is used to build the query.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.query = function (fn) {\n  // for each query clause\n  // * process terms\n  // * expand terms from token set\n  // * find matching documents and metadata\n  // * get document vectors\n  // * score documents\n\n  var query = new lunr.Query(this.fields),\n      matchingFields = Object.create(null),\n      queryVectors = Object.create(null),\n      termFieldCache = Object.create(null),\n      requiredMatches = Object.create(null),\n      prohibitedMatches = Object.create(null)\n\n  /*\n   * To support field level boosts a query vector is created per\n   * field. An empty vector is eagerly created to support negated\n   * queries.\n   */\n  for (var i = 0; i < this.fields.length; i++) {\n    queryVectors[this.fields[i]] = new lunr.Vector\n  }\n\n  fn.call(query, query)\n\n  for (var i = 0; i < query.clauses.length; i++) {\n    /*\n     * Unless the pipeline has been disabled for this term, which is\n     * the case for terms with wildcards, we need to pass the clause\n     * term through the search pipeline. A pipeline returns an array\n     * of processed terms. Pipeline functions may expand the passed\n     * term, which means we may end up performing multiple index lookups\n     * for a single query term.\n     */\n    var clause = query.clauses[i],\n        terms = null,\n        clauseMatches = lunr.Set.empty\n\n    if (clause.usePipeline) {\n      terms = this.pipeline.runString(clause.term, {\n        fields: clause.fields\n      })\n    } else {\n      terms = [clause.term]\n    }\n\n    for (var m = 0; m < terms.length; m++) {\n      var term = terms[m]\n\n      /*\n       * Each term returned from the pipeline needs to use the same query\n       * clause object, e.g. the same boost and or edit distance. The\n       * simplest way to do this is to re-use the clause object but mutate\n       * its term property.\n       */\n      clause.term = term\n\n      /*\n       * From the term in the clause we create a token set which will then\n       * be used to intersect the indexes token set to get a list of terms\n       * to lookup in the inverted index\n       */\n      var termTokenSet = lunr.TokenSet.fromClause(clause),\n          expandedTerms = this.tokenSet.intersect(termTokenSet).toArray()\n\n      /*\n       * If a term marked as required does not exist in the tokenSet it is\n       * impossible for the search to return any matches. We set all the field\n       * scoped required matches set to empty and stop examining any further\n       * clauses.\n       */\n      if (expandedTerms.length === 0 && clause.presence === lunr.Query.presence.REQUIRED) {\n        for (var k = 0; k < clause.fields.length; k++) {\n          var field = clause.fields[k]\n          requiredMatches[field] = lunr.Set.empty\n        }\n\n        break\n      }\n\n      for (var j = 0; j < expandedTerms.length; j++) {\n        /*\n         * For each term get the posting and termIndex, this is required for\n         * building the query vector.\n         */\n        var expandedTerm = expandedTerms[j],\n            posting = this.invertedIndex[expandedTerm],\n            termIndex = posting._index\n\n        for (var k = 0; k < clause.fields.length; k++) {\n          /*\n           * For each field that this query term is scoped by (by default\n           * all fields are in scope) we need to get all the document refs\n           * that have this term in that field.\n           *\n           * The posting is the entry in the invertedIndex for the matching\n           * term from above.\n           */\n          var field = clause.fields[k],\n              fieldPosting = posting[field],\n              matchingDocumentRefs = Object.keys(fieldPosting),\n              termField = expandedTerm + \"/\" + field,\n              matchingDocumentsSet = new lunr.Set(matchingDocumentRefs)\n\n          /*\n           * if the presence of this term is required ensure that the matching\n           * documents are added to the set of required matches for this clause.\n           *\n           */\n          if (clause.presence == lunr.Query.presence.REQUIRED) {\n            clauseMatches = clauseMatches.union(matchingDocumentsSet)\n\n            if (requiredMatches[field] === undefined) {\n              requiredMatches[field] = lunr.Set.complete\n            }\n          }\n\n          /*\n           * if the presence of this term is prohibited ensure that the matching\n           * documents are added to the set of prohibited matches for this field,\n           * creating that set if it does not yet exist.\n           */\n          if (clause.presence == lunr.Query.presence.PROHIBITED) {\n            if (prohibitedMatches[field] === undefined) {\n              prohibitedMatches[field] = lunr.Set.empty\n            }\n\n            prohibitedMatches[field] = prohibitedMatches[field].union(matchingDocumentsSet)\n\n            /*\n             * Prohibited matches should not be part of the query vector used for\n             * similarity scoring and no metadata should be extracted so we continue\n             * to the next field\n             */\n            continue\n          }\n\n          /*\n           * The query field vector is populated using the termIndex found for\n           * the term and a unit value with the appropriate boost applied.\n           * Using upsert because there could already be an entry in the vector\n           * for the term we are working with. In that case we just add the scores\n           * together.\n           */\n          queryVectors[field].upsert(termIndex, clause.boost, function (a, b) { return a + b })\n\n          /**\n           * If we've already seen this term, field combo then we've already collected\n           * the matching documents and metadata, no need to go through all that again\n           */\n          if (termFieldCache[termField]) {\n            continue\n          }\n\n          for (var l = 0; l < matchingDocumentRefs.length; l++) {\n            /*\n             * All metadata for this term/field/document triple\n             * are then extracted and collected into an instance\n             * of lunr.MatchData ready to be returned in the query\n             * results\n             */\n            var matchingDocumentRef = matchingDocumentRefs[l],\n                matchingFieldRef = new lunr.FieldRef (matchingDocumentRef, field),\n                metadata = fieldPosting[matchingDocumentRef],\n                fieldMatch\n\n            if ((fieldMatch = matchingFields[matchingFieldRef]) === undefined) {\n              matchingFields[matchingFieldRef] = new lunr.MatchData (expandedTerm, field, metadata)\n            } else {\n              fieldMatch.add(expandedTerm, field, metadata)\n            }\n\n          }\n\n          termFieldCache[termField] = true\n        }\n      }\n    }\n\n    /**\n     * If the presence was required we need to update the requiredMatches field sets.\n     * We do this after all fields for the term have collected their matches because\n     * the clause terms presence is required in _any_ of the fields not _all_ of the\n     * fields.\n     */\n    if (clause.presence === lunr.Query.presence.REQUIRED) {\n      for (var k = 0; k < clause.fields.length; k++) {\n        var field = clause.fields[k]\n        requiredMatches[field] = requiredMatches[field].intersect(clauseMatches)\n      }\n    }\n  }\n\n  /**\n   * Need to combine the field scoped required and prohibited\n   * matching documents into a global set of required and prohibited\n   * matches\n   */\n  var allRequiredMatches = lunr.Set.complete,\n      allProhibitedMatches = lunr.Set.empty\n\n  for (var i = 0; i < this.fields.length; i++) {\n    var field = this.fields[i]\n\n    if (requiredMatches[field]) {\n      allRequiredMatches = allRequiredMatches.intersect(requiredMatches[field])\n    }\n\n    if (prohibitedMatches[field]) {\n      allProhibitedMatches = allProhibitedMatches.union(prohibitedMatches[field])\n    }\n  }\n\n  var matchingFieldRefs = Object.keys(matchingFields),\n      results = [],\n      matches = Object.create(null)\n\n  /*\n   * If the query is negated (contains only prohibited terms)\n   * we need to get _all_ fieldRefs currently existing in the\n   * index. This is only done when we know that the query is\n   * entirely prohibited terms to avoid any cost of getting all\n   * fieldRefs unnecessarily.\n   *\n   * Additionally, blank MatchData must be created to correctly\n   * populate the results.\n   */\n  if (query.isNegated()) {\n    matchingFieldRefs = Object.keys(this.fieldVectors)\n\n    for (var i = 0; i < matchingFieldRefs.length; i++) {\n      var matchingFieldRef = matchingFieldRefs[i]\n      var fieldRef = lunr.FieldRef.fromString(matchingFieldRef)\n      matchingFields[matchingFieldRef] = new lunr.MatchData\n    }\n  }\n\n  for (var i = 0; i < matchingFieldRefs.length; i++) {\n    /*\n     * Currently we have document fields that match the query, but we\n     * need to return documents. The matchData and scores are combined\n     * from multiple fields belonging to the same document.\n     *\n     * Scores are calculated by field, using the query vectors created\n     * above, and combined into a final document score using addition.\n     */\n    var fieldRef = lunr.FieldRef.fromString(matchingFieldRefs[i]),\n        docRef = fieldRef.docRef\n\n    if (!allRequiredMatches.contains(docRef)) {\n      continue\n    }\n\n    if (allProhibitedMatches.contains(docRef)) {\n      continue\n    }\n\n    var fieldVector = this.fieldVectors[fieldRef],\n        score = queryVectors[fieldRef.fieldName].similarity(fieldVector),\n        docMatch\n\n    if ((docMatch = matches[docRef]) !== undefined) {\n      docMatch.score += score\n      docMatch.matchData.combine(matchingFields[fieldRef])\n    } else {\n      var match = {\n        ref: docRef,\n        score: score,\n        matchData: matchingFields[fieldRef]\n      }\n      matches[docRef] = match\n      results.push(match)\n    }\n  }\n\n  /*\n   * Sort the results objects by score, highest first.\n   */\n  return results.sort(function (a, b) {\n    return b.score - a.score\n  })\n}\n\n/**\n * Prepares the index for JSON serialization.\n *\n * The schema for this JSON blob will be described in a\n * separate JSON schema file.\n *\n * @returns {Object}\n */\nlunr.Index.prototype.toJSON = function () {\n  var invertedIndex = Object.keys(this.invertedIndex)\n    .sort()\n    .map(function (term) {\n      return [term, this.invertedIndex[term]]\n    }, this)\n\n  var fieldVectors = Object.keys(this.fieldVectors)\n    .map(function (ref) {\n      return [ref, this.fieldVectors[ref].toJSON()]\n    }, this)\n\n  return {\n    version: lunr.version,\n    fields: this.fields,\n    fieldVectors: fieldVectors,\n    invertedIndex: invertedIndex,\n    pipeline: this.pipeline.toJSON()\n  }\n}\n\n/**\n * Loads a previously serialized lunr.Index\n *\n * @param {Object} serializedIndex - A previously serialized lunr.Index\n * @returns {lunr.Index}\n */\nlunr.Index.load = function (serializedIndex) {\n  var attrs = {},\n      fieldVectors = {},\n      serializedVectors = serializedIndex.fieldVectors,\n      invertedIndex = Object.create(null),\n      serializedInvertedIndex = serializedIndex.invertedIndex,\n      tokenSetBuilder = new lunr.TokenSet.Builder,\n      pipeline = lunr.Pipeline.load(serializedIndex.pipeline)\n\n  if (serializedIndex.version != lunr.version) {\n    lunr.utils.warn(\"Version mismatch when loading serialised index. Current version of lunr '\" + lunr.version + \"' does not match serialized index '\" + serializedIndex.version + \"'\")\n  }\n\n  for (var i = 0; i < serializedVectors.length; i++) {\n    var tuple = serializedVectors[i],\n        ref = tuple[0],\n        elements = tuple[1]\n\n    fieldVectors[ref] = new lunr.Vector(elements)\n  }\n\n  for (var i = 0; i < serializedInvertedIndex.length; i++) {\n    var tuple = serializedInvertedIndex[i],\n        term = tuple[0],\n        posting = tuple[1]\n\n    tokenSetBuilder.insert(term)\n    invertedIndex[term] = posting\n  }\n\n  tokenSetBuilder.finish()\n\n  attrs.fields = serializedIndex.fields\n\n  attrs.fieldVectors = fieldVectors\n  attrs.invertedIndex = invertedIndex\n  attrs.tokenSet = tokenSetBuilder.root\n  attrs.pipeline = pipeline\n\n  return new lunr.Index(attrs)\n}\n/*!\n * lunr.Builder\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * lunr.Builder performs indexing on a set of documents and\n * returns instances of lunr.Index ready for querying.\n *\n * All configuration of the index is done via the builder, the\n * fields to index, the document reference, the text processing\n * pipeline and document scoring parameters are all set on the\n * builder before indexing.\n *\n * @constructor\n * @property {string} _ref - Internal reference to the document reference field.\n * @property {string[]} _fields - Internal reference to the document fields to index.\n * @property {object} invertedIndex - The inverted index maps terms to document fields.\n * @property {object} documentTermFrequencies - Keeps track of document term frequencies.\n * @property {object} documentLengths - Keeps track of the length of documents added to the index.\n * @property {lunr.tokenizer} tokenizer - Function for splitting strings into tokens for indexing.\n * @property {lunr.Pipeline} pipeline - The pipeline performs text processing on tokens before indexing.\n * @property {lunr.Pipeline} searchPipeline - A pipeline for processing search terms before querying the index.\n * @property {number} documentCount - Keeps track of the total number of documents indexed.\n * @property {number} _b - A parameter to control field length normalization, setting this to 0 disabled normalization, 1 fully normalizes field lengths, the default value is 0.75.\n * @property {number} _k1 - A parameter to control how quickly an increase in term frequency results in term frequency saturation, the default value is 1.2.\n * @property {number} termIndex - A counter incremented for each unique term, used to identify a terms position in the vector space.\n * @property {array} metadataWhitelist - A list of metadata keys that have been whitelisted for entry in the index.\n */\nlunr.Builder = function () {\n  this._ref = \"id\"\n  this._fields = Object.create(null)\n  this._documents = Object.create(null)\n  this.invertedIndex = Object.create(null)\n  this.fieldTermFrequencies = {}\n  this.fieldLengths = {}\n  this.tokenizer = lunr.tokenizer\n  this.pipeline = new lunr.Pipeline\n  this.searchPipeline = new lunr.Pipeline\n  this.documentCount = 0\n  this._b = 0.75\n  this._k1 = 1.2\n  this.termIndex = 0\n  this.metadataWhitelist = []\n}\n\n/**\n * Sets the document field used as the document reference. Every document must have this field.\n * The type of this field in the document should be a string, if it is not a string it will be\n * coerced into a string by calling toString.\n *\n * The default ref is 'id'.\n *\n * The ref should _not_ be changed during indexing, it should be set before any documents are\n * added to the index. Changing it during indexing can lead to inconsistent results.\n *\n * @param {string} ref - The name of the reference field in the document.\n */\nlunr.Builder.prototype.ref = function (ref) {\n  this._ref = ref\n}\n\n/**\n * A function that is used to extract a field from a document.\n *\n * Lunr expects a field to be at the top level of a document, if however the field\n * is deeply nested within a document an extractor function can be used to extract\n * the right field for indexing.\n *\n * @callback fieldExtractor\n * @param {object} doc - The document being added to the index.\n * @returns {?(string|object|object[])} obj - The object that will be indexed for this field.\n * @example <caption>Extracting a nested field</caption>\n * function (doc) { return doc.nested.field }\n */\n\n/**\n * Adds a field to the list of document fields that will be indexed. Every document being\n * indexed should have this field. Null values for this field in indexed documents will\n * not cause errors but will limit the chance of that document being retrieved by searches.\n *\n * All fields should be added before adding documents to the index. Adding fields after\n * a document has been indexed will have no effect on already indexed documents.\n *\n * Fields can be boosted at build time. This allows terms within that field to have more\n * importance when ranking search results. Use a field boost to specify that matches within\n * one field are more important than other fields.\n *\n * @param {string} fieldName - The name of a field to index in all documents.\n * @param {object} attributes - Optional attributes associated with this field.\n * @param {number} [attributes.boost=1] - Boost applied to all terms within this field.\n * @param {fieldExtractor} [attributes.extractor] - Function to extract a field from a document.\n * @throws {RangeError} fieldName cannot contain unsupported characters '/'\n */\nlunr.Builder.prototype.field = function (fieldName, attributes) {\n  if (/\\//.test(fieldName)) {\n    throw new RangeError (\"Field '\" + fieldName + \"' contains illegal character '/'\")\n  }\n\n  this._fields[fieldName] = attributes || {}\n}\n\n/**\n * A parameter to tune the amount of field length normalisation that is applied when\n * calculating relevance scores. A value of 0 will completely disable any normalisation\n * and a value of 1 will fully normalise field lengths. The default is 0.75. Values of b\n * will be clamped to the range 0 - 1.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.b = function (number) {\n  if (number < 0) {\n    this._b = 0\n  } else if (number > 1) {\n    this._b = 1\n  } else {\n    this._b = number\n  }\n}\n\n/**\n * A parameter that controls the speed at which a rise in term frequency results in term\n * frequency saturation. The default value is 1.2. Setting this to a higher value will give\n * slower saturation levels, a lower value will result in quicker saturation.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.k1 = function (number) {\n  this._k1 = number\n}\n\n/**\n * Adds a document to the index.\n *\n * Before adding fields to the index the index should have been fully setup, with the document\n * ref and all fields to index already having been specified.\n *\n * The document must have a field name as specified by the ref (by default this is 'id') and\n * it should have all fields defined for indexing, though null or undefined values will not\n * cause errors.\n *\n * Entire documents can be boosted at build time. Applying a boost to a document indicates that\n * this document should rank higher in search results than other documents.\n *\n * @param {object} doc - The document to add to the index.\n * @param {object} attributes - Optional attributes associated with this document.\n * @param {number} [attributes.boost=1] - Boost applied to all terms within this document.\n */\nlunr.Builder.prototype.add = function (doc, attributes) {\n  var docRef = doc[this._ref],\n      fields = Object.keys(this._fields)\n\n  this._documents[docRef] = attributes || {}\n  this.documentCount += 1\n\n  for (var i = 0; i < fields.length; i++) {\n    var fieldName = fields[i],\n        extractor = this._fields[fieldName].extractor,\n        field = extractor ? extractor(doc) : doc[fieldName],\n        tokens = this.tokenizer(field, {\n          fields: [fieldName]\n        }),\n        terms = this.pipeline.run(tokens),\n        fieldRef = new lunr.FieldRef (docRef, fieldName),\n        fieldTerms = Object.create(null)\n\n    this.fieldTermFrequencies[fieldRef] = fieldTerms\n    this.fieldLengths[fieldRef] = 0\n\n    // store the length of this field for this document\n    this.fieldLengths[fieldRef] += terms.length\n\n    // calculate term frequencies for this field\n    for (var j = 0; j < terms.length; j++) {\n      var term = terms[j]\n\n      if (fieldTerms[term] == undefined) {\n        fieldTerms[term] = 0\n      }\n\n      fieldTerms[term] += 1\n\n      // add to inverted index\n      // create an initial posting if one doesn't exist\n      if (this.invertedIndex[term] == undefined) {\n        var posting = Object.create(null)\n        posting[\"_index\"] = this.termIndex\n        this.termIndex += 1\n\n        for (var k = 0; k < fields.length; k++) {\n          posting[fields[k]] = Object.create(null)\n        }\n\n        this.invertedIndex[term] = posting\n      }\n\n      // add an entry for this term/fieldName/docRef to the invertedIndex\n      if (this.invertedIndex[term][fieldName][docRef] == undefined) {\n        this.invertedIndex[term][fieldName][docRef] = Object.create(null)\n      }\n\n      // store all whitelisted metadata about this token in the\n      // inverted index\n      for (var l = 0; l < this.metadataWhitelist.length; l++) {\n        var metadataKey = this.metadataWhitelist[l],\n            metadata = term.metadata[metadataKey]\n\n        if (this.invertedIndex[term][fieldName][docRef][metadataKey] == undefined) {\n          this.invertedIndex[term][fieldName][docRef][metadataKey] = []\n        }\n\n        this.invertedIndex[term][fieldName][docRef][metadataKey].push(metadata)\n      }\n    }\n\n  }\n}\n\n/**\n * Calculates the average document length for this index\n *\n * @private\n */\nlunr.Builder.prototype.calculateAverageFieldLengths = function () {\n\n  var fieldRefs = Object.keys(this.fieldLengths),\n      numberOfFields = fieldRefs.length,\n      accumulator = {},\n      documentsWithField = {}\n\n  for (var i = 0; i < numberOfFields; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        field = fieldRef.fieldName\n\n    documentsWithField[field] || (documentsWithField[field] = 0)\n    documentsWithField[field] += 1\n\n    accumulator[field] || (accumulator[field] = 0)\n    accumulator[field] += this.fieldLengths[fieldRef]\n  }\n\n  var fields = Object.keys(this._fields)\n\n  for (var i = 0; i < fields.length; i++) {\n    var fieldName = fields[i]\n    accumulator[fieldName] = accumulator[fieldName] / documentsWithField[fieldName]\n  }\n\n  this.averageFieldLength = accumulator\n}\n\n/**\n * Builds a vector space model of every document using lunr.Vector\n *\n * @private\n */\nlunr.Builder.prototype.createFieldVectors = function () {\n  var fieldVectors = {},\n      fieldRefs = Object.keys(this.fieldTermFrequencies),\n      fieldRefsLength = fieldRefs.length,\n      termIdfCache = Object.create(null)\n\n  for (var i = 0; i < fieldRefsLength; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        fieldName = fieldRef.fieldName,\n        fieldLength = this.fieldLengths[fieldRef],\n        fieldVector = new lunr.Vector,\n        termFrequencies = this.fieldTermFrequencies[fieldRef],\n        terms = Object.keys(termFrequencies),\n        termsLength = terms.length\n\n\n    var fieldBoost = this._fields[fieldName].boost || 1,\n        docBoost = this._documents[fieldRef.docRef].boost || 1\n\n    for (var j = 0; j < termsLength; j++) {\n      var term = terms[j],\n          tf = termFrequencies[term],\n          termIndex = this.invertedIndex[term]._index,\n          idf, score, scoreWithPrecision\n\n      if (termIdfCache[term] === undefined) {\n        idf = lunr.idf(this.invertedIndex[term], this.documentCount)\n        termIdfCache[term] = idf\n      } else {\n        idf = termIdfCache[term]\n      }\n\n      score = idf * ((this._k1 + 1) * tf) / (this._k1 * (1 - this._b + this._b * (fieldLength / this.averageFieldLength[fieldName])) + tf)\n      score *= fieldBoost\n      score *= docBoost\n      scoreWithPrecision = Math.round(score * 1000) / 1000\n      // Converts 1.23456789 to 1.234.\n      // Reducing the precision so that the vectors take up less\n      // space when serialised. Doing it now so that they behave\n      // the same before and after serialisation. Also, this is\n      // the fastest approach to reducing a number's precision in\n      // JavaScript.\n\n      fieldVector.insert(termIndex, scoreWithPrecision)\n    }\n\n    fieldVectors[fieldRef] = fieldVector\n  }\n\n  this.fieldVectors = fieldVectors\n}\n\n/**\n * Creates a token set of all tokens in the index using lunr.TokenSet\n *\n * @private\n */\nlunr.Builder.prototype.createTokenSet = function () {\n  this.tokenSet = lunr.TokenSet.fromArray(\n    Object.keys(this.invertedIndex).sort()\n  )\n}\n\n/**\n * Builds the index, creating an instance of lunr.Index.\n *\n * This completes the indexing process and should only be called\n * once all documents have been added to the index.\n *\n * @returns {lunr.Index}\n */\nlunr.Builder.prototype.build = function () {\n  this.calculateAverageFieldLengths()\n  this.createFieldVectors()\n  this.createTokenSet()\n\n  return new lunr.Index({\n    invertedIndex: this.invertedIndex,\n    fieldVectors: this.fieldVectors,\n    tokenSet: this.tokenSet,\n    fields: Object.keys(this._fields),\n    pipeline: this.searchPipeline\n  })\n}\n\n/**\n * Applies a plugin to the index builder.\n *\n * A plugin is a function that is called with the index builder as its context.\n * Plugins can be used to customise or extend the behaviour of the index\n * in some way. A plugin is just a function, that encapsulated the custom\n * behaviour that should be applied when building the index.\n *\n * The plugin function will be called with the index builder as its argument, additional\n * arguments can also be passed when calling use. The function will be called\n * with the index builder as its context.\n *\n * @param {Function} plugin The plugin to apply.\n */\nlunr.Builder.prototype.use = function (fn) {\n  var args = Array.prototype.slice.call(arguments, 1)\n  args.unshift(this)\n  fn.apply(this, args)\n}\n/**\n * Contains and collects metadata about a matching document.\n * A single instance of lunr.MatchData is returned as part of every\n * lunr.Index~Result.\n *\n * @constructor\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n * @property {object} metadata - A cloned collection of metadata associated with this document.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData = function (term, field, metadata) {\n  var clonedMetadata = Object.create(null),\n      metadataKeys = Object.keys(metadata || {})\n\n  // Cloning the metadata to prevent the original\n  // being mutated during match data combination.\n  // Metadata is kept in an array within the inverted\n  // index so cloning the data can be done with\n  // Array#slice\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n    clonedMetadata[key] = metadata[key].slice()\n  }\n\n  this.metadata = Object.create(null)\n\n  if (term !== undefined) {\n    this.metadata[term] = Object.create(null)\n    this.metadata[term][field] = clonedMetadata\n  }\n}\n\n/**\n * An instance of lunr.MatchData will be created for every term that matches a\n * document. However only one instance is required in a lunr.Index~Result. This\n * method combines metadata from another instance of lunr.MatchData with this\n * objects metadata.\n *\n * @param {lunr.MatchData} otherMatchData - Another instance of match data to merge with this one.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData.prototype.combine = function (otherMatchData) {\n  var terms = Object.keys(otherMatchData.metadata)\n\n  for (var i = 0; i < terms.length; i++) {\n    var term = terms[i],\n        fields = Object.keys(otherMatchData.metadata[term])\n\n    if (this.metadata[term] == undefined) {\n      this.metadata[term] = Object.create(null)\n    }\n\n    for (var j = 0; j < fields.length; j++) {\n      var field = fields[j],\n          keys = Object.keys(otherMatchData.metadata[term][field])\n\n      if (this.metadata[term][field] == undefined) {\n        this.metadata[term][field] = Object.create(null)\n      }\n\n      for (var k = 0; k < keys.length; k++) {\n        var key = keys[k]\n\n        if (this.metadata[term][field][key] == undefined) {\n          this.metadata[term][field][key] = otherMatchData.metadata[term][field][key]\n        } else {\n          this.metadata[term][field][key] = this.metadata[term][field][key].concat(otherMatchData.metadata[term][field][key])\n        }\n\n      }\n    }\n  }\n}\n\n/**\n * Add metadata for a term/field pair to this instance of match data.\n *\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n */\nlunr.MatchData.prototype.add = function (term, field, metadata) {\n  if (!(term in this.metadata)) {\n    this.metadata[term] = Object.create(null)\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  if (!(field in this.metadata[term])) {\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  var metadataKeys = Object.keys(metadata)\n\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n\n    if (key in this.metadata[term][field]) {\n      this.metadata[term][field][key] = this.metadata[term][field][key].concat(metadata[key])\n    } else {\n      this.metadata[term][field][key] = metadata[key]\n    }\n  }\n}\n/**\n * A lunr.Query provides a programmatic way of defining queries to be performed\n * against a {@link lunr.Index}.\n *\n * Prefer constructing a lunr.Query using the {@link lunr.Index#query} method\n * so the query object is pre-initialized with the right index fields.\n *\n * @constructor\n * @property {lunr.Query~Clause[]} clauses - An array of query clauses.\n * @property {string[]} allFields - An array of all available fields in a lunr.Index.\n */\nlunr.Query = function (allFields) {\n  this.clauses = []\n  this.allFields = allFields\n}\n\n/**\n * Constants for indicating what kind of automatic wildcard insertion will be used when constructing a query clause.\n *\n * This allows wildcards to be added to the beginning and end of a term without having to manually do any string\n * concatenation.\n *\n * The wildcard constants can be bitwise combined to select both leading and trailing wildcards.\n *\n * @constant\n * @default\n * @property {number} wildcard.NONE - The term will have no wildcards inserted, this is the default behaviour\n * @property {number} wildcard.LEADING - Prepend the term with a wildcard, unless a leading wildcard already exists\n * @property {number} wildcard.TRAILING - Append a wildcard to the term, unless a trailing wildcard already exists\n * @see lunr.Query~Clause\n * @see lunr.Query#clause\n * @see lunr.Query#term\n * @example <caption>query term with trailing wildcard</caption>\n * query.term('foo', { wildcard: lunr.Query.wildcard.TRAILING })\n * @example <caption>query term with leading and trailing wildcard</caption>\n * query.term('foo', {\n *   wildcard: lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING\n * })\n */\n\nlunr.Query.wildcard = new String (\"*\")\nlunr.Query.wildcard.NONE = 0\nlunr.Query.wildcard.LEADING = 1\nlunr.Query.wildcard.TRAILING = 2\n\n/**\n * Constants for indicating what kind of presence a term must have in matching documents.\n *\n * @constant\n * @enum {number}\n * @see lunr.Query~Clause\n * @see lunr.Query#clause\n * @see lunr.Query#term\n * @example <caption>query term with required presence</caption>\n * query.term('foo', { presence: lunr.Query.presence.REQUIRED })\n */\nlunr.Query.presence = {\n  /**\n   * Term's presence in a document is optional, this is the default value.\n   */\n  OPTIONAL: 1,\n\n  /**\n   * Term's presence in a document is required, documents that do not contain\n   * this term will not be returned.\n   */\n  REQUIRED: 2,\n\n  /**\n   * Term's presence in a document is prohibited, documents that do contain\n   * this term will not be returned.\n   */\n  PROHIBITED: 3\n}\n\n/**\n * A single clause in a {@link lunr.Query} contains a term and details on how to\n * match that term against a {@link lunr.Index}.\n *\n * @typedef {Object} lunr.Query~Clause\n * @property {string[]} fields - The fields in an index this clause should be matched against.\n * @property {number} [boost=1] - Any boost that should be applied when matching this clause.\n * @property {number} [editDistance] - Whether the term should have fuzzy matching applied, and how fuzzy the match should be.\n * @property {boolean} [usePipeline] - Whether the term should be passed through the search pipeline.\n * @property {number} [wildcard=lunr.Query.wildcard.NONE] - Whether the term should have wildcards appended or prepended.\n * @property {number} [presence=lunr.Query.presence.OPTIONAL] - The terms presence in any matching documents.\n */\n\n/**\n * Adds a {@link lunr.Query~Clause} to this query.\n *\n * Unless the clause contains the fields to be matched all fields will be matched. In addition\n * a default boost of 1 is applied to the clause.\n *\n * @param {lunr.Query~Clause} clause - The clause to add to this query.\n * @see lunr.Query~Clause\n * @returns {lunr.Query}\n */\nlunr.Query.prototype.clause = function (clause) {\n  if (!('fields' in clause)) {\n    clause.fields = this.allFields\n  }\n\n  if (!('boost' in clause)) {\n    clause.boost = 1\n  }\n\n  if (!('usePipeline' in clause)) {\n    clause.usePipeline = true\n  }\n\n  if (!('wildcard' in clause)) {\n    clause.wildcard = lunr.Query.wildcard.NONE\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.LEADING) && (clause.term.charAt(0) != lunr.Query.wildcard)) {\n    clause.term = \"*\" + clause.term\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.TRAILING) && (clause.term.slice(-1) != lunr.Query.wildcard)) {\n    clause.term = \"\" + clause.term + \"*\"\n  }\n\n  if (!('presence' in clause)) {\n    clause.presence = lunr.Query.presence.OPTIONAL\n  }\n\n  this.clauses.push(clause)\n\n  return this\n}\n\n/**\n * A negated query is one in which every clause has a presence of\n * prohibited. These queries require some special processing to return\n * the expected results.\n *\n * @returns boolean\n */\nlunr.Query.prototype.isNegated = function () {\n  for (var i = 0; i < this.clauses.length; i++) {\n    if (this.clauses[i].presence != lunr.Query.presence.PROHIBITED) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * Adds a term to the current query, under the covers this will create a {@link lunr.Query~Clause}\n * to the list of clauses that make up this query.\n *\n * The term is used as is, i.e. no tokenization will be performed by this method. Instead conversion\n * to a token or token-like string should be done before calling this method.\n *\n * The term will be converted to a string by calling `toString`. Multiple terms can be passed as an\n * array, each term in the array will share the same options.\n *\n * @param {object|object[]} term - The term(s) to add to the query.\n * @param {object} [options] - Any additional properties to add to the query clause.\n * @returns {lunr.Query}\n * @see lunr.Query#clause\n * @see lunr.Query~Clause\n * @example <caption>adding a single term to a query</caption>\n * query.term(\"foo\")\n * @example <caption>adding a single term to a query and specifying search fields, term boost and automatic trailing wildcard</caption>\n * query.term(\"foo\", {\n *   fields: [\"title\"],\n *   boost: 10,\n *   wildcard: lunr.Query.wildcard.TRAILING\n * })\n * @example <caption>using lunr.tokenizer to convert a string to tokens before using them as terms</caption>\n * query.term(lunr.tokenizer(\"foo bar\"))\n */\nlunr.Query.prototype.term = function (term, options) {\n  if (Array.isArray(term)) {\n    term.forEach(function (t) { this.term(t, lunr.utils.clone(options)) }, this)\n    return this\n  }\n\n  var clause = options || {}\n  clause.term = term.toString()\n\n  this.clause(clause)\n\n  return this\n}\nlunr.QueryParseError = function (message, start, end) {\n  this.name = \"QueryParseError\"\n  this.message = message\n  this.start = start\n  this.end = end\n}\n\nlunr.QueryParseError.prototype = new Error\nlunr.QueryLexer = function (str) {\n  this.lexemes = []\n  this.str = str\n  this.length = str.length\n  this.pos = 0\n  this.start = 0\n  this.escapeCharPositions = []\n}\n\nlunr.QueryLexer.prototype.run = function () {\n  var state = lunr.QueryLexer.lexText\n\n  while (state) {\n    state = state(this)\n  }\n}\n\nlunr.QueryLexer.prototype.sliceString = function () {\n  var subSlices = [],\n      sliceStart = this.start,\n      sliceEnd = this.pos\n\n  for (var i = 0; i < this.escapeCharPositions.length; i++) {\n    sliceEnd = this.escapeCharPositions[i]\n    subSlices.push(this.str.slice(sliceStart, sliceEnd))\n    sliceStart = sliceEnd + 1\n  }\n\n  subSlices.push(this.str.slice(sliceStart, this.pos))\n  this.escapeCharPositions.length = 0\n\n  return subSlices.join('')\n}\n\nlunr.QueryLexer.prototype.emit = function (type) {\n  this.lexemes.push({\n    type: type,\n    str: this.sliceString(),\n    start: this.start,\n    end: this.pos\n  })\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.escapeCharacter = function () {\n  this.escapeCharPositions.push(this.pos - 1)\n  this.pos += 1\n}\n\nlunr.QueryLexer.prototype.next = function () {\n  if (this.pos >= this.length) {\n    return lunr.QueryLexer.EOS\n  }\n\n  var char = this.str.charAt(this.pos)\n  this.pos += 1\n  return char\n}\n\nlunr.QueryLexer.prototype.width = function () {\n  return this.pos - this.start\n}\n\nlunr.QueryLexer.prototype.ignore = function () {\n  if (this.start == this.pos) {\n    this.pos += 1\n  }\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.backup = function () {\n  this.pos -= 1\n}\n\nlunr.QueryLexer.prototype.acceptDigitRun = function () {\n  var char, charCode\n\n  do {\n    char = this.next()\n    charCode = char.charCodeAt(0)\n  } while (charCode > 47 && charCode < 58)\n\n  if (char != lunr.QueryLexer.EOS) {\n    this.backup()\n  }\n}\n\nlunr.QueryLexer.prototype.more = function () {\n  return this.pos < this.length\n}\n\nlunr.QueryLexer.EOS = 'EOS'\nlunr.QueryLexer.FIELD = 'FIELD'\nlunr.QueryLexer.TERM = 'TERM'\nlunr.QueryLexer.EDIT_DISTANCE = 'EDIT_DISTANCE'\nlunr.QueryLexer.BOOST = 'BOOST'\nlunr.QueryLexer.PRESENCE = 'PRESENCE'\n\nlunr.QueryLexer.lexField = function (lexer) {\n  lexer.backup()\n  lexer.emit(lunr.QueryLexer.FIELD)\n  lexer.ignore()\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexTerm = function (lexer) {\n  if (lexer.width() > 1) {\n    lexer.backup()\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n\n  lexer.ignore()\n\n  if (lexer.more()) {\n    return lunr.QueryLexer.lexText\n  }\n}\n\nlunr.QueryLexer.lexEditDistance = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.EDIT_DISTANCE)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexBoost = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.BOOST)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexEOS = function (lexer) {\n  if (lexer.width() > 0) {\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n}\n\n// This matches the separator used when tokenising fields\n// within a document. These should match otherwise it is\n// not possible to search for some tokens within a document.\n//\n// It is possible for the user to change the separator on the\n// tokenizer so it _might_ clash with any other of the special\n// characters already used within the search string, e.g. :.\n//\n// This means that it is possible to change the separator in\n// such a way that makes some words unsearchable using a search\n// string.\nlunr.QueryLexer.termSeparator = lunr.tokenizer.separator\n\nlunr.QueryLexer.lexText = function (lexer) {\n  while (true) {\n    var char = lexer.next()\n\n    if (char == lunr.QueryLexer.EOS) {\n      return lunr.QueryLexer.lexEOS\n    }\n\n    // Escape character is '\\'\n    if (char.charCodeAt(0) == 92) {\n      lexer.escapeCharacter()\n      continue\n    }\n\n    if (char == \":\") {\n      return lunr.QueryLexer.lexField\n    }\n\n    if (char == \"~\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexEditDistance\n    }\n\n    if (char == \"^\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexBoost\n    }\n\n    // \"+\" indicates term presence is required\n    // checking for length to ensure that only\n    // leading \"+\" are considered\n    if (char == \"+\" && lexer.width() === 1) {\n      lexer.emit(lunr.QueryLexer.PRESENCE)\n      return lunr.QueryLexer.lexText\n    }\n\n    // \"-\" indicates term presence is prohibited\n    // checking for length to ensure that only\n    // leading \"-\" are considered\n    if (char == \"-\" && lexer.width() === 1) {\n      lexer.emit(lunr.QueryLexer.PRESENCE)\n      return lunr.QueryLexer.lexText\n    }\n\n    if (char.match(lunr.QueryLexer.termSeparator)) {\n      return lunr.QueryLexer.lexTerm\n    }\n  }\n}\n\nlunr.QueryParser = function (str, query) {\n  this.lexer = new lunr.QueryLexer (str)\n  this.query = query\n  this.currentClause = {}\n  this.lexemeIdx = 0\n}\n\nlunr.QueryParser.prototype.parse = function () {\n  this.lexer.run()\n  this.lexemes = this.lexer.lexemes\n\n  var state = lunr.QueryParser.parseClause\n\n  while (state) {\n    state = state(this)\n  }\n\n  return this.query\n}\n\nlunr.QueryParser.prototype.peekLexeme = function () {\n  return this.lexemes[this.lexemeIdx]\n}\n\nlunr.QueryParser.prototype.consumeLexeme = function () {\n  var lexeme = this.peekLexeme()\n  this.lexemeIdx += 1\n  return lexeme\n}\n\nlunr.QueryParser.prototype.nextClause = function () {\n  var completedClause = this.currentClause\n  this.query.clause(completedClause)\n  this.currentClause = {}\n}\n\nlunr.QueryParser.parseClause = function (parser) {\n  var lexeme = parser.peekLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  switch (lexeme.type) {\n    case lunr.QueryLexer.PRESENCE:\n      return lunr.QueryParser.parsePresence\n    case lunr.QueryLexer.FIELD:\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expected either a field or a term, found \" + lexeme.type\n\n      if (lexeme.str.length >= 1) {\n        errorMessage += \" with value '\" + lexeme.str + \"'\"\n      }\n\n      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n}\n\nlunr.QueryParser.parsePresence = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  switch (lexeme.str) {\n    case \"-\":\n      parser.currentClause.presence = lunr.Query.presence.PROHIBITED\n      break\n    case \"+\":\n      parser.currentClause.presence = lunr.Query.presence.REQUIRED\n      break\n    default:\n      var errorMessage = \"unrecognised presence operator'\" + lexeme.str + \"'\"\n      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    var errorMessage = \"expecting term or field, found nothing\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.FIELD:\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expecting term or field, found '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseField = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  if (parser.query.allFields.indexOf(lexeme.str) == -1) {\n    var possibleFields = parser.query.allFields.map(function (f) { return \"'\" + f + \"'\" }).join(', '),\n        errorMessage = \"unrecognised field '\" + lexeme.str + \"', possible fields: \" + possibleFields\n\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.fields = [lexeme.str]\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    var errorMessage = \"expecting term, found nothing\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expecting term, found '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseTerm = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  parser.currentClause.term = lexeme.str.toLowerCase()\n\n  if (lexeme.str.indexOf(\"*\") != -1) {\n    parser.currentClause.usePipeline = false\n  }\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    case lunr.QueryLexer.PRESENCE:\n      parser.nextClause()\n      return lunr.QueryParser.parsePresence\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseEditDistance = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var editDistance = parseInt(lexeme.str, 10)\n\n  if (isNaN(editDistance)) {\n    var errorMessage = \"edit distance must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.editDistance = editDistance\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    case lunr.QueryLexer.PRESENCE:\n      parser.nextClause()\n      return lunr.QueryParser.parsePresence\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseBoost = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var boost = parseInt(lexeme.str, 10)\n\n  if (isNaN(boost)) {\n    var errorMessage = \"boost must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.boost = boost\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    case lunr.QueryLexer.PRESENCE:\n      parser.nextClause()\n      return lunr.QueryParser.parsePresence\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\n  /**\n   * export the module via AMD, CommonJS or as a browser global\n   * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js\n   */\n  ;(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      // AMD. Register as an anonymous module.\n      define(factory)\n    } else if (typeof exports === 'object') {\n      /**\n       * Node. Does not work with strict CommonJS, but\n       * only CommonJS-like enviroments that support module.exports,\n       * like Node.\n       */\n      module.exports = factory()\n    } else {\n      // Browser globals (root is window)\n      root.lunr = factory()\n    }\n  }(this, function () {\n    /**\n     * Just return a value to define the module export.\n     * This example returns an object, but the module\n     * can return a function as the exported value.\n     */\n    return lunr\n  }))\n})();\n"],"mappings":"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Q,QAApB,CAA/B;MACD,CAFD,MAEO;QACL;QACA;QACAlC,IAAI,CAAC8B,KAAL,CAAWjB,IAAX,GAAkBqB,QAAlB;QAEA,KAAKR,cAAL,CAAoBQ,QAApB,IAAgClC,IAAI,CAAC8B,KAArC;MACD;;MAED,KAAKL,cAAL,CAAoBtB,GAApB;IACD;EACF,CAjBD;EAkBA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACAvN,IAAI,CAACuP,KAAL,GAAa,UAAUC,KAAV,EAAiB;IAC5B,KAAKC,aAAL,GAAqBD,KAAK,CAACC,aAA3B;IACA,KAAKC,YAAL,GAAoBF,KAAK,CAACE,YAA1B;IACA,KAAKC,QAAL,GAAgBH,KAAK,CAACG,QAAtB;IACA,KAAKC,MAAL,GAAcJ,KAAK,CAACI,MAApB;IACA,KAAKxP,QAAL,GAAgBoP,KAAK,CAACpP,QAAtB;EACD,CAND;EAQA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACAJ,IAAI,CAACuP,KAAL,CAAW1M,SAAX,CAAqBgN,MAArB,GAA8B,UAAUC,WAAV,EAAuB;IACnD,OAAO,KAAKC,KAAL,CAAW,UAAUA,KAAV,EAAiB;MACjC,IAAIC,MAAM,GAAG,IAAIhQ,IAAI,CAACiQ,WAAT,CAAqBH,WAArB,EAAkCC,KAAlC,CAAb;MACAC,MAAM,CAACE,KAAP;IACD,CAHM,CAAP;EAID,CALD;EAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;A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"},"metadata":{},"sourceType":"script"}