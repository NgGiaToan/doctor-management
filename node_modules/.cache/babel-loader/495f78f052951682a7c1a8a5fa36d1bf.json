{"ast":null,"code":"import _toConsumableArray from\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _defineProperty from\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _wrapRegExp from\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/esm/wrapRegExp.js\";import _ from'@lodash';import mockApi from'../mock-api.json';import mock from'../mock';var mailsDB=mockApi.components.examples.mailbox_mails.value;var labelsDB=mockApi.components.examples.mailbox_labels.value;var filtersDB=mockApi.components.examples.mailbox_filters.value;var foldersDB=mockApi.components.examples.mailbox_folders.value;mock.onGet(/*#__PURE__*/_wrapRegExp(/\\/api\\/mailbox\\/mails\\/filters\\/([^/]*)\\/([^/]*)/,{filterSlug:1,mailId:2})).reply(function(_ref){var url=_ref.url,data=_ref.data;var _url$match$groups=url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/mailbox\\/mails\\/filters\\/([^/]*)\\/([^/]*)/,{filterSlug:1,mailId:2})).groups,filterSlug=_url$match$groups.filterSlug,mailId=_url$match$groups.mailId;var response=_.find(mailsDB,{id:mailId});if(!response){return[404,'Requested mail do not exist.'];}return[200,response];});mock.onGet(/\\/api\\/mailbox\\/mails\\/filters\\/[^]+/).reply(function(_ref2){var url=_ref2.url,data=_ref2.data;var filterSlug=url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/mailbox\\/mails\\/filters\\/([^/]+)/,{filterSlug:1})).groups.filterSlug;var response=_.filter(mailsDB,_defineProperty({},filterSlug,true));return[200,response];});mock.onGet(/*#__PURE__*/_wrapRegExp(/\\/api\\/mailbox\\/mails\\/labels\\/([^/]*)\\/([^/]*)/,{labelSlug:1,mailId:2})).reply(function(_ref3){var url=_ref3.url,data=_ref3.data;var _url$match$groups2=url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/mailbox\\/mails\\/labels\\/([^/]*)\\/([^/]*)/,{labelSlug:1,mailId:2})).groups,labelSlug=_url$match$groups2.labelSlug,mailId=_url$match$groups2.mailId;var response=_.find(mailsDB,{id:mailId});if(!response){return[404,'Requested mail do not exist.'];}return[200,response];});mock.onGet(/\\/api\\/mailbox\\/mails\\/labels\\/[^]+/).reply(function(_ref4){var url=_ref4.url,data=_ref4.data;var labelSlug=url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/mailbox\\/mails\\/labels\\/([^/]+)/,{labelSlug:1})).groups.labelSlug;var labelId=_.find(labelsDB,{slug:labelSlug}).id;var response=_.filter(mailsDB,function(item){return item.labels.includes(labelId);});return[200,response];});mock.onGet(/*#__PURE__*/_wrapRegExp(/\\/api\\/mailbox\\/mails\\/([^/]*)\\/([^/]*)/,{folderSlug:1,mailId:2})).reply(function(_ref5){var url=_ref5.url,data=_ref5.data;var _url$match$groups3=url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/mailbox\\/mails\\/([^/]+)\\/([^/]+)/,{folderSlug:1,mailId:2})).groups,folderSlug=_url$match$groups3.folderSlug,mailId=_url$match$groups3.mailId;var response=_.find(mailsDB,{id:mailId});if(!response){return[404,'Requested mail do not exist.'];}return[200,response];});mock.onGet(/\\/api\\/mailbox\\/mails\\/[^]+/).reply(function(_ref6){var url=_ref6.url,data=_ref6.data;var folderSlug=url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/mailbox\\/mails\\/([^/]+)/,{folderSlug:1})).groups.folderSlug;var folderId=_.find(foldersDB,{slug:folderSlug}).id;var response=_.filter(mailsDB,{folder:folderId});return[200,response];});mock.onGet('/api/mailbox/folders').reply(function(config){return[200,foldersDB];});mock.onGet('/api/mailbox/filters').reply(function(config){return[200,filtersDB];});mock.onGet('/api/mailbox/labels').reply(function(config){return[200,labelsDB];});mock.onPost('/api/mailbox/actions').reply(function(_ref7){var url=_ref7.url,data=_ref7.data;var _JSON$parse=JSON.parse(data),type=_JSON$parse.type,value=_JSON$parse.value,ids=_JSON$parse.ids;if(type==='labels'){_.assign(mailsDB,mailsDB.map(function(_mail){return ids.includes(_mail.id)?_objectSpread(_objectSpread({},_mail),{},{labels:value}):_mail;}));return[200,true];}if(type==='label'){_.assign(mailsDB,mailsDB.map(function(_mail){return ids.includes(_mail.id)?_objectSpread(_objectSpread({},_mail),{},{labels:_mail.labels.includes(value)?_mail.labels:[].concat(_toConsumableArray(_mail.labels),[value])}):_mail;}));return[200,true];}if(type==='folder'){_.assign(mailsDB,mailsDB.map(function(_mail){return ids.includes(_mail.id)?_objectSpread(_objectSpread({},_mail),{},{folder:value}):_mail;}));return[200,true];}if(type==='starred'){_.assign(mailsDB,mailsDB.map(function(_mail){return ids.includes(_mail.id)?_objectSpread(_objectSpread({},_mail),{},{starred:value}):_mail;}));return[200,true];}if(type==='important'){_.assign(mailsDB,mailsDB.map(function(_mail){return ids.includes(_mail.id)?_objectSpread(_objectSpread({},_mail),{},{important:value}):_mail;}));return[200,true];}if(type==='unread'){_.assign(mailsDB,mailsDB.map(function(_mail){return ids.includes(_mail.id)?_objectSpread(_objectSpread({},_mail),{},{unread:value}):_mail;}));return[200,true];}return[404,false];});","map":null,"metadata":{},"sourceType":"module"}