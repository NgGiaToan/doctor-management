{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst equal_1 = require(\"../../runtime/equal\");\n\nconst error = {\n  message: \"must be equal to constant\",\n  params: _ref => {\n    let {\n      schemaCode\n    } = _ref;\n    return codegen_1._`{allowedValue: ${schemaCode}}`;\n  }\n};\nconst def = {\n  keyword: \"const\",\n  $data: true,\n  error,\n\n  code(cxt) {\n    const {\n      gen,\n      data,\n      $data,\n      schemaCode,\n      schema\n    } = cxt;\n\n    if ($data || schema && typeof schema == \"object\") {\n      cxt.fail$data(codegen_1._`!${util_1.useFunc(gen, equal_1.default)}(${data}, ${schemaCode})`);\n    } else {\n      cxt.fail(codegen_1._`${schema} !== ${data}`);\n    }\n  }\n\n};\nexports.default = def;","map":{"version":3,"mappings":";;;;;;AAEA;;AACA;;AACA;;AAIA,MAAMA,KAAK,GAA2B;EACpCC,OAAO,EAAE,2BAD2B;EAEpCC,MAAM,EAAE;IAAA,IAAC;MAACC;IAAD,CAAD;IAAA,OAAkBC,WAAC,kBAAkBD,UAAU,GAA/C;EAAA;AAF4B,CAAtC;AAKA,MAAME,GAAG,GAA0B;EACjCC,OAAO,EAAE,OADwB;EAEjCC,KAAK,EAAE,IAF0B;EAGjCP,KAHiC;;EAIjCQ,IAAI,CAACC,GAAD,EAAgB;IAClB,MAAM;MAACC,GAAD;MAAMC,IAAN;MAAYJ,KAAZ;MAAmBJ,UAAnB;MAA+BS;IAA/B,IAAyCH,GAA/C;;IACA,IAAIF,KAAK,IAAKK,MAAM,IAAI,OAAOA,MAAP,IAAiB,QAAzC,EAAoD;MAClDH,GAAG,CAACI,SAAJ,CAAcT,WAAC,IAAIU,eAAQJ,GAAR,EAAaK,eAAb,CAAmB,IAAIJ,IAAI,KAAKR,UAAU,GAA7D;IACD,CAFD,MAEO;MACLM,GAAG,CAACO,IAAJ,CAASZ,WAAC,GAAGQ,MAAM,QAAQD,IAAI,EAA/B;IACD;EACF;;AAXgC,CAAnC;AAcAM,kBAAeZ,GAAf","names":["error","message","params","schemaCode","codegen_1","def","keyword","$data","code","cxt","gen","data","schema","fail$data","util_1","equal_1","fail","exports"],"sources":["C:\\Users\\giato\\Downloads\\Workspace\\.Net\\api\\doctor-management-fe\\node_modules\\@redocly\\ajv\\lib\\vocabularies\\validation\\const.ts"],"sourcesContent":["import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_} from \"../../compile/codegen\"\nimport {useFunc} from \"../../compile/util\"\nimport equal from \"../../runtime/equal\"\n\nexport type ConstError = ErrorObject<\"const\", {allowedValue: any}>\n\nconst error: KeywordErrorDefinition = {\n  message: \"must be equal to constant\",\n  params: ({schemaCode}) => _`{allowedValue: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"const\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, data, $data, schemaCode, schema} = cxt\n    if ($data || (schema && typeof schema == \"object\")) {\n      cxt.fail$data(_`!${useFunc(gen, equal)}(${data}, ${schemaCode})`)\n    } else {\n      cxt.fail(_`${schema} !== ${data}`)\n    }\n  },\n}\n\nexport default def\n"]},"metadata":{},"sourceType":"script"}