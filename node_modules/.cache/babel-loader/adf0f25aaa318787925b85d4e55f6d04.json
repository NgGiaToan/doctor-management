{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Assertions = void 0;\n\nconst asserts_1 = require(\"./asserts\");\n\nconst utils_1 = require(\"./utils\");\n\nconst Assertions = opts => {\n  let visitors = []; // As 'Assertions' has an array of asserts,\n  // that array spreads into an 'opts' object on init rules phase here\n  // https://github.com/Redocly/redocly-cli/blob/master/packages/core/src/config/config.ts#L311\n  // that is why we need to iterate through 'opts' values;\n  // before - filter only object 'opts' values\n\n  const assertions = Object.values(opts).filter(opt => typeof opt === 'object' && opt !== null);\n\n  for (const [index, assertion] of assertions.entries()) {\n    const assertId = assertion.assertionId && `${assertion.assertionId} assertion` || `assertion #${index + 1}`;\n\n    if (!assertion.subject) {\n      throw new Error(`${assertId}: 'subject' is required`);\n    }\n\n    const subjects = Array.isArray(assertion.subject) ? assertion.subject : [assertion.subject];\n    const assertsToApply = Object.keys(asserts_1.asserts).filter(assertName => assertion[assertName] !== undefined).map(assertName => {\n      return {\n        assertId,\n        name: assertName,\n        conditions: assertion[assertName],\n        message: assertion.message,\n        severity: assertion.severity || 'error',\n        suggest: assertion.suggest || [],\n        runsOnKeys: asserts_1.runOnKeysSet.has(assertName),\n        runsOnValues: asserts_1.runOnValuesSet.has(assertName)\n      };\n    });\n    const shouldRunOnKeys = assertsToApply.find(assert => assert.runsOnKeys && !assert.runsOnValues);\n    const shouldRunOnValues = assertsToApply.find(assert => assert.runsOnValues && !assert.runsOnKeys);\n\n    if (shouldRunOnValues && !assertion.property) {\n      throw new Error(`${shouldRunOnValues.name} can't be used on all keys. Please provide a single property.`);\n    }\n\n    if (shouldRunOnKeys && assertion.property) {\n      throw new Error(`${shouldRunOnKeys.name} can't be used on a single property. Please use 'property'.`);\n    }\n\n    for (const subject of subjects) {\n      const subjectVisitor = utils_1.buildSubjectVisitor(assertion.property, assertsToApply, assertion.context);\n      const visitorObject = utils_1.buildVisitorObject(subject, assertion.context, subjectVisitor);\n      visitors.push(visitorObject);\n    }\n  }\n\n  return visitors;\n};\n\nexports.Assertions = Assertions;","map":{"version":3,"names":["Object","defineProperty","exports","value","Assertions","asserts_1","require","utils_1","opts","visitors","assertions","values","filter","opt","index","assertion","entries","assertId","assertionId","subject","Error","subjects","Array","isArray","assertsToApply","keys","asserts","assertName","undefined","map","name","conditions","message","severity","suggest","runsOnKeys","runOnKeysSet","has","runsOnValues","runOnValuesSet","shouldRunOnKeys","find","assert","shouldRunOnValues","property","subjectVisitor","buildSubjectVisitor","context","visitorObject","buildVisitorObject","push"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@redocly/openapi-core/lib/rules/common/assertions/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Assertions = void 0;\nconst asserts_1 = require(\"./asserts\");\nconst utils_1 = require(\"./utils\");\nconst Assertions = (opts) => {\n    let visitors = [];\n    // As 'Assertions' has an array of asserts,\n    // that array spreads into an 'opts' object on init rules phase here\n    // https://github.com/Redocly/redocly-cli/blob/master/packages/core/src/config/config.ts#L311\n    // that is why we need to iterate through 'opts' values;\n    // before - filter only object 'opts' values\n    const assertions = Object.values(opts).filter((opt) => typeof opt === 'object' && opt !== null);\n    for (const [index, assertion] of assertions.entries()) {\n        const assertId = (assertion.assertionId && `${assertion.assertionId} assertion`) || `assertion #${index + 1}`;\n        if (!assertion.subject) {\n            throw new Error(`${assertId}: 'subject' is required`);\n        }\n        const subjects = Array.isArray(assertion.subject)\n            ? assertion.subject\n            : [assertion.subject];\n        const assertsToApply = Object.keys(asserts_1.asserts)\n            .filter((assertName) => assertion[assertName] !== undefined)\n            .map((assertName) => {\n            return {\n                assertId,\n                name: assertName,\n                conditions: assertion[assertName],\n                message: assertion.message,\n                severity: assertion.severity || 'error',\n                suggest: assertion.suggest || [],\n                runsOnKeys: asserts_1.runOnKeysSet.has(assertName),\n                runsOnValues: asserts_1.runOnValuesSet.has(assertName),\n            };\n        });\n        const shouldRunOnKeys = assertsToApply.find((assert) => assert.runsOnKeys && !assert.runsOnValues);\n        const shouldRunOnValues = assertsToApply.find((assert) => assert.runsOnValues && !assert.runsOnKeys);\n        if (shouldRunOnValues && !assertion.property) {\n            throw new Error(`${shouldRunOnValues.name} can't be used on all keys. Please provide a single property.`);\n        }\n        if (shouldRunOnKeys && assertion.property) {\n            throw new Error(`${shouldRunOnKeys.name} can't be used on a single property. Please use 'property'.`);\n        }\n        for (const subject of subjects) {\n            const subjectVisitor = utils_1.buildSubjectVisitor(assertion.property, assertsToApply, assertion.context);\n            const visitorObject = utils_1.buildVisitorObject(subject, assertion.context, subjectVisitor);\n            visitors.push(visitorObject);\n        }\n    }\n    return visitors;\n};\nexports.Assertions = Assertions;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}