{"ast":null,"code":"import _ from '@lodash';\nimport FuseUtils from '@fuse/utils';\nimport mockApi from '../mock-api.json';\nimport mock from '../mock';\nconst notesDB = mockApi.components.examples.notes_notes.value;\nconst labelsDB = mockApi.components.examples.notes_labels.value;\nmock.onGet('/api/notes').reply(config => {\n  return [200, _.filter(notesDB, {\n    archived: false\n  })];\n});\nmock.onPost('/api/notes').reply(_ref => {\n  let {\n    data\n  } = _ref;\n  const newNote = {\n    id: FuseUtils.generateGUID(),\n    ...JSON.parse(data)\n  };\n  notesDB.push(newNote);\n  return [200, newNote];\n});\nmock.onGet('/api/notes/archive').reply(config => {\n  return [200, _.filter(notesDB, {\n    archived: true\n  })];\n});\nmock.onGet('/api/notes/reminders').reply(config => {\n  return [200, _.filter(notesDB, item => item.reminder && !item.archived)];\n});\nmock.onGet('/api/notes/labels').reply(config => {\n  return [200, labelsDB];\n});\nmock.onPost('/api/notes/labels').reply(_ref2 => {\n  let {\n    data\n  } = _ref2;\n  const newLabel = {\n    id: FuseUtils.generateGUID(),\n    ...JSON.parse(data)\n  };\n  labelsDB.push(newLabel);\n  return [200, newLabel];\n});\nmock.onDelete(/\\/api\\/notes\\/labels\\/[^/]+/).reply(_ref3 => {\n  let {\n    url\n  } = _ref3;\n  const {\n    id\n  } = url.match(/\\/api\\/notes\\/labels\\/(?<id>[^/]+)/).groups;\n\n  _.remove(labelsDB, {\n    id\n  });\n\n  return [200, id];\n});\nmock.onPut(/\\/api\\/notes\\/labels\\/[^/]+/).reply(_ref4 => {\n  let {\n    url,\n    data\n  } = _ref4;\n  const {\n    id\n  } = url.match(/\\/api\\/notes\\/labels\\/(?<id>[^/]+)/).groups;\n\n  _.assign(_.find(labelsDB, {\n    id\n  }), JSON.parse(data));\n\n  return [200, _.find(labelsDB, {\n    id\n  })];\n});\nmock.onGet(/\\/api\\/notes\\/labels\\/[^/]+/).reply(config => {\n  const {\n    id\n  } = config.url.match(/\\/api\\/notes\\/labels\\/(?<id>[^/]+)/).groups;\n\n  const response = _.filter(notesDB, item => item.labels.includes(id) && !item.archived);\n\n  if (response) {\n    return [200, response];\n  }\n\n  return [404, 'Requested notes do not exist.'];\n});\nmock.onGet(/\\/api\\/notes\\/[^/]+/).reply(config => {\n  const {\n    id\n  } = config.url.match(/\\/api\\/notes\\/(?<id>[^/]+)/).groups;\n\n  const note = _.find(notesDB, {\n    id\n  });\n\n  if (note) {\n    return [200, note];\n  }\n\n  return [404, 'Requested task do not exist.'];\n});\nmock.onPut(/\\/api\\/notes\\/[^/]+/).reply(_ref5 => {\n  let {\n    url,\n    data\n  } = _ref5;\n  const {\n    id\n  } = url.match(/\\/api\\/notes\\/(?<id>[^/]+)/).groups;\n\n  _.assign(_.find(notesDB, {\n    id\n  }), JSON.parse(data));\n\n  return [200, _.find(notesDB, {\n    id\n  })];\n});\nmock.onDelete(/\\/api\\/notes\\/[^/]+/).reply(config => {\n  const {\n    id\n  } = config.url.match(/\\/api\\/notes\\/(?<id>[^/]+)/).groups;\n\n  _.remove(notesDB, {\n    id\n  });\n\n  return [200, id];\n});","map":{"version":3,"names":["_","FuseUtils","mockApi","mock","notesDB","components","examples","notes_notes","value","labelsDB","notes_labels","onGet","reply","config","filter","archived","onPost","data","newNote","id","generateGUID","JSON","parse","push","item","reminder","newLabel","onDelete","url","match","groups","remove","onPut","assign","find","response","labels","includes","note"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/src/@mock-api/api/notes-api.js"],"sourcesContent":["import _ from '@lodash';\r\nimport FuseUtils from '@fuse/utils';\r\nimport mockApi from '../mock-api.json';\r\nimport mock from '../mock';\r\n\r\nconst notesDB = mockApi.components.examples.notes_notes.value;\r\nconst labelsDB = mockApi.components.examples.notes_labels.value;\r\n\r\nmock.onGet('/api/notes').reply((config) => {\r\n  return [200, _.filter(notesDB, { archived: false })];\r\n});\r\n\r\nmock.onPost('/api/notes').reply(({ data }) => {\r\n  const newNote = { id: FuseUtils.generateGUID(), ...JSON.parse(data) };\r\n  notesDB.push(newNote);\r\n\r\n  return [200, newNote];\r\n});\r\n\r\nmock.onGet('/api/notes/archive').reply((config) => {\r\n  return [200, _.filter(notesDB, { archived: true })];\r\n});\r\n\r\nmock.onGet('/api/notes/reminders').reply((config) => {\r\n  return [200, _.filter(notesDB, (item) => item.reminder && !item.archived)];\r\n});\r\n\r\nmock.onGet('/api/notes/labels').reply((config) => {\r\n  return [200, labelsDB];\r\n});\r\n\r\nmock.onPost('/api/notes/labels').reply(({ data }) => {\r\n  const newLabel = { id: FuseUtils.generateGUID(), ...JSON.parse(data) };\r\n  labelsDB.push(newLabel);\r\n\r\n  return [200, newLabel];\r\n});\r\n\r\nmock.onDelete(/\\/api\\/notes\\/labels\\/[^/]+/).reply(({ url }) => {\r\n  const { id } = url.match(/\\/api\\/notes\\/labels\\/(?<id>[^/]+)/).groups;\r\n\r\n  _.remove(labelsDB, { id });\r\n\r\n  return [200, id];\r\n});\r\n\r\nmock.onPut(/\\/api\\/notes\\/labels\\/[^/]+/).reply(({ url, data }) => {\r\n  const { id } = url.match(/\\/api\\/notes\\/labels\\/(?<id>[^/]+)/).groups;\r\n\r\n  _.assign(_.find(labelsDB, { id }), JSON.parse(data));\r\n\r\n  return [200, _.find(labelsDB, { id })];\r\n});\r\n\r\nmock.onGet(/\\/api\\/notes\\/labels\\/[^/]+/).reply((config) => {\r\n  const { id } = config.url.match(/\\/api\\/notes\\/labels\\/(?<id>[^/]+)/).groups;\r\n  const response = _.filter(notesDB, (item) => item.labels.includes(id) && !item.archived);\r\n\r\n  if (response) {\r\n    return [200, response];\r\n  }\r\n\r\n  return [404, 'Requested notes do not exist.'];\r\n});\r\n\r\nmock.onGet(/\\/api\\/notes\\/[^/]+/).reply((config) => {\r\n  const { id } = config.url.match(/\\/api\\/notes\\/(?<id>[^/]+)/).groups;\r\n  const note = _.find(notesDB, { id });\r\n\r\n  if (note) {\r\n    return [200, note];\r\n  }\r\n\r\n  return [404, 'Requested task do not exist.'];\r\n});\r\n\r\nmock.onPut(/\\/api\\/notes\\/[^/]+/).reply(({ url, data }) => {\r\n  const { id } = url.match(/\\/api\\/notes\\/(?<id>[^/]+)/).groups;\r\n\r\n  _.assign(_.find(notesDB, { id }), JSON.parse(data));\r\n\r\n  return [200, _.find(notesDB, { id })];\r\n});\r\n\r\nmock.onDelete(/\\/api\\/notes\\/[^/]+/).reply((config) => {\r\n  const { id } = config.url.match(/\\/api\\/notes\\/(?<id>[^/]+)/).groups;\r\n\r\n  _.remove(notesDB, { id });\r\n\r\n  return [200, id];\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}