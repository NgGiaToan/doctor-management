{"ast":null,"code":"const schemaKeywordTypes = {\n  multipleOf: 'number',\n  maximum: 'number',\n  exclusiveMaximum: 'number',\n  minimum: 'number',\n  exclusiveMinimum: 'number',\n  maxLength: 'string',\n  minLength: 'string',\n  pattern: 'string',\n  items: 'array',\n  maxItems: 'array',\n  minItems: 'array',\n  uniqueItems: 'array',\n  additionalItems: 'array',\n  maxProperties: 'object',\n  minProperties: 'object',\n  required: 'object',\n  additionalProperties: 'object',\n  properties: 'object',\n  patternProperties: 'object',\n  dependencies: 'object'\n};\nexport function inferType(schema) {\n  if (schema.type !== undefined) {\n    return Array.isArray(schema.type) ? schema.type.length === 0 ? null : schema.type[0] : schema.type;\n  }\n\n  const keywords = Object.keys(schemaKeywordTypes);\n\n  for (var i = 0; i < keywords.length; i++) {\n    let keyword = keywords[i];\n    let type = schemaKeywordTypes[keyword];\n\n    if (schema[keyword] !== undefined) {\n      return type;\n    }\n  }\n\n  return null;\n}","map":{"version":3,"names":["schemaKeywordTypes","multipleOf","maximum","exclusiveMaximum","minimum","exclusiveMinimum","maxLength","minLength","pattern","items","maxItems","minItems","uniqueItems","additionalItems","maxProperties","minProperties","required","additionalProperties","properties","patternProperties","dependencies","inferType","schema","type","undefined","Array","isArray","length","keywords","Object","keys","i","keyword"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/openapi-sampler/src/infer.js"],"sourcesContent":["const schemaKeywordTypes = {\n  multipleOf: 'number',\n  maximum: 'number',\n  exclusiveMaximum: 'number',\n  minimum: 'number',\n  exclusiveMinimum: 'number',\n\n  maxLength: 'string',\n  minLength: 'string',\n  pattern: 'string',\n\n  items: 'array',\n  maxItems: 'array',\n  minItems: 'array',\n  uniqueItems: 'array',\n  additionalItems: 'array',\n\n  maxProperties: 'object',\n  minProperties: 'object',\n  required: 'object',\n  additionalProperties: 'object',\n  properties: 'object',\n  patternProperties: 'object',\n  dependencies: 'object'\n};\n\nexport function inferType(schema) {\n  if (schema.type !== undefined) {\n    return Array.isArray(schema.type) ? schema.type.length === 0 ? null : schema.type[0] : schema.type;\n  }\n  const keywords = Object.keys(schemaKeywordTypes);\n  for (var i = 0; i < keywords.length; i++) {\n    let keyword = keywords[i];\n    let type = schemaKeywordTypes[keyword];\n    if (schema[keyword] !== undefined) {\n      return type;\n    }\n  }\n\n  return null;\n}\n"],"mappings":"AAAA,MAAMA,kBAAkB,GAAG;EACzBC,UAAU,EAAE,QADa;EAEzBC,OAAO,EAAE,QAFgB;EAGzBC,gBAAgB,EAAE,QAHO;EAIzBC,OAAO,EAAE,QAJgB;EAKzBC,gBAAgB,EAAE,QALO;EAOzBC,SAAS,EAAE,QAPc;EAQzBC,SAAS,EAAE,QARc;EASzBC,OAAO,EAAE,QATgB;EAWzBC,KAAK,EAAE,OAXkB;EAYzBC,QAAQ,EAAE,OAZe;EAazBC,QAAQ,EAAE,OAbe;EAczBC,WAAW,EAAE,OAdY;EAezBC,eAAe,EAAE,OAfQ;EAiBzBC,aAAa,EAAE,QAjBU;EAkBzBC,aAAa,EAAE,QAlBU;EAmBzBC,QAAQ,EAAE,QAnBe;EAoBzBC,oBAAoB,EAAE,QApBG;EAqBzBC,UAAU,EAAE,QArBa;EAsBzBC,iBAAiB,EAAE,QAtBM;EAuBzBC,YAAY,EAAE;AAvBW,CAA3B;AA0BA,OAAO,SAASC,SAAT,CAAmBC,MAAnB,EAA2B;EAChC,IAAIA,MAAM,CAACC,IAAP,KAAgBC,SAApB,EAA+B;IAC7B,OAAOC,KAAK,CAACC,OAAN,CAAcJ,MAAM,CAACC,IAArB,IAA6BD,MAAM,CAACC,IAAP,CAAYI,MAAZ,KAAuB,CAAvB,GAA2B,IAA3B,GAAkCL,MAAM,CAACC,IAAP,CAAY,CAAZ,CAA/D,GAAgFD,MAAM,CAACC,IAA9F;EACD;;EACD,MAAMK,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAY9B,kBAAZ,CAAjB;;EACA,KAAK,IAAI+B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACD,MAA7B,EAAqCI,CAAC,EAAtC,EAA0C;IACxC,IAAIC,OAAO,GAAGJ,QAAQ,CAACG,CAAD,CAAtB;IACA,IAAIR,IAAI,GAAGvB,kBAAkB,CAACgC,OAAD,CAA7B;;IACA,IAAIV,MAAM,CAACU,OAAD,CAAN,KAAoBR,SAAxB,EAAmC;MACjC,OAAOD,IAAP;IACD;EACF;;EAED,OAAO,IAAP;AACD"},"metadata":{},"sourceType":"module"}