{"ast":null,"code":"import _objectSpread from \"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { traverse } from './traverse';\nimport { mergeDeep } from './utils';\nexport function allOfSample(into, children, options, spec, context) {\n  var res = traverse(into, options, spec);\n  var subSamples = [];\n\n  var _iterator = _createForOfIteratorHelper(children),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var subSchema = _step.value;\n\n      var _traverse = traverse(_objectSpread({\n        type: res.type\n      }, subSchema), options, spec, context),\n          type = _traverse.type,\n          readOnly = _traverse.readOnly,\n          writeOnly = _traverse.writeOnly,\n          value = _traverse.value;\n\n      if (res.type && type && type !== res.type) {\n        console.warn('allOf: schemas with different types can\\'t be merged');\n        res.type = type;\n      }\n\n      res.type = res.type || type;\n      res.readOnly = res.readOnly || readOnly;\n      res.writeOnly = res.writeOnly || writeOnly;\n      if (value != null) subSamples.push(value);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (res.type === 'object') {\n    res.value = mergeDeep.apply(void 0, [res.value || {}].concat(_toConsumableArray(subSamples.filter(function (sample) {\n      return typeof sample === 'object';\n    }))));\n    return res;\n  } else {\n    if (res.type === 'array') {\n      // TODO: implement arrays\n      if (!options.quiet) console.warn('OpenAPI Sampler: found allOf with \"array\" type. Result may be incorrect');\n    }\n\n    var lastSample = subSamples[subSamples.length - 1];\n    res.value = lastSample != null ? lastSample : res.value;\n    return res;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}