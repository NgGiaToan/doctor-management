{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NoEmptyEnumServers = void 0;\nvar enumError;\n\n(function (enumError) {\n  enumError[\"empty\"] = \"empty\";\n  enumError[\"invalidDefaultValue\"] = \"invalidDefaultValue\";\n})(enumError || (enumError = {}));\n\nvar NoEmptyEnumServers = function NoEmptyEnumServers() {\n  return {\n    DefinitionRoot: function DefinitionRoot(root, _ref) {\n      var report = _ref.report,\n          location = _ref.location;\n      if (!root.servers || root.servers.length === 0) return;\n      var invalidVariables = [];\n\n      if (Array.isArray(root.servers)) {\n        var _iterator = _createForOfIteratorHelper(root.servers),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var server = _step.value;\n            var enumErrors = checkEnumVariables(server);\n            if (!enumErrors) continue;\n            invalidVariables.push.apply(invalidVariables, _toConsumableArray(enumErrors));\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else {\n        var _enumErrors = checkEnumVariables(root.servers);\n\n        if (!_enumErrors) return;\n        invalidVariables.push.apply(invalidVariables, _toConsumableArray(_enumErrors));\n      }\n\n      for (var _i = 0, _invalidVariables = invalidVariables; _i < _invalidVariables.length; _i++) {\n        var invalidVariable = _invalidVariables[_i];\n\n        if (invalidVariable === enumError.empty) {\n          report({\n            message: 'Server variable with `enum` must be a non-empty array.',\n            location: location.child(['servers']).key()\n          });\n        }\n\n        if (invalidVariable === enumError.invalidDefaultValue) {\n          report({\n            message: 'Server variable define `enum` and `default`. `enum` must include default value',\n            location: location.child(['servers']).key()\n          });\n        }\n      }\n    }\n  };\n};\n\nexports.NoEmptyEnumServers = NoEmptyEnumServers;\n\nfunction checkEnumVariables(server) {\n  var _a;\n\n  if (server.variables && Object.keys(server.variables).length === 0) return;\n  var errors = [];\n\n  for (var variable in server.variables) {\n    var serverVariable = server.variables[variable];\n    if (!serverVariable.enum) continue;\n    if (Array.isArray(serverVariable.enum) && ((_a = serverVariable.enum) === null || _a === void 0 ? void 0 : _a.length) === 0) errors.push(enumError.empty);\n    if (!serverVariable.default) continue;\n    var defaultValue = server.variables[variable].default;\n    if (serverVariable.enum && !serverVariable.enum.includes(defaultValue)) errors.push(enumError.invalidDefaultValue);\n  }\n\n  if (errors.length) return errors;\n  return;\n}","map":null,"metadata":{},"sourceType":"script"}