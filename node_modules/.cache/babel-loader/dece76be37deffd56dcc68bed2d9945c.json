{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _taggedTemplateLiteral = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar types_1 = require(\"../discriminator/types\");\n\nvar error = {\n  message: function message(_ref) {\n    var _ref$params = _ref.params,\n        discrError = _ref$params.discrError,\n        tagName = _ref$params.tagName;\n    return discrError === types_1.DiscrError.Tag ? \"tag \\\"\".concat(tagName, \"\\\" must be string\") : \"value of tag \\\"\".concat(tagName, \"\\\" must be in oneOf\");\n  },\n  params: function params(_ref2) {\n    var _ref2$params = _ref2.params,\n        discrError = _ref2$params.discrError,\n        tag = _ref2$params.tag,\n        tagName = _ref2$params.tagName;\n    return codegen_1._(_templateObject || (_templateObject = _taggedTemplateLiteral([\"{error: \", \", tag: \", \", tagValue: \", \"}\"])), discrError, tagName, tag);\n  }\n};\nvar def = {\n  keyword: \"discriminator\",\n  type: \"object\",\n  schemaType: \"object\",\n  error: error,\n  code: function code(cxt) {\n    var gen = cxt.gen,\n        data = cxt.data,\n        schema = cxt.schema,\n        parentSchema = cxt.parentSchema,\n        it = cxt.it;\n    var oneOf = parentSchema.oneOf;\n\n    if (!it.opts.discriminator) {\n      throw new Error(\"discriminator: requires discriminator option\");\n    }\n\n    var tagName = schema.propertyName;\n    if (typeof tagName != \"string\") throw new Error(\"discriminator: requires propertyName\");\n    if (!oneOf) throw new Error(\"discriminator: requires oneOf keyword\");\n    var valid = gen.let(\"valid\", false);\n    var tag = gen.const(\"tag\", codegen_1._(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\", \"\", \"\"])), data, codegen_1.getProperty(tagName)));\n    gen.if(codegen_1._(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"typeof \", \" == \\\"string\\\"\"])), tag), function () {\n      return validateMapping();\n    }, function () {\n      return cxt.error(false, {\n        discrError: types_1.DiscrError.Tag,\n        tag: tag,\n        tagName: tagName\n      });\n    });\n    cxt.ok(valid);\n\n    function validateMapping() {\n      var mapping = getMapping();\n      gen.if(false);\n\n      for (var tagValue in mapping) {\n        gen.elseIf(codegen_1._(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \" === \", \"\"])), tag, tagValue));\n        gen.assign(valid, applyTagSchema(mapping[tagValue]));\n      }\n\n      gen.else();\n      cxt.error(false, {\n        discrError: types_1.DiscrError.Mapping,\n        tag: tag,\n        tagName: tagName\n      });\n      gen.endIf();\n    }\n\n    function applyTagSchema(schemaProp) {\n      var _valid = gen.name(\"valid\");\n\n      var schCxt = cxt.subschema({\n        keyword: \"oneOf\",\n        schemaProp: schemaProp\n      }, _valid);\n      cxt.mergeEvaluated(schCxt, codegen_1.Name);\n      return _valid;\n    }\n\n    function isRef(schema) {\n      return schema.hasOwnProperty('$ref');\n    }\n\n    function getMapping() {\n      var _a;\n\n      var oneOfMapping = {};\n      var topRequired = hasRequired(parentSchema);\n      var tagRequired = true;\n\n      var _loop = function _loop(i) {\n        var sch = oneOf[i];\n        var propSch = void 0;\n\n        if (isRef(sch)) {\n          // compare the ref pointer to the one in mapping\n          if (schema.mapping) {\n            var mapping = schema.mapping;\n            var matchedKey;\n            Object.keys(mapping).forEach(function (key) {\n              if (mapping[key] === sch['$ref']) {\n                matchedKey = key;\n              }\n            });\n\n            if (matchedKey) {\n              addMapping(matchedKey, i);\n            } else {\n              throw new Error(\"\".concat(sch['$ref'], \" should have corresponding entry in mapping\"));\n            }\n          }\n\n          return \"continue\";\n        } else {\n          // find if raw schema contains tagName\n          propSch = (_a = sch.properties) === null || _a === void 0 ? void 0 : _a[tagName];\n        }\n\n        if (typeof propSch != \"object\") {\n          throw new Error(\"discriminator: oneOf schemas must have \\\"properties/\".concat(tagName, \"\\\"\"));\n        }\n\n        tagRequired = tagRequired && (topRequired || hasRequired(sch));\n        addMappings(propSch, i);\n      };\n\n      for (var i = 0; i < oneOf.length; i++) {\n        var _ret = _loop(i);\n\n        if (_ret === \"continue\") continue;\n      }\n\n      if (!tagRequired) throw new Error(\"discriminator: \\\"\".concat(tagName, \"\\\" must be required\"));\n      return oneOfMapping;\n\n      function hasRequired(_ref3) {\n        var required = _ref3.required;\n        return Array.isArray(required) && required.includes(tagName);\n      }\n\n      function addMappings(sch, i) {\n        if (sch.const) {\n          addMapping(sch.const, i);\n        } else if (sch.enum) {\n          var _iterator = _createForOfIteratorHelper(sch.enum),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var tagValue = _step.value;\n              addMapping(tagValue, i);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        } else {\n          throw new Error(\"discriminator: \\\"properties/\".concat(tagName, \"\\\" must have \\\"const\\\" or \\\"enum\\\"\"));\n        }\n      }\n\n      function addMapping(tagValue, i) {\n        if (typeof tagValue != \"string\" || tagValue in oneOfMapping) {\n          throw new Error(\"discriminator: \\\"\".concat(tagName, \"\\\" values must be unique strings\"));\n        }\n\n        oneOfMapping[tagValue] = i;\n      }\n    }\n  }\n};\nexports.default = def; //# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"script"}