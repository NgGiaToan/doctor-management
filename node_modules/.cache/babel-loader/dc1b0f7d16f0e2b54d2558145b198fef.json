{"ast":null,"code":"(function (Prism) {\n  Prism.languages.typescript = Prism.languages.extend('javascript', {\n    'class-name': {\n      pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n\n    },\n    'builtin': /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n  }); // The keywords TypeScript adds to JavaScript\n\n  Prism.languages.typescript.keyword.push(/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n  /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n  /\\btype\\b(?=\\s*(?:[\\{*]|$))/); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.typescript['parameter'];\n  delete Prism.languages.typescript['literal-property']; // a version of typescript specifically for highlighting types\n\n  var typeInside = Prism.languages.extend('typescript', {});\n  delete typeInside['class-name'];\n  Prism.languages.typescript['class-name'].inside = typeInside;\n  Prism.languages.insertBefore('typescript', 'function', {\n    'decorator': {\n      pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n      inside: {\n        'at': {\n          pattern: /^@/,\n          alias: 'operator'\n        },\n        'function': /^[\\s\\S]+/\n      }\n    },\n    'generic-function': {\n      // e.g. foo<T extends \"bar\" | \"baz\">( ...\n      pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          // everything after the first <\n          alias: 'class-name',\n          inside: typeInside\n        }\n      }\n    }\n  });\n  Prism.languages.ts = Prism.languages.typescript;\n})(Prism);","map":{"version":3,"names":["Prism","languages","typescript","extend","pattern","lookbehind","greedy","inside","keyword","push","typeInside","insertBefore","alias","ts"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/prismjs/components/prism-typescript.js"],"sourcesContent":["(function (Prism) {\n\n\tPrism.languages.typescript = Prism.languages.extend('javascript', {\n\t\t'class-name': {\n\t\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: null // see below\n\t\t},\n\t\t'builtin': /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/,\n\t});\n\n\t// The keywords TypeScript adds to JavaScript\n\tPrism.languages.typescript.keyword.push(\n\t\t/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/,\n\t\t// keywords that have to be followed by an identifier\n\t\t/\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/,\n\t\t// This is for `import type *, {}`\n\t\t/\\btype\\b(?=\\s*(?:[\\{*]|$))/\n\t);\n\n\t// doesn't work with TS because TS is too complex\n\tdelete Prism.languages.typescript['parameter'];\n\tdelete Prism.languages.typescript['literal-property'];\n\n\t// a version of typescript specifically for highlighting types\n\tvar typeInside = Prism.languages.extend('typescript', {});\n\tdelete typeInside['class-name'];\n\n\tPrism.languages.typescript['class-name'].inside = typeInside;\n\n\tPrism.languages.insertBefore('typescript', 'function', {\n\t\t'decorator': {\n\t\t\tpattern: /@[$\\w\\xA0-\\uFFFF]+/,\n\t\t\tinside: {\n\t\t\t\t'at': {\n\t\t\t\t\tpattern: /^@/,\n\t\t\t\t\talias: 'operator'\n\t\t\t\t},\n\t\t\t\t'function': /^[\\s\\S]+/\n\t\t\t}\n\t\t},\n\t\t'generic-function': {\n\t\t\t// e.g. foo<T extends \"bar\" | \"baz\">( ...\n\t\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n\t\t\t\t'generic': {\n\t\t\t\t\tpattern: /<[\\s\\S]+/, // everything after the first <\n\t\t\t\t\talias: 'class-name',\n\t\t\t\t\tinside: typeInside\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tPrism.languages.ts = Prism.languages.typescript;\n\n}(Prism));\n"],"mappings":"AAAC,WAAUA,KAAV,EAAiB;EAEjBA,KAAK,CAACC,SAAN,CAAgBC,UAAhB,GAA6BF,KAAK,CAACC,SAAN,CAAgBE,MAAhB,CAAuB,YAAvB,EAAqC;IACjE,cAAc;MACbC,OAAO,EAAE,8KADI;MAEbC,UAAU,EAAE,IAFC;MAGbC,MAAM,EAAE,IAHK;MAIbC,MAAM,EAAE,IAJK,CAIA;;IAJA,CADmD;IAOjE,WAAW;EAPsD,CAArC,CAA7B,CAFiB,CAYjB;;EACAP,KAAK,CAACC,SAAN,CAAgBC,UAAhB,CAA2BM,OAA3B,CAAmCC,IAAnC,CACC,oDADD,EAEC;EACA,0FAHD,EAIC;EACA,4BALD,EAbiB,CAqBjB;;EACA,OAAOT,KAAK,CAACC,SAAN,CAAgBC,UAAhB,CAA2B,WAA3B,CAAP;EACA,OAAOF,KAAK,CAACC,SAAN,CAAgBC,UAAhB,CAA2B,kBAA3B,CAAP,CAvBiB,CAyBjB;;EACA,IAAIQ,UAAU,GAAGV,KAAK,CAACC,SAAN,CAAgBE,MAAhB,CAAuB,YAAvB,EAAqC,EAArC,CAAjB;EACA,OAAOO,UAAU,CAAC,YAAD,CAAjB;EAEAV,KAAK,CAACC,SAAN,CAAgBC,UAAhB,CAA2B,YAA3B,EAAyCK,MAAzC,GAAkDG,UAAlD;EAEAV,KAAK,CAACC,SAAN,CAAgBU,YAAhB,CAA6B,YAA7B,EAA2C,UAA3C,EAAuD;IACtD,aAAa;MACZP,OAAO,EAAE,oBADG;MAEZG,MAAM,EAAE;QACP,MAAM;UACLH,OAAO,EAAE,IADJ;UAELQ,KAAK,EAAE;QAFF,CADC;QAKP,YAAY;MALL;IAFI,CADyC;IAWtD,oBAAoB;MACnB;MACAR,OAAO,EAAE,wGAFU;MAGnBE,MAAM,EAAE,IAHW;MAInBC,MAAM,EAAE;QACP,YAAY,2DADL;QAEP,WAAW;UACVH,OAAO,EAAE,UADC;UACW;UACrBQ,KAAK,EAAE,YAFG;UAGVL,MAAM,EAAEG;QAHE;MAFJ;IAJW;EAXkC,CAAvD;EA0BAV,KAAK,CAACC,SAAN,CAAgBY,EAAhB,GAAqBb,KAAK,CAACC,SAAN,CAAgBC,UAArC;AAEA,CA3DA,EA2DCF,KA3DD,CAAD"},"metadata":{},"sourceType":"script"}