{"ast":null,"code":"import { traverse } from '../traverse';\nexport function sampleArray(schema) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var spec = arguments.length > 2 ? arguments[2] : undefined;\n  var context = arguments.length > 3 ? arguments[3] : undefined;\n  var depth = context && context.depth || 1;\n  var arrayLength = Math.min(schema.maxItems != undefined ? schema.maxItems : Infinity, schema.minItems || 1); // for the sake of simplicity, we're treating `contains` in a similar way to `items`\n\n  var items = schema.items || schema.contains;\n\n  if (Array.isArray(items)) {\n    arrayLength = Math.max(arrayLength, items.length);\n  }\n\n  var itemSchemaGetter = function itemSchemaGetter(itemNumber) {\n    if (Array.isArray(schema.items)) {\n      return items[itemNumber] || {};\n    }\n\n    return items || {};\n  };\n\n  var res = [];\n  if (!items) return res;\n\n  for (var i = 0; i < arrayLength; i++) {\n    var itemSchema = itemSchemaGetter(i);\n\n    var _traverse = traverse(itemSchema, options, spec, {\n      depth: depth + 1\n    }),\n        sample = _traverse.value;\n\n    res.push(sample);\n  }\n\n  return res;\n}","map":null,"metadata":{},"sourceType":"module"}