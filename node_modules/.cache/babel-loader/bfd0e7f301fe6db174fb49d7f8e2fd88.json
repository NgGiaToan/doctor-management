{"ast":null,"code":"import _wrapRegExp from\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/esm/wrapRegExp.js\";import _objectSpread from\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _ from'@lodash';import FuseUtils from'@fuse/utils';import mockApi from'../mock-api.json';import mock from'../mock';var notesDB=mockApi.components.examples.notes_notes.value;var labelsDB=mockApi.components.examples.notes_labels.value;mock.onGet('/api/notes').reply(function(config){return[200,_.filter(notesDB,{archived:false})];});mock.onPost('/api/notes').reply(function(_ref){var data=_ref.data;var newNote=_objectSpread({id:FuseUtils.generateGUID()},JSON.parse(data));notesDB.push(newNote);return[200,newNote];});mock.onGet('/api/notes/archive').reply(function(config){return[200,_.filter(notesDB,{archived:true})];});mock.onGet('/api/notes/reminders').reply(function(config){return[200,_.filter(notesDB,function(item){return item.reminder&&!item.archived;})];});mock.onGet('/api/notes/labels').reply(function(config){return[200,labelsDB];});mock.onPost('/api/notes/labels').reply(function(_ref2){var data=_ref2.data;var newLabel=_objectSpread({id:FuseUtils.generateGUID()},JSON.parse(data));labelsDB.push(newLabel);return[200,newLabel];});mock.onDelete(/\\/api\\/notes\\/labels\\/[^/]+/).reply(function(_ref3){var url=_ref3.url;var id=url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/notes\\/labels\\/([^/]+)/,{id:1})).groups.id;_.remove(labelsDB,{id:id});return[200,id];});mock.onPut(/\\/api\\/notes\\/labels\\/[^/]+/).reply(function(_ref4){var url=_ref4.url,data=_ref4.data;var id=url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/notes\\/labels\\/([^/]+)/,{id:1})).groups.id;_.assign(_.find(labelsDB,{id:id}),JSON.parse(data));return[200,_.find(labelsDB,{id:id})];});mock.onGet(/\\/api\\/notes\\/labels\\/[^/]+/).reply(function(config){var id=config.url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/notes\\/labels\\/([^/]+)/,{id:1})).groups.id;var response=_.filter(notesDB,function(item){return item.labels.includes(id)&&!item.archived;});if(response){return[200,response];}return[404,'Requested notes do not exist.'];});mock.onGet(/\\/api\\/notes\\/[^/]+/).reply(function(config){var id=config.url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/notes\\/([^/]+)/,{id:1})).groups.id;var note=_.find(notesDB,{id:id});if(note){return[200,note];}return[404,'Requested task do not exist.'];});mock.onPut(/\\/api\\/notes\\/[^/]+/).reply(function(_ref5){var url=_ref5.url,data=_ref5.data;var id=url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/notes\\/([^/]+)/,{id:1})).groups.id;_.assign(_.find(notesDB,{id:id}),JSON.parse(data));return[200,_.find(notesDB,{id:id})];});mock.onDelete(/\\/api\\/notes\\/[^/]+/).reply(function(config){var id=config.url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/notes\\/([^/]+)/,{id:1})).groups.id;_.remove(notesDB,{id:id});return[200,id];});","map":null,"metadata":{},"sourceType":"module"}