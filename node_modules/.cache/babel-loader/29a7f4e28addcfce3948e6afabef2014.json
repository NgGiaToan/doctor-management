{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RemoveXInternal = void 0;\n\nvar utils_1 = require(\"../../utils\");\n\nvar ref_utils_1 = require(\"../../ref-utils\");\n\nvar DEFAULT_INTERNAL_PROPERTY_NAME = 'x-internal';\n\nvar RemoveXInternal = function RemoveXInternal(_ref) {\n  var internalFlagProperty = _ref.internalFlagProperty;\n  var hiddenTag = internalFlagProperty || DEFAULT_INTERNAL_PROPERTY_NAME;\n\n  function removeInternal(node, ctx) {\n    var _a, _b, _c, _d;\n\n    var parent = ctx.parent,\n        key = ctx.key;\n    var didDelete = false;\n\n    if (Array.isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        if (ref_utils_1.isRef(node[i])) {\n          var resolved = ctx.resolve(node[i]);\n\n          if ((_a = resolved.node) === null || _a === void 0 ? void 0 : _a[hiddenTag]) {\n            node.splice(i, 1);\n            didDelete = true;\n            i--;\n          }\n        }\n\n        if ((_b = node[i]) === null || _b === void 0 ? void 0 : _b[hiddenTag]) {\n          node.splice(i, 1);\n          didDelete = true;\n          i--;\n        }\n      }\n    } else if (utils_1.isPlainObject(node)) {\n      for (var _i = 0, _Object$keys = Object.keys(node); _i < _Object$keys.length; _i++) {\n        var _key = _Object$keys[_i];\n        node = node;\n\n        if (ref_utils_1.isRef(node[_key])) {\n          var _resolved = ctx.resolve(node[_key]);\n\n          if ((_c = _resolved.node) === null || _c === void 0 ? void 0 : _c[hiddenTag]) {\n            delete node[_key];\n            didDelete = true;\n          }\n        }\n\n        if ((_d = node[_key]) === null || _d === void 0 ? void 0 : _d[hiddenTag]) {\n          delete node[_key];\n          didDelete = true;\n        }\n      }\n    }\n\n    if (didDelete && (utils_1.isEmptyObject(node) || utils_1.isEmptyArray(node))) {\n      delete parent[key];\n    }\n  }\n\n  return {\n    any: {\n      enter: function enter(node, ctx) {\n        removeInternal(node, ctx);\n      }\n    }\n  };\n};\n\nexports.RemoveXInternal = RemoveXInternal;","map":null,"metadata":{},"sourceType":"script"}