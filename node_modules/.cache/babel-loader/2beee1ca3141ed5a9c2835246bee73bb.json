{"ast":null,"code":"import _toConsumableArray from\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _wrapRegExp from\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/esm/wrapRegExp.js\";import _objectSpread from\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import FuseUtils from'@fuse/utils';import _ from'@lodash';import mockApi from'../mock-api.json';import mock from'../mock';var boardsDB=mockApi.components.examples.scrumboard_boards.value;var labelsDB=mockApi.components.examples.scrumboard_labels.value;var cardsDB=mockApi.components.examples.scrumboard_cards.value;var membersDB=mockApi.components.examples.scrumboard_members.value;var listsDB=mockApi.components.examples.scrumboard_lists.value;/**\r\n * GET BOARDS\r\n * GET api/scrumboard/boards\r\n */mock.onGet('/api/scrumboard/boards').reply(function(config){return[200,boardsDB];});/**\r\n * CREATE NEW BOARD\r\n * POST api/scrumboard/boards\r\n */mock.onPost('/api/scrumboard/boards').reply(function(_ref){var data=_ref.data;var newBoard=_objectSpread({id:FuseUtils.generateGUID()},JSON.parse(data));boardsDB.push(newBoard);return[200,newBoard];});/**\r\n * GET BOARD LABELS\r\n * GET api/scrumboard/boards/{boardId}/labels\r\n */mock.onGet(/*#__PURE__*/_wrapRegExp(/\\/api\\/scrumboard\\/boards\\/([^/]+)\\/labels/,{id:1})).reply(function(config){var id=config.url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/scrumboard\\/boards\\/([^/]+)\\/labels/,{id:1})).groups.id;var labels=labelsDB.filter(function(item){return item.boardId===id;});return[200,labels];});/**\r\n * CREATE CARD\r\n * PUT api/scrumboard/boards/{boardId}/lists/{listId}/cards\r\n */mock.onPost(/*#__PURE__*/_wrapRegExp(/\\/api\\/scrumboard\\/boards\\/([^/]+)\\/lists\\/([^/]+)\\/cards/,{boardId:1,listId:2})).reply(function(_ref2){var url=_ref2.url,data=_ref2.data;var _url$match$groups=url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/scrumboard\\/boards\\/([^/]+)\\/lists\\/([^/]+)\\/cards/,{boardId:1,listId:2})).groups,boardId=_url$match$groups.boardId,listId=_url$match$groups.listId;var newCard=_objectSpread(_objectSpread({title:'',description:'',labels:[],dueDate:'',attachmentCoverId:'',memberIds:[],attachments:[],subscribed:true,checklists:[],activities:[]},JSON.parse(data)),{},{id:FuseUtils.generateGUID(),boardId:boardId,listId:listId});cardsDB.push(newCard);var board=_.find(boardsDB,{id:boardId});// Add card into board\n_.assign(board,_objectSpread(_objectSpread({},board),{},{lists:board.lists.map(function(list){return list.id===listId?_objectSpread(_objectSpread({},list),{},{cards:[].concat(_toConsumableArray(list.cards),[newCard.id])}):list;})}));return[200,newCard];});/**\r\n * UPDATE CARD\r\n * PUT api/scrumboard/boards/{boardId}/cards/{cardId}\r\n */mock.onPut(/*#__PURE__*/_wrapRegExp(/\\/api\\/scrumboard\\/boards\\/([^/]+)\\/cards\\/([^/]+)/,{boardId:1,cardId:2})).reply(function(_ref3){var url=_ref3.url,data=_ref3.data;var _url$match$groups2=url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/scrumboard\\/boards\\/([^/]+)\\/cards\\/([^/]+)/,{boardId:1,cardId:2})).groups,boardId=_url$match$groups2.boardId,cardId=_url$match$groups2.cardId;var card=_.find(cardsDB,{id:cardId});_.assign(card,JSON.parse(data));return[200,card];});/**\r\n * DELETE CARD\r\n * api/scrumboard/boards/{boardId}/cards/{cardId}\r\n */mock.onDelete(/*#__PURE__*/_wrapRegExp(/\\/api\\/scrumboard\\/boards\\/([^/]+)\\/cards\\/([^/]+)/,{boardId:1,cardId:2})).reply(function(config){var _config$url$match$gro=config.url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/scrumboard\\/boards\\/([^/]+)\\/cards\\/([^/]+)/,{boardId:1,cardId:2})).groups,boardId=_config$url$match$gro.boardId,cardId=_config$url$match$gro.cardId;var board=_.find(boardsDB,{id:boardId});// Remove cards from board\n_.assign(board,_objectSpread(_objectSpread({},board),{},{lists:board.lists.map(function(list){return _objectSpread(_objectSpread({},list),{},{cards:_.reject(list.cards,function(id){return id===cardId;})});})}));// Remove card\n_.remove(cardsDB,{id:cardId});return[200,cardId];});/** GET LISTS BY BOARD ID\r\n * GET /api/scrumboard/boards/{boardId}/lists\r\n */mock.onGet(/*#__PURE__*/_wrapRegExp(/\\/api\\/scrumboard\\/boards\\/([^/]+)\\/lists/,{id:1})).reply(function(config){var id=config.url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/scrumboard\\/boards\\/([^/]+)\\/lists/,{id:1})).groups.id;var lists=listsDB.filter(function(item){return item.boardId===id;});return[200,lists];});/**\r\n * UPDATE LIST\r\n * PUT api/scrumboard/boards/{boardId}/lists/{listId}\r\n */mock.onPut(/*#__PURE__*/_wrapRegExp(/\\/api\\/scrumboard\\/boards\\/([^/]+)\\/lists\\/([^/]+)/,{boardId:1,listId:2})).reply(function(_ref4){var url=_ref4.url,data=_ref4.data;var _url$match$groups3=url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/scrumboard\\/boards\\/([^/]+)\\/lists\\/([^/]+)/,{boardId:1,listId:2})).groups,boardId=_url$match$groups3.boardId,listId=_url$match$groups3.listId;var list=_.find(listsDB,{id:listId});_.assign(list,JSON.parse(data));return[200,list];});/**\r\n * CREATE LIST\r\n * POST api/scrumboard/boards/{boardId}/lists\r\n */mock.onPost(/*#__PURE__*/_wrapRegExp(/\\/api\\/scrumboard\\/boards\\/([^/]+)\\/lists/,{boardId:1})).reply(function(_ref5){var url=_ref5.url,data=_ref5.data;var boardId=url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/scrumboard\\/boards\\/([^/]+)\\/lists/,{boardId:1})).groups.boardId;var newList=_objectSpread({id:FuseUtils.generateGUID(),boardId:boardId},JSON.parse(data));listsDB.push(newList);var board=_.find(boardsDB,{id:boardId});// Add list into board\n_.assign(board,_objectSpread(_objectSpread({},board),{},{lists:[].concat(_toConsumableArray(board.lists),[{id:newList.id,cards:[]}])}));return[200,newList];});/**\r\n * DELETE LIST\r\n * DELETE api/scrumboard/boards/{boardId}/lists/{listId}\r\n */mock.onDelete(/*#__PURE__*/_wrapRegExp(/\\/api\\/scrumboard\\/boards\\/([^/]+)\\/lists\\/([^/]+)/,{boardId:1,listId:2})).reply(function(config){var _config$url$match$gro2=config.url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/scrumboard\\/boards\\/([^/]+)\\/lists\\/([^/]+)/,{boardId:1,listId:2})).groups,boardId=_config$url$match$gro2.boardId,listId=_config$url$match$gro2.listId;var board=_.find(boardsDB,{id:boardId});// Remove cards of the list\n_.remove(cardsDB,{listId:listId});// Remove list from board\n_.assign(board,_objectSpread(_objectSpread({},board),{},{lists:_.reject(board.lists,{id:listId})}));// Remove list\n_.remove(listsDB,{id:listId});return[200,listId];});/**\r\n * GET BOARD CARDS\r\n * GET api/scrumboard/boards/{boardId}/cards\r\n */mock.onGet(/*#__PURE__*/_wrapRegExp(/\\/api\\/scrumboard\\/boards\\/([^/]+)\\/cards/,{id:1})).reply(function(config){var id=config.url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/scrumboard\\/boards\\/([^/]+)\\/cards/,{id:1})).groups.id;var cards=cardsDB.filter(function(item){return item.boardId===id;});return[200,cards];});/**\r\n * GET BOARD\r\n * GET api/scrumboard/boards/{boardId}\r\n */mock.onGet(/\\/api\\/scrumboard\\/boards\\/[^/]+/).reply(function(config){var id=config.url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/scrumboard\\/boards\\/([^/]+)/,{id:1})).groups.id;var board=_.find(boardsDB,{id:id});if(board){return[200,board];}return[404,'Requested board do not exist.'];});/**\r\n * UPDATE BOARD\r\n * PUT api/scrumboard/boards/{boardId}\r\n */mock.onPut(/\\/api\\/scrumboard\\/boards\\/[^/]+/).reply(function(_ref6){var url=_ref6.url,data=_ref6.data;var id=url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/scrumboard\\/boards\\/([^/]+)/,{id:1})).groups.id;var board=_.find(boardsDB,{id:id});_.assign(board,_objectSpread(_objectSpread({},board),JSON.parse(data)));return[200,board];});/**\r\n * DELETE BOARD\r\n * DELETE api/scrumboard/boards/{boardId}\r\n */mock.onDelete(/\\/api\\/scrumboard\\/boards\\/[^/]+/).reply(function(_ref7){var url=_ref7.url;var id=url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/scrumboard\\/boards\\/([^/]+)/,{id:1})).groups.id;_.remove(boardsDB,{id:id});_.remove(cardsDB,{boardId:id});_.remove(listsDB,{boardId:id});return[200,id];});/**\r\n * GET ALL MEMBERS\r\n * GET api/scrumboard/members\r\n */mock.onGet('/api/scrumboard/members').reply(function(_ref8){var data=_ref8.data;return[200,membersDB];});","map":null,"metadata":{},"sourceType":"module"}