{"ast":null,"code":"Prism.languages.swift = {\n  'comment': {\n    // Nested comments are supported up to 2 levels\n    pattern: /(^|[^\\\\:])(?:\\/\\/.*|\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\/)/,\n    lookbehind: true,\n    greedy: true\n  },\n  'string-literal': [// https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html\n  {\n    pattern: RegExp(/(^|[^\"#])/.source + '(?:' // single-line string\n    + /\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^(])|[^\\\\\\r\\n\"])*\"/.source + '|' // multi-line string\n    + /\"\"\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|[^(])|[^\\\\\"]|\"(?!\"\"))*\"\"\"/.source + ')' + /(?![\"#])/.source),\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /(\\\\\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n        lookbehind: true,\n        inside: null // see below\n\n      },\n      'interpolation-punctuation': {\n        pattern: /^\\)|\\\\\\($/,\n        alias: 'punctuation'\n      },\n      'punctuation': /\\\\(?=[\\r\\n])/,\n      'string': /[\\s\\S]+/\n    }\n  }, {\n    pattern: RegExp(/(^|[^\"#])(#+)/.source + '(?:' // single-line string\n    + /\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^#])|[^\\\\\\r\\n])*?\"/.source + '|' // multi-line string\n    + /\"\"\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|[^#])|[^\\\\])*?\"\"\"/.source + ')' + '\\\\2'),\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /(\\\\#+\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n        lookbehind: true,\n        inside: null // see below\n\n      },\n      'interpolation-punctuation': {\n        pattern: /^\\)|\\\\#+\\($/,\n        alias: 'punctuation'\n      },\n      'string': /[\\s\\S]+/\n    }\n  }],\n  'directive': {\n    // directives with conditions\n    pattern: RegExp(/#/.source + '(?:' + (/(?:elseif|if)\\b/.source + '(?:[ \\t]*' // This regex is a little complex. It's equivalent to this:\n    //   (?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*<round>)?|<round>)(?:[ \\t]*(?:&&|\\|\\|))?\n    // where <round> is a general parentheses expression.\n    + /(?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*\\((?:[^()]|\\([^()]*\\))*\\))?|\\((?:[^()]|\\([^()]*\\))*\\))(?:[ \\t]*(?:&&|\\|\\|))?/.source + ')+') + '|' + /(?:else|endif)\\b/.source + ')'),\n    alias: 'property',\n    inside: {\n      'directive-name': /^#\\w+/,\n      'boolean': /\\b(?:false|true)\\b/,\n      'number': /\\b\\d+(?:\\.\\d+)*\\b/,\n      'operator': /!|&&|\\|\\||[<>]=?/,\n      'punctuation': /[(),]/\n    }\n  },\n  'literal': {\n    pattern: /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\b/,\n    alias: 'constant'\n  },\n  'other-directive': {\n    pattern: /#\\w+\\b/,\n    alias: 'property'\n  },\n  'attribute': {\n    pattern: /@\\w+/,\n    alias: 'atrule'\n  },\n  'function-definition': {\n    pattern: /(\\bfunc\\s+)\\w+/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'label': {\n    // https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141\n    pattern: /\\b(break|continue)\\s+\\w+|\\b[a-zA-Z_]\\w*(?=\\s*:\\s*(?:for|repeat|while)\\b)/,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'keyword': /\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'nil': {\n    pattern: /\\bnil\\b/,\n    alias: 'constant'\n  },\n  'short-argument': /\\$\\d+\\b/,\n  'omit': {\n    pattern: /\\b_\\b/,\n    alias: 'keyword'\n  },\n  'number': /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\n  // A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.\n  'class-name': /\\b[A-Z](?:[A-Z_\\d]*[a-z]\\w*)?\\b/,\n  'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\n  'constant': /\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\n  // Operators are generic in Swift. Developers can even create new operators (e.g. +++).\n  // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481\n  // This regex only supports ASCII operators.\n  'operator': /[-+*/%=!<>&|^~?]+|\\.[.\\-+*/%=!<>&|^~?]+/,\n  'punctuation': /[{}[\\]();,.:\\\\]/\n};\nPrism.languages.swift['string-literal'].forEach(function (rule) {\n  rule.inside['interpolation'].inside = Prism.languages.swift;\n});","map":{"version":3,"names":["Prism","languages","swift","pattern","lookbehind","greedy","RegExp","source","inside","alias","forEach","rule"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/prismjs/components/prism-swift.js"],"sourcesContent":["Prism.languages.swift = {\n\t'comment': {\n\t\t// Nested comments are supported up to 2 levels\n\t\tpattern: /(^|[^\\\\:])(?:\\/\\/.*|\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\/)/,\n\t\tlookbehind: true,\n\t\tgreedy: true\n\t},\n\t'string-literal': [\n\t\t// https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html\n\t\t{\n\t\t\tpattern: RegExp(\n\t\t\t\t/(^|[^\"#])/.source\n\t\t\t\t+ '(?:'\n\t\t\t\t// single-line string\n\t\t\t\t+ /\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^(])|[^\\\\\\r\\n\"])*\"/.source\n\t\t\t\t+ '|'\n\t\t\t\t// multi-line string\n\t\t\t\t+ /\"\"\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|[^(])|[^\\\\\"]|\"(?!\"\"))*\"\"\"/.source\n\t\t\t\t+ ')'\n\t\t\t\t+ /(?![\"#])/.source\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': {\n\t\t\t\t\tpattern: /(\\\\\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: null // see below\n\t\t\t\t},\n\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\tpattern: /^\\)|\\\\\\($/,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t},\n\t\t\t\t'punctuation': /\\\\(?=[\\r\\n])/,\n\t\t\t\t'string': /[\\s\\S]+/\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: RegExp(\n\t\t\t\t/(^|[^\"#])(#+)/.source\n\t\t\t\t+ '(?:'\n\t\t\t\t// single-line string\n\t\t\t\t+ /\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^#])|[^\\\\\\r\\n])*?\"/.source\n\t\t\t\t+ '|'\n\t\t\t\t// multi-line string\n\t\t\t\t+ /\"\"\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|[^#])|[^\\\\])*?\"\"\"/.source\n\t\t\t\t+ ')'\n\t\t\t\t+ '\\\\2'\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': {\n\t\t\t\t\tpattern: /(\\\\#+\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: null // see below\n\t\t\t\t},\n\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\tpattern: /^\\)|\\\\#+\\($/,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t},\n\t\t\t\t'string': /[\\s\\S]+/\n\t\t\t}\n\t\t},\n\t],\n\n\t'directive': {\n\t\t// directives with conditions\n\t\tpattern: RegExp(\n\t\t\t/#/.source\n\t\t\t+ '(?:'\n\t\t\t+ (\n\t\t\t\t/(?:elseif|if)\\b/.source\n\t\t\t\t+ '(?:[ \\t]*'\n\t\t\t\t// This regex is a little complex. It's equivalent to this:\n\t\t\t\t//   (?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*<round>)?|<round>)(?:[ \\t]*(?:&&|\\|\\|))?\n\t\t\t\t// where <round> is a general parentheses expression.\n\t\t\t\t+ /(?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*\\((?:[^()]|\\([^()]*\\))*\\))?|\\((?:[^()]|\\([^()]*\\))*\\))(?:[ \\t]*(?:&&|\\|\\|))?/.source\n\t\t\t\t+ ')+'\n\t\t\t)\n\t\t\t+ '|'\n\t\t\t+ /(?:else|endif)\\b/.source\n\t\t\t+ ')'\n\t\t),\n\t\talias: 'property',\n\t\tinside: {\n\t\t\t'directive-name': /^#\\w+/,\n\t\t\t'boolean': /\\b(?:false|true)\\b/,\n\t\t\t'number': /\\b\\d+(?:\\.\\d+)*\\b/,\n\t\t\t'operator': /!|&&|\\|\\||[<>]=?/,\n\t\t\t'punctuation': /[(),]/\n\t\t}\n\t},\n\t'literal': {\n\t\tpattern: /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\b/,\n\t\talias: 'constant'\n\t},\n\t'other-directive': {\n\t\tpattern: /#\\w+\\b/,\n\t\talias: 'property'\n\t},\n\n\t'attribute': {\n\t\tpattern: /@\\w+/,\n\t\talias: 'atrule'\n\t},\n\n\t'function-definition': {\n\t\tpattern: /(\\bfunc\\s+)\\w+/,\n\t\tlookbehind: true,\n\t\talias: 'function'\n\t},\n\t'label': {\n\t\t// https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141\n\t\tpattern: /\\b(break|continue)\\s+\\w+|\\b[a-zA-Z_]\\w*(?=\\s*:\\s*(?:for|repeat|while)\\b)/,\n\t\tlookbehind: true,\n\t\talias: 'important'\n\t},\n\n\t'keyword': /\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\b/,\n\t'boolean': /\\b(?:false|true)\\b/,\n\t'nil': {\n\t\tpattern: /\\bnil\\b/,\n\t\talias: 'constant'\n\t},\n\n\t'short-argument': /\\$\\d+\\b/,\n\t'omit': {\n\t\tpattern: /\\b_\\b/,\n\t\talias: 'keyword'\n\t},\n\t'number': /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\n\n\t// A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.\n\t'class-name': /\\b[A-Z](?:[A-Z_\\d]*[a-z]\\w*)?\\b/,\n\t'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\n\t'constant': /\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\n\n\t// Operators are generic in Swift. Developers can even create new operators (e.g. +++).\n\t// https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481\n\t// This regex only supports ASCII operators.\n\t'operator': /[-+*/%=!<>&|^~?]+|\\.[.\\-+*/%=!<>&|^~?]+/,\n\t'punctuation': /[{}[\\]();,.:\\\\]/\n};\n\nPrism.languages.swift['string-literal'].forEach(function (rule) {\n\trule.inside['interpolation'].inside = Prism.languages.swift;\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}