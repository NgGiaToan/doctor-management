{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NoHttpVerbsInPaths = void 0;\n\nvar utils_1 = require(\"../../utils\");\n\nvar httpMethods = ['get', 'head', 'post', 'put', 'patch', 'delete', 'options', 'trace'];\n\nvar NoHttpVerbsInPaths = function NoHttpVerbsInPaths(_ref) {\n  var splitIntoWords = _ref.splitIntoWords;\n  return {\n    PathItem: function PathItem(_path, _ref2) {\n      var key = _ref2.key,\n          report = _ref2.report,\n          location = _ref2.location;\n      var pathKey = key.toString();\n      if (!pathKey.startsWith('/')) return;\n      var pathSegments = pathKey.split('/');\n\n      var _iterator = _createForOfIteratorHelper(pathSegments),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var pathSegment = _step.value;\n          if (!pathSegment || utils_1.isPathParameter(pathSegment)) return \"continue\";\n\n          var isHttpMethodIncluded = function isHttpMethodIncluded(method) {\n            return splitIntoWords ? utils_1.splitCamelCaseIntoWords(pathSegment).has(method) : pathSegment.toLocaleLowerCase().includes(method);\n          };\n\n          var _iterator2 = _createForOfIteratorHelper(httpMethods),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var method = _step2.value;\n\n              if (isHttpMethodIncluded(method)) {\n                report({\n                  message: \"path `\".concat(pathKey, \"` should not contain http verb \").concat(method),\n                  location: location.key()\n                });\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _ret = _loop();\n\n          if (_ret === \"continue\") continue;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  };\n};\n\nexports.NoHttpVerbsInPaths = NoHttpVerbsInPaths;","map":null,"metadata":{},"sourceType":"script"}