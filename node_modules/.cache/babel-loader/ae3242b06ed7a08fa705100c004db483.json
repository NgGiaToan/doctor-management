{"ast":null,"code":"import { traverse } from '../traverse';\nexport function sampleArray(schema) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let spec = arguments.length > 2 ? arguments[2] : undefined;\n  let context = arguments.length > 3 ? arguments[3] : undefined;\n  const depth = context && context.depth || 1;\n  let arrayLength = Math.min(schema.maxItems != undefined ? schema.maxItems : Infinity, schema.minItems || 1); // for the sake of simplicity, we're treating `contains` in a similar way to `items`\n\n  const items = schema.items || schema.contains;\n\n  if (Array.isArray(items)) {\n    arrayLength = Math.max(arrayLength, items.length);\n  }\n\n  let itemSchemaGetter = itemNumber => {\n    if (Array.isArray(schema.items)) {\n      return items[itemNumber] || {};\n    }\n\n    return items || {};\n  };\n\n  let res = [];\n  if (!items) return res;\n\n  for (let i = 0; i < arrayLength; i++) {\n    let itemSchema = itemSchemaGetter(i);\n    let {\n      value: sample\n    } = traverse(itemSchema, options, spec, {\n      depth: depth + 1\n    });\n    res.push(sample);\n  }\n\n  return res;\n}","map":{"version":3,"names":["traverse","sampleArray","schema","options","spec","context","depth","arrayLength","Math","min","maxItems","undefined","Infinity","minItems","items","contains","Array","isArray","max","length","itemSchemaGetter","itemNumber","res","i","itemSchema","value","sample","push"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/openapi-sampler/src/samplers/array.js"],"sourcesContent":["import { traverse } from '../traverse';\nexport function sampleArray(schema, options = {}, spec, context) {\n  const depth = (context && context.depth || 1);\n\n  let arrayLength = Math.min(schema.maxItems != undefined ? schema.maxItems : Infinity, schema.minItems || 1);\n  // for the sake of simplicity, we're treating `contains` in a similar way to `items`\n  const items = schema.items || schema.contains;\n  if (Array.isArray(items)) {\n    arrayLength = Math.max(arrayLength, items.length);\n  }\n\n  let itemSchemaGetter = itemNumber => {\n    if (Array.isArray(schema.items)) {\n      return items[itemNumber] || {};\n    }\n    return items || {};\n  };\n\n  let res = [];\n  if (!items) return res;\n\n  for (let i = 0; i < arrayLength; i++) {\n    let itemSchema = itemSchemaGetter(i);\n    let { value: sample } = traverse(itemSchema, options, spec, {depth: depth + 1});\n    res.push(sample);\n  }\n  return res;\n}\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA0D;EAAA,IAA7BC,OAA6B,uEAAnB,EAAmB;EAAA,IAAfC,IAAe;EAAA,IAATC,OAAS;EAC/D,MAAMC,KAAK,GAAID,OAAO,IAAIA,OAAO,CAACC,KAAnB,IAA4B,CAA3C;EAEA,IAAIC,WAAW,GAAGC,IAAI,CAACC,GAAL,CAASP,MAAM,CAACQ,QAAP,IAAmBC,SAAnB,GAA+BT,MAAM,CAACQ,QAAtC,GAAiDE,QAA1D,EAAoEV,MAAM,CAACW,QAAP,IAAmB,CAAvF,CAAlB,CAH+D,CAI/D;;EACA,MAAMC,KAAK,GAAGZ,MAAM,CAACY,KAAP,IAAgBZ,MAAM,CAACa,QAArC;;EACA,IAAIC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;IACxBP,WAAW,GAAGC,IAAI,CAACU,GAAL,CAASX,WAAT,EAAsBO,KAAK,CAACK,MAA5B,CAAd;EACD;;EAED,IAAIC,gBAAgB,GAAGC,UAAU,IAAI;IACnC,IAAIL,KAAK,CAACC,OAAN,CAAcf,MAAM,CAACY,KAArB,CAAJ,EAAiC;MAC/B,OAAOA,KAAK,CAACO,UAAD,CAAL,IAAqB,EAA5B;IACD;;IACD,OAAOP,KAAK,IAAI,EAAhB;EACD,CALD;;EAOA,IAAIQ,GAAG,GAAG,EAAV;EACA,IAAI,CAACR,KAAL,EAAY,OAAOQ,GAAP;;EAEZ,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,WAApB,EAAiCgB,CAAC,EAAlC,EAAsC;IACpC,IAAIC,UAAU,GAAGJ,gBAAgB,CAACG,CAAD,CAAjC;IACA,IAAI;MAAEE,KAAK,EAAEC;IAAT,IAAoB1B,QAAQ,CAACwB,UAAD,EAAarB,OAAb,EAAsBC,IAAtB,EAA4B;MAACE,KAAK,EAAEA,KAAK,GAAG;IAAhB,CAA5B,CAAhC;IACAgB,GAAG,CAACK,IAAJ,CAASD,MAAT;EACD;;EACD,OAAOJ,GAAP;AACD"},"metadata":{},"sourceType":"module"}