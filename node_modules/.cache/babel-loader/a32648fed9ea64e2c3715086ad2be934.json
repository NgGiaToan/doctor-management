{"ast":null,"code":"var removeDiacritics = require('diacritic').clean; // https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_special_characters\n\n\nvar specialCharsRegex = /[.*+?^${}()|[\\]\\\\]/g; // http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.2.6\n\nvar wordCharacterRegex = /[a-z0-9_]/i;\nvar whitespacesRegex = /\\s+/;\n\nfunction escapeRegexCharacters(str) {\n  return str.replace(specialCharsRegex, '\\\\$&');\n}\n\nfunction extend(subject, baseObject) {\n  subject = subject || {};\n  Object.keys(subject).forEach(function (key) {\n    baseObject[key] = !!subject[key];\n  });\n  return baseObject;\n}\n\nmodule.exports = function match(text, query, options) {\n  options = extend(options, {\n    insideWords: false,\n    findAllOccurrences: false,\n    requireMatchAll: false\n  });\n  var cleanedTextArray = Array.from(text).map(function (x) {\n    return removeDiacritics(x);\n  });\n  var cleanedText = cleanedTextArray.join('');\n  query = removeDiacritics(query);\n  return query.trim().split(whitespacesRegex) // If query is blank, we'll get empty string here, so let's filter it out.\n  .filter(function (word) {\n    return word.length > 0;\n  }).reduce(function (result, word) {\n    var wordLen = word.length;\n    var prefix = !options.insideWords && wordCharacterRegex.test(word[0]) ? '\\\\b' : '';\n    var regex = new RegExp(prefix + escapeRegexCharacters(word), 'i');\n    var occurrence, index;\n    occurrence = regex.exec(cleanedText);\n\n    if (options.requireMatchAll && occurrence === null) {\n      cleanedText = '';\n      return [];\n    }\n\n    while (occurrence) {\n      index = occurrence.index;\n      var cleanedLength = cleanedTextArray.slice(index, index + wordLen).join('').length;\n      var offset = wordLen - cleanedLength;\n      var initialOffset = index - cleanedTextArray.slice(0, index).join('').length;\n      var wordOffset = offset;\n      var indexes = [index + initialOffset, index + wordLen + initialOffset + wordOffset];\n\n      if (indexes[0] !== indexes[1]) {\n        result.push(indexes);\n      } // Replace what we just found with spaces so we don't find it again.\n\n\n      cleanedText = cleanedText.slice(0, index) + new Array(wordLen + 1).join(' ') + cleanedText.slice(index + wordLen);\n\n      if (!options.findAllOccurrences) {\n        break;\n      }\n\n      occurrence = regex.exec(cleanedText);\n    }\n\n    return result;\n  }, []).sort(function (match1, match2) {\n    return match1[0] - match2[0];\n  });\n};","map":null,"metadata":{},"sourceType":"script"}