{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RemoveUnusedComponents = void 0;\n\nvar utils_1 = require(\"../../utils\");\n\nvar RemoveUnusedComponents = function RemoveUnusedComponents() {\n  var components = new Map();\n\n  function registerComponent(location, componentType, name) {\n    var _a;\n\n    components.set(location.absolutePointer, {\n      used: ((_a = components.get(location.absolutePointer)) === null || _a === void 0 ? void 0 : _a.used) || false,\n      componentType: componentType,\n      name: name\n    });\n  }\n\n  return {\n    ref: {\n      leave: function leave(ref, _ref) {\n        var type = _ref.type,\n            resolve = _ref.resolve,\n            key = _ref.key;\n\n        if (['Schema', 'Header', 'Parameter', 'Response', 'Example', 'RequestBody'].includes(type.name)) {\n          var resolvedRef = resolve(ref);\n          if (!resolvedRef.location) return;\n          components.set(resolvedRef.location.absolutePointer, {\n            used: true,\n            name: key.toString()\n          });\n        }\n      }\n    },\n    DefinitionRoot: {\n      leave: function leave(root, ctx) {\n        var data = ctx.getVisitorData();\n        data.removedCount = 0;\n        components.forEach(function (usageInfo) {\n          var used = usageInfo.used,\n              componentType = usageInfo.componentType,\n              name = usageInfo.name;\n\n          if (!used && componentType) {\n            var componentChild = root.components[componentType];\n            delete componentChild[name];\n            data.removedCount++;\n\n            if (utils_1.isEmptyObject(componentChild)) {\n              delete root.components[componentType];\n            }\n          }\n        });\n\n        if (utils_1.isEmptyObject(root.components)) {\n          delete root.components;\n        }\n      }\n    },\n    NamedSchemas: {\n      Schema: function Schema(schema, _ref2) {\n        var location = _ref2.location,\n            key = _ref2.key;\n\n        if (!schema.allOf) {\n          registerComponent(location, 'schemas', key.toString());\n        }\n      }\n    },\n    NamedParameters: {\n      Parameter: function Parameter(_parameter, _ref3) {\n        var location = _ref3.location,\n            key = _ref3.key;\n        registerComponent(location, 'parameters', key.toString());\n      }\n    },\n    NamedResponses: {\n      Response: function Response(_response, _ref4) {\n        var location = _ref4.location,\n            key = _ref4.key;\n        registerComponent(location, 'responses', key.toString());\n      }\n    },\n    NamedExamples: {\n      Example: function Example(_example, _ref5) {\n        var location = _ref5.location,\n            key = _ref5.key;\n        registerComponent(location, 'examples', key.toString());\n      }\n    },\n    NamedRequestBodies: {\n      RequestBody: function RequestBody(_requestBody, _ref6) {\n        var location = _ref6.location,\n            key = _ref6.key;\n        registerComponent(location, 'requestBodies', key.toString());\n      }\n    },\n    NamedHeaders: {\n      Header: function Header(_header, _ref7) {\n        var location = _ref7.location,\n            key = _ref7.key;\n        registerComponent(location, 'headers', key.toString());\n      }\n    }\n  };\n};\n\nexports.RemoveUnusedComponents = RemoveUnusedComponents;","map":null,"metadata":{},"sourceType":"script"}