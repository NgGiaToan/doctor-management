{"ast":null,"code":"import _defineProperty from\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _asyncToGenerator from\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";var _extraReducers;import _regeneratorRuntime from\"C:\\\\Users\\\\giato\\\\Downloads\\\\Workspace\\\\.Net\\\\api\\\\doctor-management-fe\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import{createAsyncThunk,createEntityAdapter,createSelector,createSlice}from'@reduxjs/toolkit';import axios from'axios';import FuseUtils from'@fuse/utils';import{addContact,removeContact,updateContact}from'./contactSlice';export var getContacts=createAsyncThunk('contactsApp/contacts/getContacts',/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(params,_ref){var getState,response,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:getState=_ref.getState;_context.next=3;return axios.get('/api/contacts');case 3:response=_context.sent;_context.next=6;return response.data;case 6:data=_context.sent;return _context.abrupt(\"return\",{data:data});case 8:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref2.apply(this,arguments);};}());var contactsAdapter=createEntityAdapter({});export var selectSearchText=function selectSearchText(_ref3){var contactsApp=_ref3.contactsApp;return contactsApp.contacts.searchText;};var _contactsAdapter$getS=contactsAdapter.getSelectors(function(state){return state.contactsApp.contacts;}),selectContacts=_contactsAdapter$getS.selectAll,selectContactsById=_contactsAdapter$getS.selectById;export{selectContacts,selectContactsById};export var selectFilteredContacts=createSelector([selectContacts,selectSearchText],function(contacts,searchText){if(searchText.length===0){return contacts;}return FuseUtils.filterArrayByString(contacts,searchText);});export var selectGroupedFilteredContacts=createSelector([selectFilteredContacts],function(contacts){return contacts.sort(function(a,b){return a.name.localeCompare(b.name,'es',{sensitivity:'base'});}).reduce(function(r,e){// get first letter of name of current element\nvar group=e.name[0];// if there is no property in accumulator with this letter create it\nif(!r[group])r[group]={group:group,children:[e]};// if there is push current element to children array for that letter\nelse r[group].children.push(e);// return accumulator\nreturn r;},{});});var contactsSlice=createSlice({name:'contactsApp/contacts',initialState:contactsAdapter.getInitialState({searchText:''}),reducers:{setContactsSearchText:{reducer:function reducer(state,action){state.searchText=action.payload;},prepare:function prepare(event){return{payload:event.target.value||''};}}},extraReducers:(_extraReducers={},_defineProperty(_extraReducers,updateContact.fulfilled,contactsAdapter.upsertOne),_defineProperty(_extraReducers,addContact.fulfilled,contactsAdapter.addOne),_defineProperty(_extraReducers,removeContact.fulfilled,function(state,action){return contactsAdapter.removeOne(state,action.payload);}),_defineProperty(_extraReducers,getContacts.fulfilled,function(state,action){var _action$payload=action.payload,data=_action$payload.data,routeParams=_action$payload.routeParams;contactsAdapter.setAll(state,data);state.searchText='';}),_extraReducers)});var setContactsSearchText=contactsSlice.actions.setContactsSearchText;export{setContactsSearchText};export default contactsSlice.reducer;","map":null,"metadata":{},"sourceType":"module"}