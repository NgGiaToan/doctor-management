{"ast":null,"code":"import { traverse } from './traverse';\nimport { mergeDeep } from './utils';\nexport function allOfSample(into, children, options, spec, context) {\n  let res = traverse(into, options, spec);\n  const subSamples = [];\n\n  for (let subSchema of children) {\n    const {\n      type,\n      readOnly,\n      writeOnly,\n      value\n    } = traverse({\n      type: res.type,\n      ...subSchema\n    }, options, spec, context);\n\n    if (res.type && type && type !== res.type) {\n      console.warn('allOf: schemas with different types can\\'t be merged');\n      res.type = type;\n    }\n\n    res.type = res.type || type;\n    res.readOnly = res.readOnly || readOnly;\n    res.writeOnly = res.writeOnly || writeOnly;\n    if (value != null) subSamples.push(value);\n  }\n\n  if (res.type === 'object') {\n    res.value = mergeDeep(res.value || {}, ...subSamples.filter(sample => typeof sample === 'object'));\n    return res;\n  } else {\n    if (res.type === 'array') {\n      // TODO: implement arrays\n      if (!options.quiet) console.warn('OpenAPI Sampler: found allOf with \"array\" type. Result may be incorrect');\n    }\n\n    const lastSample = subSamples[subSamples.length - 1];\n    res.value = lastSample != null ? lastSample : res.value;\n    return res;\n  }\n}","map":{"version":3,"names":["traverse","mergeDeep","allOfSample","into","children","options","spec","context","res","subSamples","subSchema","type","readOnly","writeOnly","value","console","warn","push","filter","sample","quiet","lastSample","length"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/openapi-sampler/src/allOf.js"],"sourcesContent":["import { traverse } from './traverse';\nimport { mergeDeep } from './utils';\n\nexport function allOfSample(into, children, options, spec, context) {\n  let res = traverse(into, options, spec);\n  const subSamples = [];\n\n  for (let subSchema of children) {\n    const { type, readOnly, writeOnly, value } = traverse({ type: res.type, ...subSchema }, options, spec, context);\n    if (res.type && type && type !== res.type) {\n      console.warn('allOf: schemas with different types can\\'t be merged');\n      res.type = type;\n    }\n    res.type = res.type || type;\n    res.readOnly = res.readOnly || readOnly;\n    res.writeOnly = res.writeOnly || writeOnly;\n    if (value != null) subSamples.push(value);\n  }\n\n  if (res.type === 'object') {\n    res.value = mergeDeep(res.value || {}, ...subSamples.filter(sample => typeof sample === 'object'));\n    return res;\n  } else {\n    if (res.type === 'array') {\n      // TODO: implement arrays\n      if (!options.quiet) console.warn('OpenAPI Sampler: found allOf with \"array\" type. Result may be incorrect');\n    }\n    const lastSample = subSamples[subSamples.length - 1];\n    res.value = lastSample != null ? lastSample : res.value;\n    return res;\n  }\n}\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,YAAzB;AACA,SAASC,SAAT,QAA0B,SAA1B;AAEA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,QAA3B,EAAqCC,OAArC,EAA8CC,IAA9C,EAAoDC,OAApD,EAA6D;EAClE,IAAIC,GAAG,GAAGR,QAAQ,CAACG,IAAD,EAAOE,OAAP,EAAgBC,IAAhB,CAAlB;EACA,MAAMG,UAAU,GAAG,EAAnB;;EAEA,KAAK,IAAIC,SAAT,IAAsBN,QAAtB,EAAgC;IAC9B,MAAM;MAAEO,IAAF;MAAQC,QAAR;MAAkBC,SAAlB;MAA6BC;IAA7B,IAAuCd,QAAQ,CAAC;MAAEW,IAAI,EAAEH,GAAG,CAACG,IAAZ;MAAkB,GAAGD;IAArB,CAAD,EAAmCL,OAAnC,EAA4CC,IAA5C,EAAkDC,OAAlD,CAArD;;IACA,IAAIC,GAAG,CAACG,IAAJ,IAAYA,IAAZ,IAAoBA,IAAI,KAAKH,GAAG,CAACG,IAArC,EAA2C;MACzCI,OAAO,CAACC,IAAR,CAAa,sDAAb;MACAR,GAAG,CAACG,IAAJ,GAAWA,IAAX;IACD;;IACDH,GAAG,CAACG,IAAJ,GAAWH,GAAG,CAACG,IAAJ,IAAYA,IAAvB;IACAH,GAAG,CAACI,QAAJ,GAAeJ,GAAG,CAACI,QAAJ,IAAgBA,QAA/B;IACAJ,GAAG,CAACK,SAAJ,GAAgBL,GAAG,CAACK,SAAJ,IAAiBA,SAAjC;IACA,IAAIC,KAAK,IAAI,IAAb,EAAmBL,UAAU,CAACQ,IAAX,CAAgBH,KAAhB;EACpB;;EAED,IAAIN,GAAG,CAACG,IAAJ,KAAa,QAAjB,EAA2B;IACzBH,GAAG,CAACM,KAAJ,GAAYb,SAAS,CAACO,GAAG,CAACM,KAAJ,IAAa,EAAd,EAAkB,GAAGL,UAAU,CAACS,MAAX,CAAkBC,MAAM,IAAI,OAAOA,MAAP,KAAkB,QAA9C,CAArB,CAArB;IACA,OAAOX,GAAP;EACD,CAHD,MAGO;IACL,IAAIA,GAAG,CAACG,IAAJ,KAAa,OAAjB,EAA0B;MACxB;MACA,IAAI,CAACN,OAAO,CAACe,KAAb,EAAoBL,OAAO,CAACC,IAAR,CAAa,yEAAb;IACrB;;IACD,MAAMK,UAAU,GAAGZ,UAAU,CAACA,UAAU,CAACa,MAAX,GAAoB,CAArB,CAA7B;IACAd,GAAG,CAACM,KAAJ,GAAYO,UAAU,IAAI,IAAd,GAAqBA,UAArB,GAAkCb,GAAG,CAACM,KAAlD;IACA,OAAON,GAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}