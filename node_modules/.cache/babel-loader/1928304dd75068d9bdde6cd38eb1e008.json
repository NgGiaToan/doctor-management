{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BooleanParameterPrefixes = void 0;\n\nconst BooleanParameterPrefixes = options => {\n  const prefixes = options.prefixes || ['is', 'has'];\n  const regexp = new RegExp(`^(${prefixes.join('|')})[A-Z-_]`);\n  const wrappedPrefixes = prefixes.map(p => `\\`${p}\\``);\n  const prefixesString = wrappedPrefixes.length === 1 ? wrappedPrefixes[0] : wrappedPrefixes.slice(0, -1).join(', ') + ' or ' + wrappedPrefixes[prefixes.length - 1];\n  return {\n    Parameter(param, _ref) {\n      let {\n        report,\n        location\n      } = _ref;\n\n      if (param.type === 'boolean' && !regexp.test(param.name)) {\n        report({\n          message: `Boolean parameter \\`${param.name}\\` should have ${prefixesString} prefix.`,\n          location: location.child('name')\n        });\n      }\n    }\n\n  };\n};\n\nexports.BooleanParameterPrefixes = BooleanParameterPrefixes;","map":{"version":3,"names":["Object","defineProperty","exports","value","BooleanParameterPrefixes","options","prefixes","regexp","RegExp","join","wrappedPrefixes","map","p","prefixesString","length","slice","Parameter","param","report","location","type","test","name","message","child"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@redocly/openapi-core/lib/rules/oas2/boolean-parameter-prefixes.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BooleanParameterPrefixes = void 0;\nconst BooleanParameterPrefixes = (options) => {\n    const prefixes = options.prefixes || ['is', 'has'];\n    const regexp = new RegExp(`^(${prefixes.join('|')})[A-Z-_]`);\n    const wrappedPrefixes = prefixes.map((p) => `\\`${p}\\``);\n    const prefixesString = wrappedPrefixes.length === 1\n        ? wrappedPrefixes[0]\n        : wrappedPrefixes.slice(0, -1).join(', ') + ' or ' + wrappedPrefixes[prefixes.length - 1];\n    return {\n        Parameter(param, { report, location }) {\n            if (param.type === 'boolean' && !regexp.test(param.name)) {\n                report({\n                    message: `Boolean parameter \\`${param.name}\\` should have ${prefixesString} prefix.`,\n                    location: location.child('name'),\n                });\n            }\n        },\n    };\n};\nexports.BooleanParameterPrefixes = BooleanParameterPrefixes;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,wBAAR,GAAmC,KAAK,CAAxC;;AACA,MAAMA,wBAAwB,GAAIC,OAAD,IAAa;EAC1C,MAAMC,QAAQ,GAAGD,OAAO,CAACC,QAAR,IAAoB,CAAC,IAAD,EAAO,KAAP,CAArC;EACA,MAAMC,MAAM,GAAG,IAAIC,MAAJ,CAAY,KAAIF,QAAQ,CAACG,IAAT,CAAc,GAAd,CAAmB,UAAnC,CAAf;EACA,MAAMC,eAAe,GAAGJ,QAAQ,CAACK,GAAT,CAAcC,CAAD,IAAQ,KAAIA,CAAE,IAA3B,CAAxB;EACA,MAAMC,cAAc,GAAGH,eAAe,CAACI,MAAhB,KAA2B,CAA3B,GACjBJ,eAAe,CAAC,CAAD,CADE,GAEjBA,eAAe,CAACK,KAAhB,CAAsB,CAAtB,EAAyB,CAAC,CAA1B,EAA6BN,IAA7B,CAAkC,IAAlC,IAA0C,MAA1C,GAAmDC,eAAe,CAACJ,QAAQ,CAACQ,MAAT,GAAkB,CAAnB,CAFxE;EAGA,OAAO;IACHE,SAAS,CAACC,KAAD,QAA8B;MAAA,IAAtB;QAAEC,MAAF;QAAUC;MAAV,CAAsB;;MACnC,IAAIF,KAAK,CAACG,IAAN,KAAe,SAAf,IAA4B,CAACb,MAAM,CAACc,IAAP,CAAYJ,KAAK,CAACK,IAAlB,CAAjC,EAA0D;QACtDJ,MAAM,CAAC;UACHK,OAAO,EAAG,uBAAsBN,KAAK,CAACK,IAAK,kBAAiBT,cAAe,UADxE;UAEHM,QAAQ,EAAEA,QAAQ,CAACK,KAAT,CAAe,MAAf;QAFP,CAAD,CAAN;MAIH;IACJ;;EARE,CAAP;AAUH,CAjBD;;AAkBAtB,OAAO,CAACE,wBAAR,GAAmCA,wBAAnC"},"metadata":{},"sourceType":"script"}