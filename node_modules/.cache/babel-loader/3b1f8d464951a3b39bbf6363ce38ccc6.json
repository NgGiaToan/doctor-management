{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _slicedToArray = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getUniquePlugins = exports.getResolveConfig = exports.transformConfig = exports.getMergedConfig = exports.mergeExtends = exports.prefixRules = exports.transformApiDefinitionsToApis = exports.parsePresetName = void 0;\n\nvar colorette_1 = require(\"colorette\");\n\nvar utils_1 = require(\"../utils\");\n\nvar config_1 = require(\"./config\");\n\nfunction parsePresetName(presetName) {\n  if (presetName.indexOf('/') > -1) {\n    var _presetName$split = presetName.split('/'),\n        _presetName$split2 = _slicedToArray(_presetName$split, 2),\n        pluginId = _presetName$split2[0],\n        configName = _presetName$split2[1];\n\n    return {\n      pluginId: pluginId,\n      configName: configName\n    };\n  } else {\n    return {\n      pluginId: '',\n      configName: presetName\n    };\n  }\n}\n\nexports.parsePresetName = parsePresetName;\n\nfunction transformApiDefinitionsToApis() {\n  var apiDefinitions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var apis = {};\n\n  for (var _i = 0, _Object$entries = Object.entries(apiDefinitions); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        apiName = _Object$entries$_i[0],\n        apiPath = _Object$entries$_i[1];\n\n    apis[apiName] = {\n      root: apiPath\n    };\n  }\n\n  return apis;\n}\n\nexports.transformApiDefinitionsToApis = transformApiDefinitionsToApis;\n\nfunction prefixRules(rules, prefix) {\n  if (!prefix) return rules;\n  var res = {};\n\n  for (var _i2 = 0, _Object$keys = Object.keys(rules); _i2 < _Object$keys.length; _i2++) {\n    var name = _Object$keys[_i2];\n    res[\"\".concat(prefix, \"/\").concat(name)] = rules[name];\n  }\n\n  return res;\n}\n\nexports.prefixRules = prefixRules;\n\nfunction mergeExtends(rulesConfList) {\n  var result = {\n    rules: {},\n    oas2Rules: {},\n    oas3_0Rules: {},\n    oas3_1Rules: {},\n    preprocessors: {},\n    oas2Preprocessors: {},\n    oas3_0Preprocessors: {},\n    oas3_1Preprocessors: {},\n    decorators: {},\n    oas2Decorators: {},\n    oas3_0Decorators: {},\n    oas3_1Decorators: {},\n    plugins: [],\n    pluginPaths: [],\n    extendPaths: []\n  };\n\n  var _iterator = _createForOfIteratorHelper(rulesConfList),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _result$plugins, _result$pluginPaths, _result$extendPaths;\n\n      var rulesConf = _step.value;\n\n      if (rulesConf.extends) {\n        throw new Error(\"`extends` is not supported in shared configs yet: \".concat(JSON.stringify(rulesConf, null, 2), \".\"));\n      }\n\n      Object.assign(result.rules, rulesConf.rules);\n      Object.assign(result.oas2Rules, rulesConf.oas2Rules);\n      utils_1.assignExisting(result.oas2Rules, rulesConf.rules || {});\n      Object.assign(result.oas3_0Rules, rulesConf.oas3_0Rules);\n      utils_1.assignExisting(result.oas3_0Rules, rulesConf.rules || {});\n      Object.assign(result.oas3_1Rules, rulesConf.oas3_1Rules);\n      utils_1.assignExisting(result.oas3_1Rules, rulesConf.rules || {});\n      Object.assign(result.preprocessors, rulesConf.preprocessors);\n      Object.assign(result.oas2Preprocessors, rulesConf.oas2Preprocessors);\n      utils_1.assignExisting(result.oas2Preprocessors, rulesConf.preprocessors || {});\n      Object.assign(result.oas3_0Preprocessors, rulesConf.oas3_0Preprocessors);\n      utils_1.assignExisting(result.oas3_0Preprocessors, rulesConf.preprocessors || {});\n      Object.assign(result.oas3_1Preprocessors, rulesConf.oas3_1Preprocessors);\n      utils_1.assignExisting(result.oas3_1Preprocessors, rulesConf.preprocessors || {});\n      Object.assign(result.decorators, rulesConf.decorators);\n      Object.assign(result.oas2Decorators, rulesConf.oas2Decorators);\n      utils_1.assignExisting(result.oas2Decorators, rulesConf.decorators || {});\n      Object.assign(result.oas3_0Decorators, rulesConf.oas3_0Decorators);\n      utils_1.assignExisting(result.oas3_0Decorators, rulesConf.decorators || {});\n      Object.assign(result.oas3_1Decorators, rulesConf.oas3_1Decorators);\n      utils_1.assignExisting(result.oas3_1Decorators, rulesConf.decorators || {});\n\n      (_result$plugins = result.plugins).push.apply(_result$plugins, _toConsumableArray(rulesConf.plugins || []));\n\n      (_result$pluginPaths = result.pluginPaths).push.apply(_result$pluginPaths, _toConsumableArray(rulesConf.pluginPaths || []));\n\n      (_result$extendPaths = result.extendPaths).push.apply(_result$extendPaths, _toConsumableArray(new Set(rulesConf.extendPaths)));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return result;\n}\n\nexports.mergeExtends = mergeExtends;\n\nfunction getMergedConfig(config, entrypointAlias) {\n  var _a, _b, _c, _d, _e, _f;\n\n  var extendPaths = [].concat(_toConsumableArray(Object.values(config.apis).map(function (api) {\n    var _a;\n\n    return (_a = api === null || api === void 0 ? void 0 : api.lint) === null || _a === void 0 ? void 0 : _a.extendPaths;\n  })), [(_b = (_a = config.rawConfig) === null || _a === void 0 ? void 0 : _a.lint) === null || _b === void 0 ? void 0 : _b.extendPaths]).flat().filter(Boolean);\n  var pluginPaths = [].concat(_toConsumableArray(Object.values(config.apis).map(function (api) {\n    var _a;\n\n    return (_a = api === null || api === void 0 ? void 0 : api.lint) === null || _a === void 0 ? void 0 : _a.pluginPaths;\n  })), [(_d = (_c = config.rawConfig) === null || _c === void 0 ? void 0 : _c.lint) === null || _d === void 0 ? void 0 : _d.pluginPaths]).flat().filter(Boolean);\n  return entrypointAlias ? new config_1.Config(Object.assign(Object.assign({}, config.rawConfig), {\n    lint: Object.assign(Object.assign({}, config.apis[entrypointAlias] ? config.apis[entrypointAlias].lint : config.rawConfig.lint), {\n      extendPaths: extendPaths,\n      pluginPaths: pluginPaths\n    }),\n    'features.openapi': Object.assign(Object.assign({}, config['features.openapi']), (_e = config.apis[entrypointAlias]) === null || _e === void 0 ? void 0 : _e['features.openapi']),\n    'features.mockServer': Object.assign(Object.assign({}, config['features.mockServer']), (_f = config.apis[entrypointAlias]) === null || _f === void 0 ? void 0 : _f['features.mockServer'])\n  }), config.configFile) : config;\n}\n\nexports.getMergedConfig = getMergedConfig;\n\nfunction transformConfig(rawConfig) {\n  if (rawConfig.apis && rawConfig.apiDefinitions) {\n    throw new Error(\"Do not use 'apiDefinitions' field. Use 'apis' instead.\\n\");\n  }\n\n  if (rawConfig['features.openapi'] && rawConfig.referenceDocs) {\n    throw new Error(\"Do not use 'referenceDocs' field. Use 'features.openapi' instead.\\n\");\n  }\n\n  var _a = rawConfig,\n      apiDefinitions = _a.apiDefinitions,\n      referenceDocs = _a.referenceDocs,\n      rest = __rest(_a, [\"apiDefinitions\", \"referenceDocs\"]);\n\n  if (apiDefinitions) {\n    process.stderr.write(\"The \".concat(colorette_1.yellow('apiDefinitions'), \" field is deprecated. Use \").concat(colorette_1.green('apis'), \" instead. Read more about this change: https://redocly.com/docs/api-registry/guides/migration-guide-config-file/#changed-properties\\n\"));\n  }\n\n  if (referenceDocs) {\n    process.stderr.write(\"The \".concat(colorette_1.yellow('referenceDocs'), \" field is deprecated. Use \").concat(colorette_1.green('features.openapi'), \" instead. Read more about this change: https://redocly.com/docs/api-registry/guides/migration-guide-config-file/#changed-properties\\n\"));\n  }\n\n  return Object.assign({\n    'features.openapi': referenceDocs,\n    apis: transformApiDefinitionsToApis(apiDefinitions)\n  }, rest);\n}\n\nexports.transformConfig = transformConfig;\n\nfunction getResolveConfig(resolve) {\n  var _a, _b;\n\n  return {\n    http: {\n      headers: (_b = (_a = resolve === null || resolve === void 0 ? void 0 : resolve.http) === null || _a === void 0 ? void 0 : _a.headers) !== null && _b !== void 0 ? _b : [],\n      customFetch: undefined\n    }\n  };\n}\n\nexports.getResolveConfig = getResolveConfig;\n\nfunction getUniquePlugins(plugins) {\n  var seen = new Set();\n  var results = [];\n\n  var _iterator2 = _createForOfIteratorHelper(plugins),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var p = _step2.value;\n\n      if (!seen.has(p.id)) {\n        results.push(p);\n        seen.add(p.id);\n      } else if (p.id) {\n        process.stderr.write(\"Duplicate plugin id \\\"\".concat(colorette_1.yellow(p.id), \"\\\".\\n\"));\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return results;\n}\n\nexports.getUniquePlugins = getUniquePlugins;","map":null,"metadata":{},"sourceType":"script"}