{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useTheme } from '@mui/material/styles';\n\nfunction useThemeMediaQuery(themeCallbackFunc) {\n  _s();\n\n  const theme = useTheme();\n  const query = themeCallbackFunc(theme).replace('@media ', '');\n  const [matches, setMatches] = useState(getMatches(query));\n\n  function getMatches(q) {\n    return window.matchMedia(q).matches;\n  }\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia(query); // Update the state with the current value\n\n    setMatches(getMatches(query)); // Create an event listener\n\n    const handler = event => setMatches(event.matches); // Attach the event listener to know when the matches value changes\n\n\n    mediaQuery.addEventListener('change', handler); // Remove the event listener on cleanup\n\n    return () => mediaQuery.removeEventListener('change', handler);\n  }, [query] // Empty array ensures effect is only run on mount and unmount\n  );\n  return matches;\n}\n\n_s(useThemeMediaQuery, \"WirUL6Q7hAYPu72UK83mTHVwrrY=\", false, function () {\n  return [useTheme];\n});\n\nexport default useThemeMediaQuery;","map":{"version":3,"names":["useEffect","useState","useTheme","useThemeMediaQuery","themeCallbackFunc","theme","query","replace","matches","setMatches","getMatches","q","window","matchMedia","mediaQuery","handler","event","addEventListener","removeEventListener"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/src/@fuse/hooks/useThemeMediaQuery.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nfunction useThemeMediaQuery(themeCallbackFunc) {\r\n  const theme = useTheme();\r\n\r\n  const query = themeCallbackFunc(theme).replace('@media ', '');\r\n\r\n  const [matches, setMatches] = useState(getMatches(query));\r\n\r\n  function getMatches(q) {\r\n    return window.matchMedia(q).matches;\r\n  }\r\n\r\n  useEffect(\r\n    () => {\r\n      const mediaQuery = window.matchMedia(query);\r\n      // Update the state with the current value\r\n      setMatches(getMatches(query));\r\n      // Create an event listener\r\n      const handler = (event) => setMatches(event.matches);\r\n      // Attach the event listener to know when the matches value changes\r\n      mediaQuery.addEventListener('change', handler);\r\n      // Remove the event listener on cleanup\r\n      return () => mediaQuery.removeEventListener('change', handler);\r\n    },\r\n    [query] // Empty array ensures effect is only run on mount and unmount\r\n  );\r\n\r\n  return matches;\r\n}\r\n\r\nexport default useThemeMediaQuery;\r\n"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,sBAAzB;;AAEA,SAASC,kBAAT,CAA4BC,iBAA5B,EAA+C;EAAA;;EAC7C,MAAMC,KAAK,GAAGH,QAAQ,EAAtB;EAEA,MAAMI,KAAK,GAAGF,iBAAiB,CAACC,KAAD,CAAjB,CAAyBE,OAAzB,CAAiC,SAAjC,EAA4C,EAA5C,CAAd;EAEA,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAACS,UAAU,CAACJ,KAAD,CAAX,CAAtC;;EAEA,SAASI,UAAT,CAAoBC,CAApB,EAAuB;IACrB,OAAOC,MAAM,CAACC,UAAP,CAAkBF,CAAlB,EAAqBH,OAA5B;EACD;;EAEDR,SAAS,CACP,MAAM;IACJ,MAAMc,UAAU,GAAGF,MAAM,CAACC,UAAP,CAAkBP,KAAlB,CAAnB,CADI,CAEJ;;IACAG,UAAU,CAACC,UAAU,CAACJ,KAAD,CAAX,CAAV,CAHI,CAIJ;;IACA,MAAMS,OAAO,GAAIC,KAAD,IAAWP,UAAU,CAACO,KAAK,CAACR,OAAP,CAArC,CALI,CAMJ;;;IACAM,UAAU,CAACG,gBAAX,CAA4B,QAA5B,EAAsCF,OAAtC,EAPI,CAQJ;;IACA,OAAO,MAAMD,UAAU,CAACI,mBAAX,CAA+B,QAA/B,EAAyCH,OAAzC,CAAb;EACD,CAXM,EAYP,CAACT,KAAD,CAZO,CAYC;EAZD,CAAT;EAeA,OAAOE,OAAP;AACD;;GA3BQL,kB;UACOD,Q;;;AA4BhB,eAAeC,kBAAf"},"metadata":{},"sourceType":"module"}