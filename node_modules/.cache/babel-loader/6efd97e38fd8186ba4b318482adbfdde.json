{"ast":null,"code":"'use strict';\n\nfunction pad(number) {\n  if (number < 10) {\n    return '0' + number;\n  }\n\n  return number;\n}\n\nexport function toRFCDateTime(date, omitTime, omitDate, milliseconds) {\n  var res = omitDate ? '' : date.getUTCFullYear() + '-' + pad(date.getUTCMonth() + 1) + '-' + pad(date.getUTCDate());\n\n  if (!omitTime) {\n    res += 'T' + pad(date.getUTCHours()) + ':' + pad(date.getUTCMinutes()) + ':' + pad(date.getUTCSeconds()) + (milliseconds ? '.' + (date.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) : '') + 'Z';\n  }\n\n  return res;\n}\n;\nexport function ensureMinLength(sample, min) {\n  if (min > sample.length) {\n    return sample.repeat(Math.trunc(min / sample.length) + 1).substring(0, min);\n  }\n\n  return sample;\n}\nexport function mergeDeep() {\n  var isObject = function isObject(obj) {\n    return obj && typeof obj === 'object';\n  };\n\n  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n    objects[_key] = arguments[_key];\n  }\n\n  return objects.reduce(function (prev, obj) {\n    Object.keys(obj || {}).forEach(function (key) {\n      var pVal = prev[key];\n      var oVal = obj[key];\n\n      if (isObject(pVal) && isObject(oVal)) {\n        prev[key] = mergeDeep(pVal, oVal);\n      } else {\n        prev[key] = oVal;\n      }\n    });\n    return prev;\n  }, Array.isArray(objects[objects.length - 1]) ? [] : {});\n} // deterministic UUID sampler\n\nexport function uuid(str) {\n  var hash = hashCode(str);\n  var random = jsf32(hash, hash, hash, hash);\n  var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = random() * 16 % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n  return uuid;\n}\nexport function getResultForCircular(type) {\n  return {\n    value: type === 'object' ? {} : type === 'array' ? [] : undefined\n  };\n}\nexport function popSchemaStack(seenSchemasStack, context) {\n  if (context) seenSchemasStack.pop();\n}\n\nfunction hashCode(str) {\n  var hash = 0;\n  if (str.length == 0) return hash;\n\n  for (var i = 0; i < str.length; i++) {\n    var char = str.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash = hash & hash;\n  }\n\n  return hash;\n}\n\nfunction jsf32(a, b, c, d) {\n  return function () {\n    a |= 0;\n    b |= 0;\n    c |= 0;\n    d |= 0;\n    var t = a - (b << 27 | b >>> 5) | 0;\n    a = b ^ (c << 17 | c >>> 15);\n    b = c + d | 0;\n    c = d + t | 0;\n    d = a + t | 0;\n    return (d >>> 0) / 4294967296;\n  };\n}","map":null,"metadata":{},"sourceType":"module"}