{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _createForOfIteratorHelper = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _taggedTemplateLiteral = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29, _templateObject30, _templateObject31, _templateObject32, _templateObject33, _templateObject34, _templateObject35, _templateObject36, _templateObject37, _templateObject38, _templateObject39;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getData = exports.KeywordCxt = exports.validateFunctionCode = void 0;\n\nvar boolSchema_1 = require(\"./boolSchema\");\n\nvar dataType_1 = require(\"./dataType\");\n\nvar applicability_1 = require(\"./applicability\");\n\nvar dataType_2 = require(\"./dataType\");\n\nvar defaults_1 = require(\"./defaults\");\n\nvar keyword_1 = require(\"./keyword\");\n\nvar subschema_1 = require(\"./subschema\");\n\nvar codegen_1 = require(\"../codegen\");\n\nvar names_1 = require(\"../names\");\n\nvar resolve_1 = require(\"../resolve\");\n\nvar util_1 = require(\"../util\");\n\nvar errors_1 = require(\"../errors\"); // schema compilation - generates validation function, subschemaCode (below) is used for subschemas\n\n\nfunction validateFunctionCode(it) {\n  if (isSchemaObj(it)) {\n    checkKeywords(it);\n\n    if (schemaCxtHasRules(it)) {\n      topSchemaObjCode(it);\n      return;\n    }\n  }\n\n  validateFunction(it, function () {\n    return boolSchema_1.topBoolOrEmptySchema(it);\n  });\n}\n\nexports.validateFunctionCode = validateFunctionCode;\n\nfunction validateFunction(_ref, body) {\n  var gen = _ref.gen,\n      validateName = _ref.validateName,\n      schema = _ref.schema,\n      schemaEnv = _ref.schemaEnv,\n      opts = _ref.opts;\n\n  if (opts.code.es5) {\n    gen.func(validateName, codegen_1._(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\", \", \", \"\"])), names_1.default.data, names_1.default.valCxt), schemaEnv.$async, function () {\n      gen.code(codegen_1._(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\\"use strict\\\"; \", \"\"])), funcSourceUrl(schema, opts)));\n      destructureValCxtES5(gen, opts);\n      gen.code(body);\n    });\n  } else {\n    gen.func(validateName, codegen_1._(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \", \", \"\"])), names_1.default.data, destructureValCxt(opts)), schemaEnv.$async, function () {\n      return gen.code(funcSourceUrl(schema, opts)).code(body);\n    });\n  }\n}\n\nfunction destructureValCxt(opts) {\n  return codegen_1._(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"{\", \"=\\\"\\\", \", \", \", \", \", \"=\", \"\", \"}={}\"])), names_1.default.instancePath, names_1.default.parentData, names_1.default.parentDataProperty, names_1.default.rootData, names_1.default.data, opts.dynamicRef ? codegen_1._(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\", \", \"={}\"])), names_1.default.dynamicAnchors) : codegen_1.nil);\n}\n\nfunction destructureValCxtES5(gen, opts) {\n  gen.if(names_1.default.valCxt, function () {\n    gen.var(names_1.default.instancePath, codegen_1._(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\", \".\", \"\"])), names_1.default.valCxt, names_1.default.instancePath));\n    gen.var(names_1.default.parentData, codegen_1._(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([\"\", \".\", \"\"])), names_1.default.valCxt, names_1.default.parentData));\n    gen.var(names_1.default.parentDataProperty, codegen_1._(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([\"\", \".\", \"\"])), names_1.default.valCxt, names_1.default.parentDataProperty));\n    gen.var(names_1.default.rootData, codegen_1._(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([\"\", \".\", \"\"])), names_1.default.valCxt, names_1.default.rootData));\n    if (opts.dynamicRef) gen.var(names_1.default.dynamicAnchors, codegen_1._(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral([\"\", \".\", \"\"])), names_1.default.valCxt, names_1.default.dynamicAnchors));\n  }, function () {\n    gen.var(names_1.default.instancePath, codegen_1._(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral([\"\\\"\\\"\"]))));\n    gen.var(names_1.default.parentData, codegen_1._(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral([\"undefined\"]))));\n    gen.var(names_1.default.parentDataProperty, codegen_1._(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral([\"undefined\"]))));\n    gen.var(names_1.default.rootData, names_1.default.data);\n    if (opts.dynamicRef) gen.var(names_1.default.dynamicAnchors, codegen_1._(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral([\"{}\"]))));\n  });\n}\n\nfunction topSchemaObjCode(it) {\n  var schema = it.schema,\n      opts = it.opts,\n      gen = it.gen;\n  validateFunction(it, function () {\n    if (opts.$comment && schema.$comment) commentKeyword(it);\n    checkNoDefault(it);\n    gen.let(names_1.default.vErrors, null);\n    gen.let(names_1.default.errors, 0);\n    if (opts.unevaluated) resetEvaluated(it);\n    typeAndKeywords(it);\n    returnResults(it);\n  });\n  return;\n}\n\nfunction resetEvaluated(it) {\n  // TODO maybe some hook to execute it in the end to check whether props/items are Name, as in assignEvaluated\n  var gen = it.gen,\n      validateName = it.validateName;\n  it.evaluated = gen.const(\"evaluated\", codegen_1._(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral([\"\", \".evaluated\"])), validateName));\n  gen.if(codegen_1._(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral([\"\", \".dynamicProps\"])), it.evaluated), function () {\n    return gen.assign(codegen_1._(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral([\"\", \".props\"])), it.evaluated), codegen_1._(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral([\"undefined\"]))));\n  });\n  gen.if(codegen_1._(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral([\"\", \".dynamicItems\"])), it.evaluated), function () {\n    return gen.assign(codegen_1._(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral([\"\", \".items\"])), it.evaluated), codegen_1._(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral([\"undefined\"]))));\n  });\n}\n\nfunction funcSourceUrl(schema, opts) {\n  var schId = typeof schema == \"object\" && schema[opts.schemaId];\n  return schId && (opts.code.source || opts.code.process) ? codegen_1._(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral([\"/*# sourceURL=\", \" */\"])), schId) : codegen_1.nil;\n} // schema compilation - this function is used recursively to generate code for sub-schemas\n\n\nfunction subschemaCode(it, valid) {\n  if (isSchemaObj(it)) {\n    checkKeywords(it);\n\n    if (schemaCxtHasRules(it)) {\n      subSchemaObjCode(it, valid);\n      return;\n    }\n  }\n\n  boolSchema_1.boolOrEmptySchema(it, valid);\n}\n\nfunction schemaCxtHasRules(_ref2) {\n  var schema = _ref2.schema,\n      self = _ref2.self;\n  if (typeof schema == \"boolean\") return !schema;\n\n  for (var key in schema) {\n    if (self.RULES.all[key]) return true;\n  }\n\n  return false;\n}\n\nfunction isSchemaObj(it) {\n  return typeof it.schema != \"boolean\";\n}\n\nfunction subSchemaObjCode(it, valid) {\n  var schema = it.schema,\n      gen = it.gen,\n      opts = it.opts;\n  if (opts.$comment && schema.$comment) commentKeyword(it);\n  updateContext(it);\n  checkAsyncSchema(it);\n  var errsCount = gen.const(\"_errs\", names_1.default.errors);\n  typeAndKeywords(it, errsCount); // TODO var\n\n  gen.var(valid, codegen_1._(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral([\"\", \" === \", \"\"])), errsCount, names_1.default.errors));\n}\n\nfunction checkKeywords(it) {\n  util_1.checkUnknownRules(it);\n  checkRefsAndKeywords(it);\n}\n\nfunction typeAndKeywords(it, errsCount) {\n  if (it.opts.jtd) return schemaKeywords(it, [], false, errsCount);\n  var types = dataType_1.getSchemaTypes(it.schema);\n  var checkedTypes = dataType_1.coerceAndCheckDataType(it, types);\n  schemaKeywords(it, types, !checkedTypes, errsCount);\n}\n\nfunction checkRefsAndKeywords(it) {\n  var schema = it.schema,\n      errSchemaPath = it.errSchemaPath,\n      opts = it.opts,\n      self = it.self;\n\n  if (schema.$ref && opts.ignoreKeywordsWithRef && util_1.schemaHasRulesButRef(schema, self.RULES)) {\n    self.logger.warn(\"$ref: keywords ignored in schema at path \\\"\".concat(errSchemaPath, \"\\\"\"));\n  }\n}\n\nfunction checkNoDefault(it) {\n  var schema = it.schema,\n      opts = it.opts;\n\n  if (schema.default !== undefined && opts.useDefaults && opts.strictSchema) {\n    util_1.checkStrictMode(it, \"default is ignored in the schema root\");\n  }\n}\n\nfunction updateContext(it) {\n  var schId = it.schema[it.opts.schemaId];\n  if (schId) it.baseId = resolve_1.resolveUrl(it.baseId, schId);\n}\n\nfunction checkAsyncSchema(it) {\n  if (it.schema.$async && !it.schemaEnv.$async) throw new Error(\"async schema in sync schema\");\n}\n\nfunction commentKeyword(_ref3) {\n  var gen = _ref3.gen,\n      schemaEnv = _ref3.schemaEnv,\n      schema = _ref3.schema,\n      errSchemaPath = _ref3.errSchemaPath,\n      opts = _ref3.opts;\n  var msg = schema.$comment;\n\n  if (opts.$comment === true) {\n    gen.code(codegen_1._(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral([\"\", \".logger.log(\", \")\"])), names_1.default.self, msg));\n  } else if (typeof opts.$comment == \"function\") {\n    var schemaPath = codegen_1.str(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral([\"\", \"/$comment\"])), errSchemaPath);\n    var rootName = gen.scopeValue(\"root\", {\n      ref: schemaEnv.root\n    });\n    gen.code(codegen_1._(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral([\"\", \".opts.$comment(\", \", \", \", \", \".schema)\"])), names_1.default.self, msg, schemaPath, rootName));\n  }\n}\n\nfunction returnResults(it) {\n  var gen = it.gen,\n      schemaEnv = it.schemaEnv,\n      validateName = it.validateName,\n      ValidationError = it.ValidationError,\n      opts = it.opts;\n\n  if (schemaEnv.$async) {\n    // TODO assign unevaluated\n    gen.if(codegen_1._(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral([\"\", \" === 0\"])), names_1.default.errors), function () {\n      return gen.return(names_1.default.data);\n    }, function () {\n      return gen.throw(codegen_1._(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral([\"new \", \"(\", \")\"])), ValidationError, names_1.default.vErrors));\n    });\n  } else {\n    gen.assign(codegen_1._(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral([\"\", \".errors\"])), validateName), names_1.default.vErrors);\n    if (opts.unevaluated) assignEvaluated(it);\n    gen.return(codegen_1._(_templateObject30 || (_templateObject30 = _taggedTemplateLiteral([\"\", \" === 0\"])), names_1.default.errors));\n  }\n}\n\nfunction assignEvaluated(_ref4) {\n  var gen = _ref4.gen,\n      evaluated = _ref4.evaluated,\n      props = _ref4.props,\n      items = _ref4.items;\n  if (props instanceof codegen_1.Name) gen.assign(codegen_1._(_templateObject31 || (_templateObject31 = _taggedTemplateLiteral([\"\", \".props\"])), evaluated), props);\n  if (items instanceof codegen_1.Name) gen.assign(codegen_1._(_templateObject32 || (_templateObject32 = _taggedTemplateLiteral([\"\", \".items\"])), evaluated), items);\n}\n\nfunction schemaKeywords(it, types, typeErrors, errsCount) {\n  var gen = it.gen,\n      schema = it.schema,\n      data = it.data,\n      allErrors = it.allErrors,\n      opts = it.opts,\n      self = it.self;\n  var RULES = self.RULES;\n\n  if (schema.$ref && (opts.ignoreKeywordsWithRef || !util_1.schemaHasRulesButRef(schema, RULES))) {\n    gen.block(function () {\n      return keywordCode(it, \"$ref\", RULES.all.$ref.definition);\n    }); // TODO typecast\n\n    return;\n  }\n\n  if (!opts.jtd) checkStrictTypes(it, types);\n  gen.block(function () {\n    var _iterator = _createForOfIteratorHelper(RULES.rules),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var group = _step.value;\n        groupKeywords(group);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    groupKeywords(RULES.post);\n  });\n\n  function groupKeywords(group) {\n    if (!applicability_1.shouldUseGroup(schema, group)) return;\n\n    if (group.type) {\n      gen.if(dataType_2.checkDataType(group.type, data, opts.strictNumbers));\n      iterateKeywords(it, group);\n\n      if (types.length === 1 && types[0] === group.type && typeErrors) {\n        gen.else();\n        dataType_2.reportTypeError(it);\n      }\n\n      gen.endIf();\n    } else {\n      iterateKeywords(it, group);\n    } // TODO make it \"ok\" call?\n\n\n    if (!allErrors) gen.if(codegen_1._(_templateObject33 || (_templateObject33 = _taggedTemplateLiteral([\"\", \" === \", \"\"])), names_1.default.errors, errsCount || 0));\n  }\n}\n\nfunction iterateKeywords(it, group) {\n  var gen = it.gen,\n      schema = it.schema,\n      useDefaults = it.opts.useDefaults;\n  if (useDefaults) defaults_1.assignDefaults(it, group.type);\n  gen.block(function () {\n    var _iterator2 = _createForOfIteratorHelper(group.rules),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var rule = _step2.value;\n\n        if (applicability_1.shouldUseRule(schema, rule)) {\n          keywordCode(it, rule.keyword, rule.definition, group.type);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  });\n}\n\nfunction checkStrictTypes(it, types) {\n  if (it.schemaEnv.meta || !it.opts.strictTypes) return;\n  checkContextTypes(it, types);\n  if (!it.opts.allowUnionTypes) checkMultipleTypes(it, types);\n  checkKeywordTypes(it, it.dataTypes);\n}\n\nfunction checkContextTypes(it, types) {\n  if (!types.length) return;\n\n  if (!it.dataTypes.length) {\n    it.dataTypes = types;\n    return;\n  }\n\n  types.forEach(function (t) {\n    if (!includesType(it.dataTypes, t)) {\n      strictTypesError(it, \"type \\\"\".concat(t, \"\\\" not allowed by context \\\"\").concat(it.dataTypes.join(\",\"), \"\\\"\"));\n    }\n  });\n  it.dataTypes = it.dataTypes.filter(function (t) {\n    return includesType(types, t);\n  });\n}\n\nfunction checkMultipleTypes(it, ts) {\n  if (ts.length > 1 && !(ts.length === 2 && ts.includes(\"null\"))) {\n    strictTypesError(it, \"use allowUnionTypes to allow union type keyword\");\n  }\n}\n\nfunction checkKeywordTypes(it, ts) {\n  var rules = it.self.RULES.all;\n\n  for (var keyword in rules) {\n    var rule = rules[keyword];\n\n    if (typeof rule == \"object\" && applicability_1.shouldUseRule(it.schema, rule)) {\n      var type = rule.definition.type;\n\n      if (type.length && !type.some(function (t) {\n        return hasApplicableType(ts, t);\n      })) {\n        strictTypesError(it, \"missing type \\\"\".concat(type.join(\",\"), \"\\\" for keyword \\\"\").concat(keyword, \"\\\"\"));\n      }\n    }\n  }\n}\n\nfunction hasApplicableType(schTs, kwdT) {\n  return schTs.includes(kwdT) || kwdT === \"number\" && schTs.includes(\"integer\");\n}\n\nfunction includesType(ts, t) {\n  return ts.includes(t) || t === \"integer\" && ts.includes(\"number\");\n}\n\nfunction strictTypesError(it, msg) {\n  var schemaPath = it.schemaEnv.baseId + it.errSchemaPath;\n  msg += \" at \\\"\".concat(schemaPath, \"\\\" (strictTypes)\");\n  util_1.checkStrictMode(it, msg, it.opts.strictTypes);\n}\n\nvar KeywordCxt = /*#__PURE__*/function () {\n  function KeywordCxt(it, def, keyword) {\n    _classCallCheck(this, KeywordCxt);\n\n    keyword_1.validateKeywordUsage(it, def, keyword);\n    this.gen = it.gen;\n    this.allErrors = it.allErrors;\n    this.keyword = keyword;\n    this.data = it.data;\n    this.schema = it.schema[keyword];\n    this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;\n    this.schemaValue = util_1.schemaRefOrVal(it, this.schema, keyword, this.$data);\n    this.schemaType = def.schemaType;\n    this.parentSchema = it.schema;\n    this.params = {};\n    this.it = it;\n    this.def = def;\n\n    if (this.$data) {\n      this.schemaCode = it.gen.const(\"vSchema\", getData(this.$data, it));\n    } else {\n      this.schemaCode = this.schemaValue;\n\n      if (!keyword_1.validSchemaType(this.schema, def.schemaType, def.allowUndefined)) {\n        throw new Error(\"\".concat(keyword, \" value must be \").concat(JSON.stringify(def.schemaType)));\n      }\n    }\n\n    if (\"code\" in def ? def.trackErrors : def.errors !== false) {\n      this.errsCount = it.gen.const(\"_errs\", names_1.default.errors);\n    }\n  }\n\n  _createClass(KeywordCxt, [{\n    key: \"result\",\n    value: function result(condition, successAction, failAction) {\n      this.gen.if(codegen_1.not(condition));\n      if (failAction) failAction();else this.error();\n\n      if (successAction) {\n        this.gen.else();\n        successAction();\n        if (this.allErrors) this.gen.endIf();\n      } else {\n        if (this.allErrors) this.gen.endIf();else this.gen.else();\n      }\n    }\n  }, {\n    key: \"pass\",\n    value: function pass(condition, failAction) {\n      this.result(condition, undefined, failAction);\n    }\n  }, {\n    key: \"fail\",\n    value: function fail(condition) {\n      if (condition === undefined) {\n        this.error();\n        if (!this.allErrors) this.gen.if(false); // this branch will be removed by gen.optimize\n\n        return;\n      }\n\n      this.gen.if(condition);\n      this.error();\n      if (this.allErrors) this.gen.endIf();else this.gen.else();\n    }\n  }, {\n    key: \"fail$data\",\n    value: function fail$data(condition) {\n      if (!this.$data) return this.fail(condition);\n      var schemaCode = this.schemaCode;\n      this.fail(codegen_1._(_templateObject34 || (_templateObject34 = _taggedTemplateLiteral([\"\", \" !== undefined && (\", \")\"])), schemaCode, codegen_1.or(this.invalid$data(), condition)));\n    }\n  }, {\n    key: \"error\",\n    value: function error(append, errorParams, errorPaths) {\n      if (errorParams) {\n        this.setParams(errorParams);\n\n        this._error(append, errorPaths);\n\n        this.setParams({});\n        return;\n      }\n\n      this._error(append, errorPaths);\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(append, errorPaths) {\n      ;\n      (append ? errors_1.reportExtraError : errors_1.reportError)(this, this.def.error, errorPaths);\n    }\n  }, {\n    key: \"$dataError\",\n    value: function $dataError() {\n      errors_1.reportError(this, this.def.$dataError || errors_1.keyword$DataError);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      if (this.errsCount === undefined) throw new Error('add \"trackErrors\" to keyword definition');\n      errors_1.resetErrorsCount(this.gen, this.errsCount);\n    }\n  }, {\n    key: \"ok\",\n    value: function ok(cond) {\n      if (!this.allErrors) this.gen.if(cond);\n    }\n  }, {\n    key: \"setParams\",\n    value: function setParams(obj, assign) {\n      if (assign) Object.assign(this.params, obj);else this.params = obj;\n    }\n  }, {\n    key: \"block$data\",\n    value: function block$data(valid, codeBlock) {\n      var _this = this;\n\n      var $dataValid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : codegen_1.nil;\n      this.gen.block(function () {\n        _this.check$data(valid, $dataValid);\n\n        codeBlock();\n      });\n    }\n  }, {\n    key: \"check$data\",\n    value: function check$data() {\n      var valid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : codegen_1.nil;\n      var $dataValid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : codegen_1.nil;\n      if (!this.$data) return;\n      var gen = this.gen,\n          schemaCode = this.schemaCode,\n          schemaType = this.schemaType,\n          def = this.def;\n      gen.if(codegen_1.or(codegen_1._(_templateObject35 || (_templateObject35 = _taggedTemplateLiteral([\"\", \" === undefined\"])), schemaCode), $dataValid));\n      if (valid !== codegen_1.nil) gen.assign(valid, true);\n\n      if (schemaType.length || def.validateSchema) {\n        gen.elseIf(this.invalid$data());\n        this.$dataError();\n        if (valid !== codegen_1.nil) gen.assign(valid, false);\n      }\n\n      gen.else();\n    }\n  }, {\n    key: \"invalid$data\",\n    value: function invalid$data() {\n      var gen = this.gen,\n          schemaCode = this.schemaCode,\n          schemaType = this.schemaType,\n          def = this.def,\n          it = this.it;\n      return codegen_1.or(wrong$DataType(), invalid$DataSchema());\n\n      function wrong$DataType() {\n        if (schemaType.length) {\n          /* istanbul ignore if */\n          if (!(schemaCode instanceof codegen_1.Name)) throw new Error(\"ajv implementation error\");\n          var st = Array.isArray(schemaType) ? schemaType : [schemaType];\n          return codegen_1._(_templateObject36 || (_templateObject36 = _taggedTemplateLiteral([\"\", \"\"])), dataType_2.checkDataTypes(st, schemaCode, it.opts.strictNumbers, dataType_2.DataType.Wrong));\n        }\n\n        return codegen_1.nil;\n      }\n\n      function invalid$DataSchema() {\n        if (def.validateSchema) {\n          var validateSchemaRef = gen.scopeValue(\"validate$data\", {\n            ref: def.validateSchema\n          }); // TODO value.code for standalone\n\n          return codegen_1._(_templateObject37 || (_templateObject37 = _taggedTemplateLiteral([\"!\", \"(\", \")\"])), validateSchemaRef, schemaCode);\n        }\n\n        return codegen_1.nil;\n      }\n    }\n  }, {\n    key: \"subschema\",\n    value: function subschema(appl, valid) {\n      var subschema = subschema_1.getSubschema(this.it, appl);\n      subschema_1.extendSubschemaData(subschema, this.it, appl);\n      subschema_1.extendSubschemaMode(subschema, appl);\n\n      var nextContext = _objectSpread(_objectSpread(_objectSpread({}, this.it), subschema), {}, {\n        items: undefined,\n        props: undefined\n      });\n\n      subschemaCode(nextContext, valid);\n      return nextContext;\n    }\n  }, {\n    key: \"mergeEvaluated\",\n    value: function mergeEvaluated(schemaCxt, toName) {\n      var it = this.it,\n          gen = this.gen;\n      if (!it.opts.unevaluated) return;\n\n      if (it.props !== true && schemaCxt.props !== undefined) {\n        it.props = util_1.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);\n      }\n\n      if (it.items !== true && schemaCxt.items !== undefined) {\n        it.items = util_1.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);\n      }\n    }\n  }, {\n    key: \"mergeValidEvaluated\",\n    value: function mergeValidEvaluated(schemaCxt, valid) {\n      var _this2 = this;\n\n      var it = this.it,\n          gen = this.gen;\n\n      if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {\n        gen.if(valid, function () {\n          return _this2.mergeEvaluated(schemaCxt, codegen_1.Name);\n        });\n        return true;\n      }\n    }\n  }]);\n\n  return KeywordCxt;\n}();\n\nexports.KeywordCxt = KeywordCxt;\n\nfunction keywordCode(it, keyword, def, ruleType) {\n  var cxt = new KeywordCxt(it, def, keyword);\n\n  if (\"code\" in def) {\n    def.code(cxt, ruleType);\n  } else if (cxt.$data && def.validate) {\n    keyword_1.funcKeywordCode(cxt, def);\n  } else if (\"macro\" in def) {\n    keyword_1.macroKeywordCode(cxt, def);\n  } else if (def.compile || def.validate) {\n    keyword_1.funcKeywordCode(cxt, def);\n  }\n}\n\nvar JSON_POINTER = /^\\/(?:[^~]|~0|~1)*$/;\nvar RELATIVE_JSON_POINTER = /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/;\n\nfunction getData($data, _ref5) {\n  var dataLevel = _ref5.dataLevel,\n      dataNames = _ref5.dataNames,\n      dataPathArr = _ref5.dataPathArr;\n  var jsonPointer;\n  var data;\n  if ($data === \"\") return names_1.default.rootData;\n\n  if ($data[0] === \"/\") {\n    if (!JSON_POINTER.test($data)) throw new Error(\"Invalid JSON-pointer: \".concat($data));\n    jsonPointer = $data;\n    data = names_1.default.rootData;\n  } else {\n    var matches = RELATIVE_JSON_POINTER.exec($data);\n    if (!matches) throw new Error(\"Invalid JSON-pointer: \".concat($data));\n    var up = +matches[1];\n    jsonPointer = matches[2];\n\n    if (jsonPointer === \"#\") {\n      if (up >= dataLevel) throw new Error(errorMsg(\"property/index\", up));\n      return dataPathArr[dataLevel - up];\n    }\n\n    if (up > dataLevel) throw new Error(errorMsg(\"data\", up));\n    data = dataNames[dataLevel - up];\n    if (!jsonPointer) return data;\n  }\n\n  var expr = data;\n  var segments = jsonPointer.split(\"/\");\n\n  var _iterator3 = _createForOfIteratorHelper(segments),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var segment = _step3.value;\n\n      if (segment) {\n        data = codegen_1._(_templateObject38 || (_templateObject38 = _taggedTemplateLiteral([\"\", \"\", \"\"])), data, codegen_1.getProperty(util_1.unescapeJsonPointer(segment)));\n        expr = codegen_1._(_templateObject39 || (_templateObject39 = _taggedTemplateLiteral([\"\", \" && \", \"\"])), expr, data);\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return expr;\n\n  function errorMsg(pointerType, up) {\n    return \"Cannot access \".concat(pointerType, \" \").concat(up, \" levels up, current level is \").concat(dataLevel);\n  }\n}\n\nexports.getData = getData; //# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"script"}