{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateExample = exports.getSuggest = exports.validateDefinedAndNonEmpty = exports.fieldNonEmpty = exports.missingRequiredField = exports.matchesJsonSchemaType = exports.oasTypeOf = void 0;\n\nvar levenshtein = require(\"js-levenshtein\");\n\nvar ref_utils_1 = require(\"../ref-utils\");\n\nvar ajv_1 = require(\"./ajv\");\n\nfunction oasTypeOf(value) {\n  if (Array.isArray(value)) {\n    return 'array';\n  } else if (value === null) {\n    return 'null';\n  } else {\n    return typeof value;\n  }\n}\n\nexports.oasTypeOf = oasTypeOf;\n/**\n * Checks if value matches specified JSON schema type\n *\n * @param {*} value - value to check\n * @param {JSONSchemaType} type - JSON Schema type\n * @returns boolean\n */\n\nfunction matchesJsonSchemaType(value, type, nullable) {\n  if (nullable && value === null) {\n    return value === null;\n  }\n\n  switch (type) {\n    case 'array':\n      return Array.isArray(value);\n\n    case 'object':\n      return typeof value === 'object' && value !== null && !Array.isArray(value);\n\n    case 'null':\n      return value === null;\n\n    case 'integer':\n      return Number.isInteger(value);\n\n    default:\n      return typeof value === type;\n  }\n}\n\nexports.matchesJsonSchemaType = matchesJsonSchemaType;\n\nfunction missingRequiredField(type, field) {\n  return \"\".concat(type, \" object should contain `\").concat(field, \"` field.\");\n}\n\nexports.missingRequiredField = missingRequiredField;\n\nfunction fieldNonEmpty(type, field) {\n  return \"\".concat(type, \" object `\").concat(field, \"` must be non-empty string.\");\n}\n\nexports.fieldNonEmpty = fieldNonEmpty;\n\nfunction validateDefinedAndNonEmpty(fieldName, value, ctx) {\n  if (typeof value !== 'object') {\n    return;\n  }\n\n  if (value[fieldName] === undefined) {\n    ctx.report({\n      message: missingRequiredField(ctx.type.name, fieldName),\n      location: ctx.location.child([fieldName]).key()\n    });\n  } else if (!value[fieldName]) {\n    ctx.report({\n      message: fieldNonEmpty(ctx.type.name, fieldName),\n      location: ctx.location.child([fieldName]).key()\n    });\n  }\n}\n\nexports.validateDefinedAndNonEmpty = validateDefinedAndNonEmpty;\n\nfunction getSuggest(given, variants) {\n  if (typeof given !== 'string' || !variants.length) return [];\n  var distances = [];\n\n  for (var i = 0; i < variants.length; i++) {\n    var distance = levenshtein(given, variants[i]);\n\n    if (distance < 4) {\n      distances.push({\n        distance: distance,\n        variant: variants[i]\n      });\n    }\n  }\n\n  distances.sort(function (a, b) {\n    return a.distance - b.distance;\n  }); // if (bestMatch.distance <= 4) return bestMatch.string;\n\n  return distances.map(function (d) {\n    return d.variant;\n  });\n}\n\nexports.getSuggest = getSuggest;\n\nfunction validateExample(example, schema, dataLoc, _ref, disallowAdditionalProperties) {\n  var resolve = _ref.resolve,\n      location = _ref.location,\n      report = _ref.report;\n\n  try {\n    var _ajv_1$validateJsonSc = ajv_1.validateJsonSchema(example, schema, location.child('schema'), dataLoc.pointer, resolve, disallowAdditionalProperties),\n        valid = _ajv_1$validateJsonSc.valid,\n        errors = _ajv_1$validateJsonSc.errors;\n\n    if (!valid) {\n      var _iterator = _createForOfIteratorHelper(errors),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var error = _step.value;\n          report({\n            message: \"Example value must conform to the schema: \".concat(error.message, \".\"),\n            location: Object.assign(Object.assign({}, new ref_utils_1.Location(dataLoc.source, error.instancePath)), {\n              reportOnKey: error.keyword === 'additionalProperties'\n            }),\n            from: location,\n            suggest: error.suggest\n          });\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  } catch (e) {\n    report({\n      message: \"Example validation errored: \".concat(e.message, \".\"),\n      location: location.child('schema'),\n      from: location\n    });\n  }\n}\n\nexports.validateExample = validateExample;","map":null,"metadata":{},"sourceType":"script"}