{"ast":null,"code":"import FuseUtils from '@fuse/utils';\nimport _ from '@lodash';\nimport mockApi from '../mock-api.json';\nimport mock from '../mock';\nconst boardsDB = mockApi.components.examples.scrumboard_boards.value;\nconst labelsDB = mockApi.components.examples.scrumboard_labels.value;\nconst cardsDB = mockApi.components.examples.scrumboard_cards.value;\nconst membersDB = mockApi.components.examples.scrumboard_members.value;\nconst listsDB = mockApi.components.examples.scrumboard_lists.value;\n/**\r\n * GET BOARDS\r\n * GET api/scrumboard/boards\r\n */\n\nmock.onGet('/api/scrumboard/boards').reply(config => {\n  return [200, boardsDB];\n});\n/**\r\n * CREATE NEW BOARD\r\n * POST api/scrumboard/boards\r\n */\n\nmock.onPost('/api/scrumboard/boards').reply(_ref => {\n  let {\n    data\n  } = _ref;\n  const newBoard = {\n    id: FuseUtils.generateGUID(),\n    ...JSON.parse(data)\n  };\n  boardsDB.push(newBoard);\n  return [200, newBoard];\n});\n/**\r\n * GET BOARD LABELS\r\n * GET api/scrumboard/boards/{boardId}/labels\r\n */\n\nmock.onGet(/\\/api\\/scrumboard\\/boards\\/(?<id>[^/]+)\\/labels/).reply(config => {\n  const {\n    id\n  } = config.url.match(/\\/api\\/scrumboard\\/boards\\/(?<id>[^/]+)\\/labels/).groups;\n  const labels = labelsDB.filter(item => item.boardId === id);\n  return [200, labels];\n});\n/**\r\n * CREATE CARD\r\n * PUT api/scrumboard/boards/{boardId}/lists/{listId}/cards\r\n */\n\nmock.onPost(/\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/lists\\/(?<listId>[^/]+)\\/cards/).reply(_ref2 => {\n  let {\n    url,\n    data\n  } = _ref2;\n  const {\n    boardId,\n    listId\n  } = url.match(/\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/lists\\/(?<listId>[^/]+)\\/cards/).groups;\n  const newCard = {\n    title: '',\n    description: '',\n    labels: [],\n    dueDate: '',\n    attachmentCoverId: '',\n    memberIds: [],\n    attachments: [],\n    subscribed: true,\n    checklists: [],\n    activities: [],\n    ...JSON.parse(data),\n    id: FuseUtils.generateGUID(),\n    boardId,\n    listId\n  };\n  cardsDB.push(newCard);\n\n  const board = _.find(boardsDB, {\n    id: boardId\n  }); // Add card into board\n\n\n  _.assign(board, { ...board,\n    lists: board.lists.map(list => list.id === listId ? { ...list,\n      cards: [...list.cards, newCard.id]\n    } : list)\n  });\n\n  return [200, newCard];\n});\n/**\r\n * UPDATE CARD\r\n * PUT api/scrumboard/boards/{boardId}/cards/{cardId}\r\n */\n\nmock.onPut(/\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/cards\\/(?<cardId>[^/]+)/).reply(_ref3 => {\n  let {\n    url,\n    data\n  } = _ref3;\n  const {\n    boardId,\n    cardId\n  } = url.match(/\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/cards\\/(?<cardId>[^/]+)/).groups;\n\n  const card = _.find(cardsDB, {\n    id: cardId\n  });\n\n  _.assign(card, JSON.parse(data));\n\n  return [200, card];\n});\n/**\r\n * DELETE CARD\r\n * api/scrumboard/boards/{boardId}/cards/{cardId}\r\n */\n\nmock.onDelete(/\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/cards\\/(?<cardId>[^/]+)/).reply(config => {\n  const {\n    boardId,\n    cardId\n  } = config.url.match(/\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/cards\\/(?<cardId>[^/]+)/).groups;\n\n  const board = _.find(boardsDB, {\n    id: boardId\n  }); // Remove cards from board\n\n\n  _.assign(board, { ...board,\n    lists: board.lists.map(list => ({ ...list,\n      cards: _.reject(list.cards, id => id === cardId)\n    }))\n  }); // Remove card\n\n\n  _.remove(cardsDB, {\n    id: cardId\n  });\n\n  return [200, cardId];\n});\n/** GET LISTS BY BOARD ID\r\n * GET /api/scrumboard/boards/{boardId}/lists\r\n */\n\nmock.onGet(/\\/api\\/scrumboard\\/boards\\/(?<id>[^/]+)\\/lists/).reply(config => {\n  const {\n    id\n  } = config.url.match(/\\/api\\/scrumboard\\/boards\\/(?<id>[^/]+)\\/lists/).groups;\n  const lists = listsDB.filter(item => item.boardId === id);\n  return [200, lists];\n});\n/**\r\n * UPDATE LIST\r\n * PUT api/scrumboard/boards/{boardId}/lists/{listId}\r\n */\n\nmock.onPut(/\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/lists\\/(?<listId>[^/]+)/).reply(_ref4 => {\n  let {\n    url,\n    data\n  } = _ref4;\n  const {\n    boardId,\n    listId\n  } = url.match(/\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/lists\\/(?<listId>[^/]+)/).groups;\n\n  const list = _.find(listsDB, {\n    id: listId\n  });\n\n  _.assign(list, JSON.parse(data));\n\n  return [200, list];\n});\n/**\r\n * CREATE LIST\r\n * POST api/scrumboard/boards/{boardId}/lists\r\n */\n\nmock.onPost(/\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/lists/).reply(_ref5 => {\n  let {\n    url,\n    data\n  } = _ref5;\n  const {\n    boardId\n  } = url.match(/\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/lists/).groups;\n  const newList = {\n    id: FuseUtils.generateGUID(),\n    boardId,\n    ...JSON.parse(data)\n  };\n  listsDB.push(newList);\n\n  const board = _.find(boardsDB, {\n    id: boardId\n  }); // Add list into board\n\n\n  _.assign(board, { ...board,\n    lists: [...board.lists, {\n      id: newList.id,\n      cards: []\n    }]\n  });\n\n  return [200, newList];\n});\n/**\r\n * DELETE LIST\r\n * DELETE api/scrumboard/boards/{boardId}/lists/{listId}\r\n */\n\nmock.onDelete(/\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/lists\\/(?<listId>[^/]+)/).reply(config => {\n  const {\n    boardId,\n    listId\n  } = config.url.match(/\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/lists\\/(?<listId>[^/]+)/).groups;\n\n  const board = _.find(boardsDB, {\n    id: boardId\n  }); // Remove cards of the list\n\n\n  _.remove(cardsDB, {\n    listId\n  }); // Remove list from board\n\n\n  _.assign(board, { ...board,\n    lists: _.reject(board.lists, {\n      id: listId\n    })\n  }); // Remove list\n\n\n  _.remove(listsDB, {\n    id: listId\n  });\n\n  return [200, listId];\n});\n/**\r\n * GET BOARD CARDS\r\n * GET api/scrumboard/boards/{boardId}/cards\r\n */\n\nmock.onGet(/\\/api\\/scrumboard\\/boards\\/(?<id>[^/]+)\\/cards/).reply(config => {\n  const {\n    id\n  } = config.url.match(/\\/api\\/scrumboard\\/boards\\/(?<id>[^/]+)\\/cards/).groups;\n  const cards = cardsDB.filter(item => item.boardId === id);\n  return [200, cards];\n});\n/**\r\n * GET BOARD\r\n * GET api/scrumboard/boards/{boardId}\r\n */\n\nmock.onGet(/\\/api\\/scrumboard\\/boards\\/[^/]+/).reply(config => {\n  const {\n    id\n  } = config.url.match(/\\/api\\/scrumboard\\/boards\\/(?<id>[^/]+)/).groups;\n\n  const board = _.find(boardsDB, {\n    id\n  });\n\n  if (board) {\n    return [200, board];\n  }\n\n  return [404, 'Requested board do not exist.'];\n});\n/**\r\n * UPDATE BOARD\r\n * PUT api/scrumboard/boards/{boardId}\r\n */\n\nmock.onPut(/\\/api\\/scrumboard\\/boards\\/[^/]+/).reply(_ref6 => {\n  let {\n    url,\n    data\n  } = _ref6;\n  const {\n    id\n  } = url.match(/\\/api\\/scrumboard\\/boards\\/(?<id>[^/]+)/).groups;\n\n  const board = _.find(boardsDB, {\n    id\n  });\n\n  _.assign(board, { ...board,\n    ...JSON.parse(data)\n  });\n\n  return [200, board];\n});\n/**\r\n * DELETE BOARD\r\n * DELETE api/scrumboard/boards/{boardId}\r\n */\n\nmock.onDelete(/\\/api\\/scrumboard\\/boards\\/[^/]+/).reply(_ref7 => {\n  let {\n    url\n  } = _ref7;\n  const {\n    id\n  } = url.match(/\\/api\\/scrumboard\\/boards\\/(?<id>[^/]+)/).groups;\n\n  _.remove(boardsDB, {\n    id\n  });\n\n  _.remove(cardsDB, {\n    boardId: id\n  });\n\n  _.remove(listsDB, {\n    boardId: id\n  });\n\n  return [200, id];\n});\n/**\r\n * GET ALL MEMBERS\r\n * GET api/scrumboard/members\r\n */\n\nmock.onGet('/api/scrumboard/members').reply(_ref8 => {\n  let {\n    data\n  } = _ref8;\n  return [200, membersDB];\n});","map":{"version":3,"names":["FuseUtils","_","mockApi","mock","boardsDB","components","examples","scrumboard_boards","value","labelsDB","scrumboard_labels","cardsDB","scrumboard_cards","membersDB","scrumboard_members","listsDB","scrumboard_lists","onGet","reply","config","onPost","data","newBoard","id","generateGUID","JSON","parse","push","url","match","groups","labels","filter","item","boardId","listId","newCard","title","description","dueDate","attachmentCoverId","memberIds","attachments","subscribed","checklists","activities","board","find","assign","lists","map","list","cards","onPut","cardId","card","onDelete","reject","remove","newList"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/src/@mock-api/api/scrumboard-api.js"],"sourcesContent":["import FuseUtils from '@fuse/utils';\r\nimport _ from '@lodash';\r\nimport mockApi from '../mock-api.json';\r\nimport mock from '../mock';\r\n\r\nconst boardsDB = mockApi.components.examples.scrumboard_boards.value;\r\nconst labelsDB = mockApi.components.examples.scrumboard_labels.value;\r\nconst cardsDB = mockApi.components.examples.scrumboard_cards.value;\r\nconst membersDB = mockApi.components.examples.scrumboard_members.value;\r\nconst listsDB = mockApi.components.examples.scrumboard_lists.value;\r\n\r\n/**\r\n * GET BOARDS\r\n * GET api/scrumboard/boards\r\n */\r\nmock.onGet('/api/scrumboard/boards').reply((config) => {\r\n  return [200, boardsDB];\r\n});\r\n\r\n/**\r\n * CREATE NEW BOARD\r\n * POST api/scrumboard/boards\r\n */\r\nmock.onPost('/api/scrumboard/boards').reply(({ data }) => {\r\n  const newBoard = { id: FuseUtils.generateGUID(), ...JSON.parse(data) };\r\n  boardsDB.push(newBoard);\r\n\r\n  return [200, newBoard];\r\n});\r\n\r\n/**\r\n * GET BOARD LABELS\r\n * GET api/scrumboard/boards/{boardId}/labels\r\n */\r\nmock.onGet(/\\/api\\/scrumboard\\/boards\\/(?<id>[^/]+)\\/labels/).reply((config) => {\r\n  const { id } = config.url.match(/\\/api\\/scrumboard\\/boards\\/(?<id>[^/]+)\\/labels/).groups;\r\n  const labels = labelsDB.filter((item) => item.boardId === id);\r\n  return [200, labels];\r\n});\r\n\r\n/**\r\n * CREATE CARD\r\n * PUT api/scrumboard/boards/{boardId}/lists/{listId}/cards\r\n */\r\nmock\r\n  .onPost(/\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/lists\\/(?<listId>[^/]+)\\/cards/)\r\n  .reply(({ url, data }) => {\r\n    const { boardId, listId } = url.match(\r\n      /\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/lists\\/(?<listId>[^/]+)\\/cards/\r\n    ).groups;\r\n\r\n    const newCard = {\r\n      title: '',\r\n      description: '',\r\n      labels: [],\r\n      dueDate: '',\r\n      attachmentCoverId: '',\r\n      memberIds: [],\r\n      attachments: [],\r\n      subscribed: true,\r\n      checklists: [],\r\n      activities: [],\r\n      ...JSON.parse(data),\r\n      id: FuseUtils.generateGUID(),\r\n      boardId,\r\n      listId,\r\n    };\r\n\r\n    cardsDB.push(newCard);\r\n\r\n    const board = _.find(boardsDB, { id: boardId });\r\n\r\n    // Add card into board\r\n    _.assign(board, {\r\n      ...board,\r\n      lists: board.lists.map((list) =>\r\n        list.id === listId ? { ...list, cards: [...list.cards, newCard.id] } : list\r\n      ),\r\n    });\r\n\r\n    return [200, newCard];\r\n  });\r\n\r\n/**\r\n * UPDATE CARD\r\n * PUT api/scrumboard/boards/{boardId}/cards/{cardId}\r\n */\r\nmock\r\n  .onPut(/\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/cards\\/(?<cardId>[^/]+)/)\r\n  .reply(({ url, data }) => {\r\n    const { boardId, cardId } = url.match(\r\n      /\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/cards\\/(?<cardId>[^/]+)/\r\n    ).groups;\r\n\r\n    const card = _.find(cardsDB, { id: cardId });\r\n\r\n    _.assign(card, JSON.parse(data));\r\n    return [200, card];\r\n  });\r\n\r\n/**\r\n * DELETE CARD\r\n * api/scrumboard/boards/{boardId}/cards/{cardId}\r\n */\r\nmock\r\n  .onDelete(/\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/cards\\/(?<cardId>[^/]+)/)\r\n  .reply((config) => {\r\n    const { boardId, cardId } = config.url.match(\r\n      /\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/cards\\/(?<cardId>[^/]+)/\r\n    ).groups;\r\n\r\n    const board = _.find(boardsDB, { id: boardId });\r\n\r\n    // Remove cards from board\r\n    _.assign(board, {\r\n      ...board,\r\n      lists: board.lists.map((list) => ({\r\n        ...list,\r\n        cards: _.reject(list.cards, (id) => id === cardId),\r\n      })),\r\n    });\r\n\r\n    // Remove card\r\n    _.remove(cardsDB, { id: cardId });\r\n\r\n    return [200, cardId];\r\n  });\r\n\r\n/** GET LISTS BY BOARD ID\r\n * GET /api/scrumboard/boards/{boardId}/lists\r\n */\r\nmock.onGet(/\\/api\\/scrumboard\\/boards\\/(?<id>[^/]+)\\/lists/).reply((config) => {\r\n  const { id } = config.url.match(/\\/api\\/scrumboard\\/boards\\/(?<id>[^/]+)\\/lists/).groups;\r\n  const lists = listsDB.filter((item) => item.boardId === id);\r\n  return [200, lists];\r\n});\r\n\r\n/**\r\n * UPDATE LIST\r\n * PUT api/scrumboard/boards/{boardId}/lists/{listId}\r\n */\r\nmock\r\n  .onPut(/\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/lists\\/(?<listId>[^/]+)/)\r\n  .reply(({ url, data }) => {\r\n    const { boardId, listId } = url.match(\r\n      /\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/lists\\/(?<listId>[^/]+)/\r\n    ).groups;\r\n\r\n    const list = _.find(listsDB, { id: listId });\r\n\r\n    _.assign(list, JSON.parse(data));\r\n\r\n    return [200, list];\r\n  });\r\n\r\n/**\r\n * CREATE LIST\r\n * POST api/scrumboard/boards/{boardId}/lists\r\n */\r\nmock.onPost(/\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/lists/).reply(({ url, data }) => {\r\n  const { boardId } = url.match(/\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/lists/).groups;\r\n\r\n  const newList = {\r\n    id: FuseUtils.generateGUID(),\r\n    boardId,\r\n    ...JSON.parse(data),\r\n  };\r\n\r\n  listsDB.push(newList);\r\n\r\n  const board = _.find(boardsDB, { id: boardId });\r\n\r\n  // Add list into board\r\n  _.assign(board, { ...board, lists: [...board.lists, { id: newList.id, cards: [] }] });\r\n\r\n  return [200, newList];\r\n});\r\n\r\n/**\r\n * DELETE LIST\r\n * DELETE api/scrumboard/boards/{boardId}/lists/{listId}\r\n */\r\nmock\r\n  .onDelete(/\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/lists\\/(?<listId>[^/]+)/)\r\n  .reply((config) => {\r\n    const { boardId, listId } = config.url.match(\r\n      /\\/api\\/scrumboard\\/boards\\/(?<boardId>[^/]+)\\/lists\\/(?<listId>[^/]+)/\r\n    ).groups;\r\n\r\n    const board = _.find(boardsDB, { id: boardId });\r\n\r\n    // Remove cards of the list\r\n    _.remove(cardsDB, { listId });\r\n\r\n    // Remove list from board\r\n    _.assign(board, { ...board, lists: _.reject(board.lists, { id: listId }) });\r\n\r\n    // Remove list\r\n    _.remove(listsDB, { id: listId });\r\n\r\n    return [200, listId];\r\n  });\r\n\r\n/**\r\n * GET BOARD CARDS\r\n * GET api/scrumboard/boards/{boardId}/cards\r\n */\r\nmock.onGet(/\\/api\\/scrumboard\\/boards\\/(?<id>[^/]+)\\/cards/).reply((config) => {\r\n  const { id } = config.url.match(/\\/api\\/scrumboard\\/boards\\/(?<id>[^/]+)\\/cards/).groups;\r\n  const cards = cardsDB.filter((item) => item.boardId === id);\r\n  return [200, cards];\r\n});\r\n\r\n/**\r\n * GET BOARD\r\n * GET api/scrumboard/boards/{boardId}\r\n */\r\nmock.onGet(/\\/api\\/scrumboard\\/boards\\/[^/]+/).reply((config) => {\r\n  const { id } = config.url.match(/\\/api\\/scrumboard\\/boards\\/(?<id>[^/]+)/).groups;\r\n  const board = _.find(boardsDB, { id });\r\n\r\n  if (board) {\r\n    return [200, board];\r\n  }\r\n\r\n  return [404, 'Requested board do not exist.'];\r\n});\r\n\r\n/**\r\n * UPDATE BOARD\r\n * PUT api/scrumboard/boards/{boardId}\r\n */\r\nmock.onPut(/\\/api\\/scrumboard\\/boards\\/[^/]+/).reply(({ url, data }) => {\r\n  const { id } = url.match(/\\/api\\/scrumboard\\/boards\\/(?<id>[^/]+)/).groups;\r\n\r\n  const board = _.find(boardsDB, { id });\r\n\r\n  _.assign(board, { ...board, ...JSON.parse(data) });\r\n\r\n  return [200, board];\r\n});\r\n\r\n/**\r\n * DELETE BOARD\r\n * DELETE api/scrumboard/boards/{boardId}\r\n */\r\nmock.onDelete(/\\/api\\/scrumboard\\/boards\\/[^/]+/).reply(({ url }) => {\r\n  const { id } = url.match(/\\/api\\/scrumboard\\/boards\\/(?<id>[^/]+)/).groups;\r\n\r\n  _.remove(boardsDB, { id });\r\n  _.remove(cardsDB, { boardId: id });\r\n  _.remove(listsDB, { boardId: id });\r\n\r\n  return [200, id];\r\n});\r\n\r\n/**\r\n * GET ALL MEMBERS\r\n * GET api/scrumboard/members\r\n */\r\nmock.onGet('/api/scrumboard/members').reply(({ data }) => {\r\n  return [200, membersDB];\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}