{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateJsonSchema = exports.releaseAjvInstance = void 0;\n\nvar ajv_1 = require(\"@redocly/ajv\");\n\nvar ref_utils_1 = require(\"../ref-utils\");\n\nvar ajvInstance = null;\n\nfunction releaseAjvInstance() {\n  ajvInstance = null;\n}\n\nexports.releaseAjvInstance = releaseAjvInstance;\n\nfunction getAjv(resolve, disallowAdditionalProperties) {\n  if (!ajvInstance) {\n    ajvInstance = new ajv_1.default({\n      schemaId: '$id',\n      meta: true,\n      allErrors: true,\n      strictSchema: false,\n      inlineRefs: false,\n      validateSchema: false,\n      discriminator: true,\n      allowUnionTypes: true,\n      validateFormats: false,\n      defaultAdditionalProperties: !disallowAdditionalProperties,\n      loadSchemaSync: function loadSchemaSync(base, $ref) {\n        var resolvedRef = resolve({\n          $ref: $ref\n        }, base.split('#')[0]);\n        if (!resolvedRef || !resolvedRef.location) return undefined;\n        return Object.assign({\n          $id: resolvedRef.location.absolutePointer\n        }, resolvedRef.node);\n      },\n      logger: false\n    });\n  }\n\n  return ajvInstance;\n}\n\nfunction getAjvValidator(schema, loc, resolve, disallowAdditionalProperties) {\n  var ajv = getAjv(resolve, disallowAdditionalProperties);\n\n  if (!ajv.getSchema(loc.absolutePointer)) {\n    ajv.addSchema(Object.assign({\n      $id: loc.absolutePointer\n    }, schema), loc.absolutePointer);\n  }\n\n  return ajv.getSchema(loc.absolutePointer);\n}\n\nfunction validateJsonSchema(data, schema, schemaLoc, instancePath, resolve, disallowAdditionalProperties) {\n  var validate = getAjvValidator(schema, schemaLoc, resolve, disallowAdditionalProperties);\n  if (!validate) return {\n    valid: true,\n    errors: []\n  }; // unresolved refs are reported\n\n  var valid = validate(data, {\n    instancePath: instancePath,\n    parentData: {\n      fake: {}\n    },\n    parentDataProperty: 'fake',\n    rootData: {},\n    dynamicAnchors: {}\n  });\n  return {\n    valid: !!valid,\n    errors: (validate.errors || []).map(beatifyErrorMessage)\n  };\n\n  function beatifyErrorMessage(error) {\n    var message = error.message;\n    var suggest = error.keyword === 'enum' ? error.params.allowedValues : undefined;\n\n    if (suggest) {\n      message += \" \".concat(suggest.map(function (e) {\n        return \"\\\"\".concat(e, \"\\\"\");\n      }).join(', '));\n    }\n\n    if (error.keyword === 'type') {\n      message = \"type \".concat(message);\n    }\n\n    var relativePath = error.instancePath.substring(instancePath.length + 1);\n    var propName = relativePath.substring(relativePath.lastIndexOf('/') + 1);\n\n    if (propName) {\n      message = \"`\".concat(propName, \"` property \").concat(message);\n    }\n\n    if (error.keyword === 'additionalProperties') {\n      var property = error.params.additionalProperty;\n      message = \"\".concat(message, \" `\").concat(property, \"`\");\n      error.instancePath += '/' + ref_utils_1.escapePointer(property);\n    }\n\n    return Object.assign(Object.assign({}, error), {\n      message: message,\n      suggest: suggest\n    });\n  }\n}\n\nexports.validateJsonSchema = validateJsonSchema;","map":null,"metadata":{},"sourceType":"script"}