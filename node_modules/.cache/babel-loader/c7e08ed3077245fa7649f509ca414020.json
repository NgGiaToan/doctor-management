{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\giato\\\\Downloads\\\\Workspace\\\\.Net\\\\api\\\\doctor-management-fe\\\\src\\\\@fuse\\\\core\\\\FuseHighlight\\\\FuseHighlight.js\",\n    _s = $RefreshSig$();\n\nimport * as Prism from 'prismjs';\nimport PropTypes from 'prop-types';\nimport { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport './prism-languages';\nimport { styled } from '@mui/material/styles';\nimport clsx from 'clsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FuseHighlight(props) {\n  _s();\n\n  const highlight = useCallback(() => {\n    Prism.highlightElement(domNode.current, props.async);\n  }, [props.async]);\n  const trimCode = useCallback(() => {\n    let sourceString = props.children;\n\n    if (typeof sourceString === 'object' && sourceString.default) {\n      sourceString = sourceString.default;\n    } // Split the source into lines\n\n\n    const sourceLines = sourceString.split('\\n'); // Remove the first and the last line of the source\n    // code if they are blank lines. This way, the html\n    // can be formatted properly while using fuse-highlight\n    // component\n\n    if (!sourceLines[0].trim()) {\n      sourceLines.shift();\n    }\n\n    if (!sourceLines[sourceLines.length - 1].trim()) {\n      sourceLines.pop();\n    } // Find the first non-whitespace char index in\n    // the first line of the source code\n\n\n    const indexOfFirstChar = sourceLines[0].search(/\\S|$/); // Generate the trimmed source\n\n    let sourceRaw = ''; // Iterate through all the lines\n\n    sourceLines.forEach((line, index) => {\n      // Trim the beginning white space depending on the index\n      // and concat the source code\n      sourceRaw += line.substr(indexOfFirstChar, line.length); // If it's not the last line...\n\n      if (index !== sourceLines.length - 1) {\n        // Add a line break at the end\n        sourceRaw = `${sourceRaw}\\n`;\n      }\n    });\n    return sourceRaw;\n  }, [props.children]);\n  const domNode = useRef(null);\n  const [source, setSource] = useState(trimCode());\n  useEffect(() => {\n    setSource(trimCode());\n  }, [trimCode]);\n  useEffect(() => {\n    highlight();\n  }, [highlight, source]);\n  const {\n    className,\n    component: Wrapper\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    ref: domNode,\n    className: clsx('border', className),\n    children: source\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FuseHighlight, \"QQq8oKN+RrQZe3QTFNDDZAkCivc=\");\n\n_c = FuseHighlight;\nFuseHighlight.propTypes = {\n  component: PropTypes.node\n};\nFuseHighlight.defaultProps = {\n  component: 'code'\n};\nexport default /*#__PURE__*/memo(styled(FuseHighlight)``);\n\nvar _c;\n\n$RefreshReg$(_c, \"FuseHighlight\");","map":{"version":3,"names":["Prism","PropTypes","memo","useCallback","useEffect","useRef","useState","styled","clsx","FuseHighlight","props","highlight","highlightElement","domNode","current","async","trimCode","sourceString","children","default","sourceLines","split","trim","shift","length","pop","indexOfFirstChar","search","sourceRaw","forEach","line","index","substr","source","setSource","className","component","Wrapper","propTypes","node","defaultProps"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/src/@fuse/core/FuseHighlight/FuseHighlight.js"],"sourcesContent":["import * as Prism from 'prismjs';\r\nimport PropTypes from 'prop-types';\r\nimport { memo, useCallback, useEffect, useRef, useState } from 'react';\r\nimport './prism-languages';\r\nimport { styled } from '@mui/material/styles';\r\nimport clsx from 'clsx';\r\n\r\nfunction FuseHighlight(props) {\r\n  const highlight = useCallback(() => {\r\n    Prism.highlightElement(domNode.current, props.async);\r\n  }, [props.async]);\r\n\r\n  const trimCode = useCallback(() => {\r\n    let sourceString = props.children;\r\n\r\n    if (typeof sourceString === 'object' && sourceString.default) {\r\n      sourceString = sourceString.default;\r\n    }\r\n\r\n    // Split the source into lines\r\n    const sourceLines = sourceString.split('\\n');\r\n\r\n    // Remove the first and the last line of the source\r\n    // code if they are blank lines. This way, the html\r\n    // can be formatted properly while using fuse-highlight\r\n    // component\r\n    if (!sourceLines[0].trim()) {\r\n      sourceLines.shift();\r\n    }\r\n\r\n    if (!sourceLines[sourceLines.length - 1].trim()) {\r\n      sourceLines.pop();\r\n    }\r\n\r\n    // Find the first non-whitespace char index in\r\n    // the first line of the source code\r\n    const indexOfFirstChar = sourceLines[0].search(/\\S|$/);\r\n\r\n    // Generate the trimmed source\r\n    let sourceRaw = '';\r\n\r\n    // Iterate through all the lines\r\n    sourceLines.forEach((line, index) => {\r\n      // Trim the beginning white space depending on the index\r\n      // and concat the source code\r\n      sourceRaw += line.substr(indexOfFirstChar, line.length);\r\n\r\n      // If it's not the last line...\r\n      if (index !== sourceLines.length - 1) {\r\n        // Add a line break at the end\r\n        sourceRaw = `${sourceRaw}\\n`;\r\n      }\r\n    });\r\n    return sourceRaw;\r\n  }, [props.children]);\r\n\r\n  const domNode = useRef(null);\r\n\r\n  const [source, setSource] = useState(trimCode());\r\n\r\n  useEffect(() => {\r\n    setSource(trimCode());\r\n  }, [trimCode]);\r\n\r\n  useEffect(() => {\r\n    highlight();\r\n  }, [highlight, source]);\r\n\r\n  const { className, component: Wrapper } = props;\r\n\r\n  return (\r\n    <Wrapper ref={domNode} className={clsx('border', className)}>\r\n      {source}\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nFuseHighlight.propTypes = {\r\n  component: PropTypes.node,\r\n};\r\nFuseHighlight.defaultProps = {\r\n  component: 'code',\r\n};\r\n\r\nexport default memo(styled(FuseHighlight)``);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}