{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isRedoclyRegistryURL = exports.RedoclyClient = void 0;\n\nconst fs_1 = require(\"fs\");\n\nconst path_1 = require(\"path\");\n\nconst os_1 = require(\"os\");\n\nconst colorette_1 = require(\"colorette\");\n\nconst registry_api_1 = require(\"./registry-api\");\n\nconst config_1 = require(\"../config/config\");\n\nconst utils_1 = require(\"../utils\");\n\nconst TOKEN_FILENAME = '.redocly-config.json';\n\nclass RedoclyClient {\n  constructor(region) {\n    this.accessTokens = {};\n    this.region = this.loadRegion(region);\n    this.loadTokens();\n    this.domain = region ? config_1.DOMAINS[region] : config_1.env.REDOCLY_DOMAIN || config_1.DOMAINS[config_1.DEFAULT_REGION];\n    config_1.env.REDOCLY_DOMAIN = this.domain; // isRedoclyRegistryURL depends on the value to be set\n\n    this.registryApi = new registry_api_1.RegistryApi(this.accessTokens, this.region);\n  }\n\n  loadRegion(region) {\n    if (region && !config_1.DOMAINS[region]) {\n      throw new Error(`Invalid argument: region in config file.\\nGiven: ${colorette_1.green(region)}, choices: \"us\", \"eu\".`);\n    }\n\n    if (config_1.env.REDOCLY_DOMAIN) {\n      return config_1.AVAILABLE_REGIONS.find(region => config_1.DOMAINS[region] === config_1.env.REDOCLY_DOMAIN) || config_1.DEFAULT_REGION;\n    }\n\n    return region || config_1.DEFAULT_REGION;\n  }\n\n  getRegion() {\n    return this.region;\n  }\n\n  hasTokens() {\n    return utils_1.isNotEmptyObject(this.accessTokens);\n  } // <backward compatibility: old versions of portal>\n\n\n  hasToken() {\n    return !!this.accessTokens[this.region];\n  }\n\n  getAuthorizationHeader() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.accessTokens[this.region];\n    });\n  } // </backward compatibility: portal>\n\n\n  setAccessTokens(accessTokens) {\n    this.accessTokens = accessTokens;\n  }\n\n  loadTokens() {\n    const credentialsPath = path_1.resolve(os_1.homedir(), TOKEN_FILENAME);\n    const credentials = this.readCredentialsFile(credentialsPath);\n\n    if (utils_1.isNotEmptyObject(credentials)) {\n      this.setAccessTokens(Object.assign(Object.assign({}, credentials), credentials.token && !credentials[this.region] && {\n        [this.region]: credentials.token\n      }));\n    }\n\n    if (config_1.env.REDOCLY_AUTHORIZATION) {\n      this.setAccessTokens(Object.assign(Object.assign({}, this.accessTokens), {\n        [this.region]: config_1.env.REDOCLY_AUTHORIZATION\n      }));\n    }\n  }\n\n  getAllTokens() {\n    return Object.entries(this.accessTokens).filter(_ref => {\n      let [region] = _ref;\n      return config_1.AVAILABLE_REGIONS.includes(region);\n    }).map(_ref2 => {\n      let [region, token] = _ref2;\n      return {\n        region,\n        token\n      };\n    });\n  }\n\n  getValidTokens() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const allTokens = this.getAllTokens();\n      const verifiedTokens = yield Promise.allSettled(allTokens.map(_ref3 => {\n        let {\n          token,\n          region\n        } = _ref3;\n        return this.verifyToken(token, region);\n      }));\n      return allTokens.filter((_, index) => verifiedTokens[index].status === 'fulfilled').map(_ref4 => {\n        let {\n          token,\n          region\n        } = _ref4;\n        return {\n          token,\n          region,\n          valid: true\n        };\n      });\n    });\n  }\n\n  getTokens() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.hasTokens() ? yield this.getValidTokens() : [];\n    });\n  }\n\n  isAuthorizedWithRedoclyByRegion() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.hasTokens()) {\n        return false;\n      }\n\n      const accessToken = this.accessTokens[this.region];\n\n      if (!accessToken) {\n        return false;\n      }\n\n      try {\n        yield this.verifyToken(accessToken, this.region);\n        return true;\n      } catch (err) {\n        return false;\n      }\n    });\n  }\n\n  isAuthorizedWithRedocly() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.hasTokens() && utils_1.isNotEmptyObject(yield this.getValidTokens());\n    });\n  }\n\n  readCredentialsFile(credentialsPath) {\n    return fs_1.existsSync(credentialsPath) ? JSON.parse(fs_1.readFileSync(credentialsPath, 'utf-8')) : {};\n  }\n\n  verifyToken(accessToken, region) {\n    let verbose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.registryApi.authStatus(accessToken, region, verbose);\n    });\n  }\n\n  login(accessToken) {\n    let verbose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return __awaiter(this, void 0, void 0, function* () {\n      const credentialsPath = path_1.resolve(os_1.homedir(), TOKEN_FILENAME);\n\n      try {\n        yield this.verifyToken(accessToken, this.region, verbose);\n      } catch (err) {\n        throw new Error('Authorization failed. Please check if you entered a valid API key.');\n      }\n\n      const credentials = Object.assign(Object.assign({}, this.readCredentialsFile(credentialsPath)), {\n        [this.region]: accessToken,\n        token: accessToken\n      });\n      this.accessTokens = credentials;\n      this.registryApi.setAccessTokens(credentials);\n      fs_1.writeFileSync(credentialsPath, JSON.stringify(credentials, null, 2));\n    });\n  }\n\n  logout() {\n    const credentialsPath = path_1.resolve(os_1.homedir(), TOKEN_FILENAME);\n\n    if (fs_1.existsSync(credentialsPath)) {\n      fs_1.unlinkSync(credentialsPath);\n    }\n  }\n\n}\n\nexports.RedoclyClient = RedoclyClient;\n\nfunction isRedoclyRegistryURL(link) {\n  const domain = config_1.env.REDOCLY_DOMAIN || config_1.DOMAINS[config_1.DEFAULT_REGION];\n  const legacyDomain = domain === 'redocly.com' ? 'redoc.ly' : domain;\n\n  if (!link.startsWith(`https://api.${domain}/registry/`) && !link.startsWith(`https://api.${legacyDomain}/registry/`)) {\n    return false;\n  }\n\n  return true;\n}\n\nexports.isRedoclyRegistryURL = isRedoclyRegistryURL;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","isRedoclyRegistryURL","RedoclyClient","fs_1","require","path_1","os_1","colorette_1","registry_api_1","config_1","utils_1","TOKEN_FILENAME","constructor","region","accessTokens","loadRegion","loadTokens","domain","DOMAINS","env","REDOCLY_DOMAIN","DEFAULT_REGION","registryApi","RegistryApi","Error","green","AVAILABLE_REGIONS","find","getRegion","hasTokens","isNotEmptyObject","hasToken","getAuthorizationHeader","setAccessTokens","credentialsPath","homedir","credentials","readCredentialsFile","assign","token","REDOCLY_AUTHORIZATION","getAllTokens","entries","filter","includes","map","getValidTokens","allTokens","verifiedTokens","allSettled","verifyToken","_","index","status","valid","getTokens","isAuthorizedWithRedoclyByRegion","accessToken","err","isAuthorizedWithRedocly","existsSync","JSON","parse","readFileSync","verbose","authStatus","login","writeFileSync","stringify","logout","unlinkSync","link","legacyDomain","startsWith"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@redocly/openapi-core/lib/redocly/index.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isRedoclyRegistryURL = exports.RedoclyClient = void 0;\nconst fs_1 = require(\"fs\");\nconst path_1 = require(\"path\");\nconst os_1 = require(\"os\");\nconst colorette_1 = require(\"colorette\");\nconst registry_api_1 = require(\"./registry-api\");\nconst config_1 = require(\"../config/config\");\nconst utils_1 = require(\"../utils\");\nconst TOKEN_FILENAME = '.redocly-config.json';\nclass RedoclyClient {\n    constructor(region) {\n        this.accessTokens = {};\n        this.region = this.loadRegion(region);\n        this.loadTokens();\n        this.domain = region ? config_1.DOMAINS[region] : config_1.env.REDOCLY_DOMAIN || config_1.DOMAINS[config_1.DEFAULT_REGION];\n        config_1.env.REDOCLY_DOMAIN = this.domain; // isRedoclyRegistryURL depends on the value to be set\n        this.registryApi = new registry_api_1.RegistryApi(this.accessTokens, this.region);\n    }\n    loadRegion(region) {\n        if (region && !config_1.DOMAINS[region]) {\n            throw new Error(`Invalid argument: region in config file.\\nGiven: ${colorette_1.green(region)}, choices: \"us\", \"eu\".`);\n        }\n        if (config_1.env.REDOCLY_DOMAIN) {\n            return (config_1.AVAILABLE_REGIONS.find((region) => config_1.DOMAINS[region] === config_1.env.REDOCLY_DOMAIN) || config_1.DEFAULT_REGION);\n        }\n        return region || config_1.DEFAULT_REGION;\n    }\n    getRegion() {\n        return this.region;\n    }\n    hasTokens() {\n        return utils_1.isNotEmptyObject(this.accessTokens);\n    }\n    // <backward compatibility: old versions of portal>\n    hasToken() {\n        return !!this.accessTokens[this.region];\n    }\n    getAuthorizationHeader() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.accessTokens[this.region];\n        });\n    }\n    // </backward compatibility: portal>\n    setAccessTokens(accessTokens) {\n        this.accessTokens = accessTokens;\n    }\n    loadTokens() {\n        const credentialsPath = path_1.resolve(os_1.homedir(), TOKEN_FILENAME);\n        const credentials = this.readCredentialsFile(credentialsPath);\n        if (utils_1.isNotEmptyObject(credentials)) {\n            this.setAccessTokens(Object.assign(Object.assign({}, credentials), (credentials.token &&\n                !credentials[this.region] && {\n                [this.region]: credentials.token,\n            })));\n        }\n        if (config_1.env.REDOCLY_AUTHORIZATION) {\n            this.setAccessTokens(Object.assign(Object.assign({}, this.accessTokens), { [this.region]: config_1.env.REDOCLY_AUTHORIZATION }));\n        }\n    }\n    getAllTokens() {\n        return Object.entries(this.accessTokens)\n            .filter(([region]) => config_1.AVAILABLE_REGIONS.includes(region))\n            .map(([region, token]) => ({ region, token }));\n    }\n    getValidTokens() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const allTokens = this.getAllTokens();\n            const verifiedTokens = yield Promise.allSettled(allTokens.map(({ token, region }) => this.verifyToken(token, region)));\n            return allTokens\n                .filter((_, index) => verifiedTokens[index].status === 'fulfilled')\n                .map(({ token, region }) => ({ token, region, valid: true }));\n        });\n    }\n    getTokens() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.hasTokens() ? yield this.getValidTokens() : [];\n        });\n    }\n    isAuthorizedWithRedoclyByRegion() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.hasTokens()) {\n                return false;\n            }\n            const accessToken = this.accessTokens[this.region];\n            if (!accessToken) {\n                return false;\n            }\n            try {\n                yield this.verifyToken(accessToken, this.region);\n                return true;\n            }\n            catch (err) {\n                return false;\n            }\n        });\n    }\n    isAuthorizedWithRedocly() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.hasTokens() && utils_1.isNotEmptyObject(yield this.getValidTokens());\n        });\n    }\n    readCredentialsFile(credentialsPath) {\n        return fs_1.existsSync(credentialsPath) ? JSON.parse(fs_1.readFileSync(credentialsPath, 'utf-8')) : {};\n    }\n    verifyToken(accessToken, region, verbose = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.registryApi.authStatus(accessToken, region, verbose);\n        });\n    }\n    login(accessToken, verbose = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const credentialsPath = path_1.resolve(os_1.homedir(), TOKEN_FILENAME);\n            try {\n                yield this.verifyToken(accessToken, this.region, verbose);\n            }\n            catch (err) {\n                throw new Error('Authorization failed. Please check if you entered a valid API key.');\n            }\n            const credentials = Object.assign(Object.assign({}, this.readCredentialsFile(credentialsPath)), { [this.region]: accessToken, token: accessToken });\n            this.accessTokens = credentials;\n            this.registryApi.setAccessTokens(credentials);\n            fs_1.writeFileSync(credentialsPath, JSON.stringify(credentials, null, 2));\n        });\n    }\n    logout() {\n        const credentialsPath = path_1.resolve(os_1.homedir(), TOKEN_FILENAME);\n        if (fs_1.existsSync(credentialsPath)) {\n            fs_1.unlinkSync(credentialsPath);\n        }\n    }\n}\nexports.RedoclyClient = RedoclyClient;\nfunction isRedoclyRegistryURL(link) {\n    const domain = config_1.env.REDOCLY_DOMAIN || config_1.DOMAINS[config_1.DEFAULT_REGION];\n    const legacyDomain = domain === 'redocly.com' ? 'redoc.ly' : domain;\n    if (!link.startsWith(`https://api.${domain}/registry/`) &&\n        !link.startsWith(`https://api.${legacyDomain}/registry/`)) {\n        return false;\n    }\n    return true;\n}\nexports.isRedoclyRegistryURL = isRedoclyRegistryURL;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}