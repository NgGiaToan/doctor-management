{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _defineProperty = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\giato\\\\Downloads\\\\Workspace\\\\.Net\\\\api\\\\doctor-management-fe\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\");\n\nvar _classCallCheck = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isRedoclyRegistryURL = exports.RedoclyClient = void 0;\n\nvar fs_1 = require(\"fs\");\n\nvar path_1 = require(\"path\");\n\nvar os_1 = require(\"os\");\n\nvar colorette_1 = require(\"colorette\");\n\nvar registry_api_1 = require(\"./registry-api\");\n\nvar config_1 = require(\"../config/config\");\n\nvar utils_1 = require(\"../utils\");\n\nvar TOKEN_FILENAME = '.redocly-config.json';\n\nvar RedoclyClient = /*#__PURE__*/function () {\n  function RedoclyClient(region) {\n    _classCallCheck(this, RedoclyClient);\n\n    this.accessTokens = {};\n    this.region = this.loadRegion(region);\n    this.loadTokens();\n    this.domain = region ? config_1.DOMAINS[region] : config_1.env.REDOCLY_DOMAIN || config_1.DOMAINS[config_1.DEFAULT_REGION];\n    config_1.env.REDOCLY_DOMAIN = this.domain; // isRedoclyRegistryURL depends on the value to be set\n\n    this.registryApi = new registry_api_1.RegistryApi(this.accessTokens, this.region);\n  }\n\n  _createClass(RedoclyClient, [{\n    key: \"loadRegion\",\n    value: function loadRegion(region) {\n      if (region && !config_1.DOMAINS[region]) {\n        throw new Error(\"Invalid argument: region in config file.\\nGiven: \".concat(colorette_1.green(region), \", choices: \\\"us\\\", \\\"eu\\\".\"));\n      }\n\n      if (config_1.env.REDOCLY_DOMAIN) {\n        return config_1.AVAILABLE_REGIONS.find(function (region) {\n          return config_1.DOMAINS[region] === config_1.env.REDOCLY_DOMAIN;\n        }) || config_1.DEFAULT_REGION;\n      }\n\n      return region || config_1.DEFAULT_REGION;\n    }\n  }, {\n    key: \"getRegion\",\n    value: function getRegion() {\n      return this.region;\n    }\n  }, {\n    key: \"hasTokens\",\n    value: function hasTokens() {\n      return utils_1.isNotEmptyObject(this.accessTokens);\n    } // <backward compatibility: old versions of portal>\n\n  }, {\n    key: \"hasToken\",\n    value: function hasToken() {\n      return !!this.accessTokens[this.region];\n    }\n  }, {\n    key: \"getAuthorizationHeader\",\n    value: function getAuthorizationHeader() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.accessTokens[this.region]);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    } // </backward compatibility: portal>\n\n  }, {\n    key: \"setAccessTokens\",\n    value: function setAccessTokens(accessTokens) {\n      this.accessTokens = accessTokens;\n    }\n  }, {\n    key: \"loadTokens\",\n    value: function loadTokens() {\n      var credentialsPath = path_1.resolve(os_1.homedir(), TOKEN_FILENAME);\n      var credentials = this.readCredentialsFile(credentialsPath);\n\n      if (utils_1.isNotEmptyObject(credentials)) {\n        this.setAccessTokens(Object.assign(Object.assign({}, credentials), credentials.token && !credentials[this.region] && _defineProperty({}, this.region, credentials.token)));\n      }\n\n      if (config_1.env.REDOCLY_AUTHORIZATION) {\n        this.setAccessTokens(Object.assign(Object.assign({}, this.accessTokens), _defineProperty({}, this.region, config_1.env.REDOCLY_AUTHORIZATION)));\n      }\n    }\n  }, {\n    key: \"getAllTokens\",\n    value: function getAllTokens() {\n      return Object.entries(this.accessTokens).filter(function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 1),\n            region = _ref3[0];\n\n        return config_1.AVAILABLE_REGIONS.includes(region);\n      }).map(function (_ref4) {\n        var _ref5 = _slicedToArray(_ref4, 2),\n            region = _ref5[0],\n            token = _ref5[1];\n\n        return {\n          region: region,\n          token: token\n        };\n      });\n    }\n  }, {\n    key: \"getValidTokens\",\n    value: function getValidTokens() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this = this;\n\n        var allTokens, verifiedTokens;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                allTokens = this.getAllTokens();\n                _context2.next = 3;\n                return Promise.allSettled(allTokens.map(function (_ref6) {\n                  var token = _ref6.token,\n                      region = _ref6.region;\n                  return _this.verifyToken(token, region);\n                }));\n\n              case 3:\n                verifiedTokens = _context2.sent;\n                return _context2.abrupt(\"return\", allTokens.filter(function (_, index) {\n                  return verifiedTokens[index].status === 'fulfilled';\n                }).map(function (_ref7) {\n                  var token = _ref7.token,\n                      region = _ref7.region;\n                  return {\n                    token: token,\n                    region: region,\n                    valid: true\n                  };\n                }));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"getTokens\",\n    value: function getTokens() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.hasTokens()) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                _context3.next = 3;\n                return this.getValidTokens();\n\n              case 3:\n                _context3.t0 = _context3.sent;\n                _context3.next = 7;\n                break;\n\n              case 6:\n                _context3.t0 = [];\n\n              case 7:\n                return _context3.abrupt(\"return\", _context3.t0);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"isAuthorizedWithRedoclyByRegion\",\n    value: function isAuthorizedWithRedoclyByRegion() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var accessToken;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this.hasTokens()) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", false);\n\n              case 2:\n                accessToken = this.accessTokens[this.region];\n\n                if (accessToken) {\n                  _context4.next = 5;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", false);\n\n              case 5:\n                _context4.prev = 5;\n                _context4.next = 8;\n                return this.verifyToken(accessToken, this.region);\n\n              case 8:\n                return _context4.abrupt(\"return\", true);\n\n              case 11:\n                _context4.prev = 11;\n                _context4.t0 = _context4[\"catch\"](5);\n                return _context4.abrupt(\"return\", false);\n\n              case 14:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[5, 11]]);\n      }));\n    }\n  }, {\n    key: \"isAuthorizedWithRedocly\",\n    value: function isAuthorizedWithRedocly() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.t0 = this.hasTokens();\n\n                if (!_context5.t0) {\n                  _context5.next = 7;\n                  break;\n                }\n\n                _context5.t1 = utils_1;\n                _context5.next = 5;\n                return this.getValidTokens();\n\n              case 5:\n                _context5.t2 = _context5.sent;\n                _context5.t0 = _context5.t1.isNotEmptyObject.call(_context5.t1, _context5.t2);\n\n              case 7:\n                return _context5.abrupt(\"return\", _context5.t0);\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"readCredentialsFile\",\n    value: function readCredentialsFile(credentialsPath) {\n      return fs_1.existsSync(credentialsPath) ? JSON.parse(fs_1.readFileSync(credentialsPath, 'utf-8')) : {};\n    }\n  }, {\n    key: \"verifyToken\",\n    value: function verifyToken(accessToken, region) {\n      var verbose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", this.registryApi.authStatus(accessToken, region, verbose));\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n  }, {\n    key: \"login\",\n    value: function login(accessToken) {\n      var verbose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var _Object$assign2;\n\n        var credentialsPath, credentials;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                credentialsPath = path_1.resolve(os_1.homedir(), TOKEN_FILENAME);\n                _context7.prev = 1;\n                _context7.next = 4;\n                return this.verifyToken(accessToken, this.region, verbose);\n\n              case 4:\n                _context7.next = 9;\n                break;\n\n              case 6:\n                _context7.prev = 6;\n                _context7.t0 = _context7[\"catch\"](1);\n                throw new Error('Authorization failed. Please check if you entered a valid API key.');\n\n              case 9:\n                credentials = Object.assign(Object.assign({}, this.readCredentialsFile(credentialsPath)), (_Object$assign2 = {}, _defineProperty(_Object$assign2, this.region, accessToken), _defineProperty(_Object$assign2, \"token\", accessToken), _Object$assign2));\n                this.accessTokens = credentials;\n                this.registryApi.setAccessTokens(credentials);\n                fs_1.writeFileSync(credentialsPath, JSON.stringify(credentials, null, 2));\n\n              case 13:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[1, 6]]);\n      }));\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      var credentialsPath = path_1.resolve(os_1.homedir(), TOKEN_FILENAME);\n\n      if (fs_1.existsSync(credentialsPath)) {\n        fs_1.unlinkSync(credentialsPath);\n      }\n    }\n  }]);\n\n  return RedoclyClient;\n}();\n\nexports.RedoclyClient = RedoclyClient;\n\nfunction isRedoclyRegistryURL(link) {\n  var domain = config_1.env.REDOCLY_DOMAIN || config_1.DOMAINS[config_1.DEFAULT_REGION];\n  var legacyDomain = domain === 'redocly.com' ? 'redoc.ly' : domain;\n\n  if (!link.startsWith(\"https://api.\".concat(domain, \"/registry/\")) && !link.startsWith(\"https://api.\".concat(legacyDomain, \"/registry/\"))) {\n    return false;\n  }\n\n  return true;\n}\n\nexports.isRedoclyRegistryURL = isRedoclyRegistryURL;","map":null,"metadata":{},"sourceType":"script"}