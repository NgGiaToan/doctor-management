{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar validate_1 = require(\"../../compile/validate\");\n\nvar code_1 = require(\"../code\");\n\nvar util_1 = require(\"../../compile/util\");\n\nvar additionalProperties_1 = require(\"./additionalProperties\");\n\nvar def = {\n  keyword: \"properties\",\n  type: \"object\",\n  schemaType: \"object\",\n  code: function code(cxt) {\n    var gen = cxt.gen,\n        schema = cxt.schema,\n        parentSchema = cxt.parentSchema,\n        data = cxt.data,\n        it = cxt.it;\n\n    if (it.opts.removeAdditional === \"all\" && parentSchema.additionalProperties === undefined || it.opts.defaultAdditionalProperties === false) {\n      additionalProperties_1.default.code(new validate_1.KeywordCxt(it, additionalProperties_1.default, \"additionalProperties\"));\n    }\n\n    var allProps = code_1.allSchemaProperties(schema);\n\n    var _iterator = _createForOfIteratorHelper(allProps),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        it.definedProperties.add(prop);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    if (it.opts.unevaluated && allProps.length && it.props !== true) {\n      it.props = util_1.mergeEvaluated.props(gen, util_1.toHash(allProps), it.props);\n    }\n\n    var properties = allProps.filter(function (p) {\n      return !util_1.alwaysValidSchema(it, schema[p]);\n    });\n    if (properties.length === 0) return;\n    var valid = gen.name(\"valid\");\n\n    var _iterator2 = _createForOfIteratorHelper(properties),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _prop = _step2.value;\n\n        if (hasDefault(_prop)) {\n          applyPropertySchema(_prop);\n        } else {\n          gen.if(code_1.propertyInData(gen, data, _prop, it.opts.ownProperties));\n          applyPropertySchema(_prop);\n          if (!it.allErrors) gen.else().var(valid, true);\n          gen.endIf();\n        }\n\n        cxt.it.definedProperties.add(_prop);\n        cxt.ok(valid);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    function hasDefault(prop) {\n      return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== undefined;\n    }\n\n    function applyPropertySchema(prop) {\n      cxt.subschema({\n        keyword: \"properties\",\n        schemaProp: prop,\n        dataProp: prop\n      }, valid);\n    }\n  }\n};\nexports.default = def; //# sourceMappingURL=properties.js.map","map":null,"metadata":{},"sourceType":"script"}