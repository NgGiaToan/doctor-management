{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\giato\\\\Downloads\\\\Workspace\\\\.Net\\\\api\\\\doctor-management-fe\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\");\n\nvar _classCallCheck = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RegistryApi = void 0;\n\nvar node_fetch_1 = require(\"node-fetch\");\n\nvar config_1 = require(\"../config/config\");\n\nvar utils_1 = require(\"../utils\");\n\nvar version = require('../../package.json').version;\n\nvar RegistryApi = /*#__PURE__*/function () {\n  function RegistryApi(accessTokens, region) {\n    _classCallCheck(this, RegistryApi);\n\n    this.accessTokens = accessTokens;\n    this.region = region;\n  }\n\n  _createClass(RegistryApi, [{\n    key: \"accessToken\",\n    get: function get() {\n      return utils_1.isNotEmptyObject(this.accessTokens) && this.accessTokens[this.region];\n    }\n  }, {\n    key: \"getBaseUrl\",\n    value: function getBaseUrl() {\n      var region = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : config_1.DEFAULT_REGION;\n      return \"https://api.\".concat(config_1.DOMAINS[region], \"/registry\");\n    }\n  }, {\n    key: \"setAccessTokens\",\n    value: function setAccessTokens(accessTokens) {\n      this.accessTokens = accessTokens;\n      return this;\n    }\n  }, {\n    key: \"request\",\n    value: function request() {\n      var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var region = arguments.length > 2 ? arguments[2] : undefined;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var headers, response, body;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                headers = Object.assign({}, options.headers || {}, {\n                  'x-redocly-cli-version': version\n                });\n\n                if (headers.hasOwnProperty('authorization')) {\n                  _context.next = 3;\n                  break;\n                }\n\n                throw new Error('Unauthorized');\n\n              case 3:\n                _context.next = 5;\n                return node_fetch_1.default(\"\".concat(this.getBaseUrl(region)).concat(path), Object.assign({}, options, {\n                  headers: headers\n                }));\n\n              case 5:\n                response = _context.sent;\n\n                if (!(response.status === 401)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw new Error('Unauthorized');\n\n              case 8:\n                if (!(response.status === 404)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                _context.next = 11;\n                return response.json();\n\n              case 11:\n                body = _context.sent;\n                throw new Error(body.code);\n\n              case 13:\n                return _context.abrupt(\"return\", response);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"authStatus\",\n    value: function authStatus(accessToken, region) {\n      var verbose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return this.request('', {\n                  headers: {\n                    authorization: accessToken\n                  }\n                }, region);\n\n              case 3:\n                response = _context2.sent;\n                _context2.next = 6;\n                return response.json();\n\n              case 6:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](0);\n\n                if (verbose) {\n                  console.log(_context2.t0);\n                }\n\n                throw _context2.t0;\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 9]]);\n      }));\n    }\n  }, {\n    key: \"prepareFileUpload\",\n    value: function prepareFileUpload(_ref) {\n      var organizationId = _ref.organizationId,\n          name = _ref.name,\n          version = _ref.version,\n          filesHash = _ref.filesHash,\n          filename = _ref.filename,\n          isUpsert = _ref.isUpsert;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.request(\"/\".concat(organizationId, \"/\").concat(name, \"/\").concat(version, \"/prepare-file-upload\"), {\n                  method: 'POST',\n                  headers: {\n                    'content-type': 'application/json',\n                    authorization: this.accessToken\n                  },\n                  body: JSON.stringify({\n                    filesHash: filesHash,\n                    filename: filename,\n                    isUpsert: isUpsert\n                  })\n                }, this.region);\n\n              case 2:\n                response = _context3.sent;\n\n                if (!response.ok) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", response.json());\n\n              case 5:\n                throw new Error('Could not prepare file upload');\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"pushApi\",\n    value: function pushApi(_ref2) {\n      var organizationId = _ref2.organizationId,\n          name = _ref2.name,\n          version = _ref2.version,\n          rootFilePath = _ref2.rootFilePath,\n          filePaths = _ref2.filePaths,\n          branch = _ref2.branch,\n          isUpsert = _ref2.isUpsert,\n          isPublic = _ref2.isPublic;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.request(\"/\".concat(organizationId, \"/\").concat(name, \"/\").concat(version), {\n                  method: 'PUT',\n                  headers: {\n                    'content-type': 'application/json',\n                    authorization: this.accessToken\n                  },\n                  body: JSON.stringify({\n                    rootFilePath: rootFilePath,\n                    filePaths: filePaths,\n                    branch: branch,\n                    isUpsert: isUpsert,\n                    isPublic: isPublic\n                  })\n                }, this.region);\n\n              case 2:\n                response = _context4.sent;\n\n                if (!response.ok) {\n                  _context4.next = 5;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 5:\n                throw new Error('Could not push api');\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }]);\n\n  return RegistryApi;\n}();\n\nexports.RegistryApi = RegistryApi;","map":null,"metadata":{},"sourceType":"script"}