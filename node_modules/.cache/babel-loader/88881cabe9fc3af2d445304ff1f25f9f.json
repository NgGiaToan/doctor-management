{"ast":null,"code":"import _objectSpread from\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _asyncToGenerator from\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\giato\\\\Downloads\\\\Workspace\\\\.Net\\\\api\\\\doctor-management-fe\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import FuseUtils from'@fuse/utils';import _ from'@lodash';import Base64 from'crypto-js/enc-base64';import HmacSHA256 from'crypto-js/hmac-sha256';import Utf8 from'crypto-js/enc-utf8';import jwtDecode from'jwt-decode';import mock from'../mock';import mockApi from'../mock-api.json';var usersApi=mockApi.components.examples.auth_users.value;/* eslint-disable camelcase */mock.onGet('/api/auth/sign-in').reply(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(config){var data,email,password,user,error,access_token,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:data=JSON.parse(config.data);email=data.email,password=data.password;user=_.cloneDeep(usersApi.find(function(_user){return _user.data.email===email;}));error=[];if(!user){error.push({type:'email',message:'Check your email address'});}if(user&&user.password!==password){error.push({type:'password',message:'Check your password'});}if(!(error.length===0)){_context.next=11;break;}delete user.password;access_token=generateJWTToken({id:user.uuid});response={user:user,access_token:access_token};return _context.abrupt(\"return\",[200,response]);case 11:return _context.abrupt(\"return\",[200,{error:error}]);case 12:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());mock.onGet('/api/auth/access-token').reply(function(config){var data=JSON.parse(config.data);var access_token=data.access_token;if(verifyJWTToken(access_token)){var _jwtDecode=jwtDecode(access_token),id=_jwtDecode.id;var user=_.cloneDeep(usersApi.find(function(_user){return _user.uuid===id;}));delete user.password;var updatedAccessToken=generateJWTToken({id:user.uuid});var response={user:user,access_token:updatedAccessToken};return[200,response];}var error='Invalid access token detected';return[401,{error:error}];});mock.onPost('/api/auth/sign-up').reply(function(request){var data=JSON.parse(request.data);var displayName=data.displayName,password=data.password,email=data.email;var isEmailExists=usersApi.find(function(_user){return _user.data.email===email;});var error=[];if(isEmailExists){error.push({type:'email',message:'The email address is already in use'});}if(error.length===0){var newUser={uuid:FuseUtils.generateGUID(),from:'custom-db',password:password,role:'admin',data:{displayName:displayName,photoURL:'assets/images/avatars/Abbott.jpg',email:email,settings:{},shortcuts:[]}};usersApi=[].concat(_toConsumableArray(usersApi),[newUser]);var user=_.cloneDeep(newUser);delete user.password;var access_token=generateJWTToken({id:user.uuid});var response={user:user,access_token:access_token};return[200,response];}return[200,{error:error}];});mock.onPost('/api/auth/user/update').reply(function(config){var data=JSON.parse(config.data);var user=data.user;usersApi=usersApi.map(function(_user){if(user.uuid===user.id){return _.merge(_user,user);}return _user;});return[200,user];});/**\r\n * JWT Token Generator/Verifier Helpers\r\n * !! Created for Demonstration Purposes, cannot be used for PRODUCTION\r\n */var jwtSecret='some-secret-code-goes-here';function base64url(source){// Encode in classical base64\nvar encodedSource=Base64.stringify(source);// Remove padding equal characters\nencodedSource=encodedSource.replace(/=+$/,'');// Replace characters according to base64url specifications\nencodedSource=encodedSource.replace(/\\+/g,'-');encodedSource=encodedSource.replace(/\\//g,'_');// Return the base64 encoded string\nreturn encodedSource;}function generateJWTToken(tokenPayload){// Define token header\nvar header={alg:'HS256',typ:'JWT'};// Calculate the issued at and expiration dates\nvar date=new Date();var iat=Math.floor(date.getTime()/1000);var exp=Math.floor(date.setDate(date.getDate()+7)/1000);// Define token payload\nvar payload=_objectSpread({iat:iat,iss:'Fuse',exp:exp},tokenPayload);// Stringify and encode the header\nvar stringifiedHeader=Utf8.parse(JSON.stringify(header));var encodedHeader=base64url(stringifiedHeader);// Stringify and encode the payload\nvar stringifiedPayload=Utf8.parse(JSON.stringify(payload));var encodedPayload=base64url(stringifiedPayload);// Sign the encoded header and mock-api\nvar signature=\"\".concat(encodedHeader,\".\").concat(encodedPayload);signature=HmacSHA256(signature,jwtSecret);signature=base64url(signature);// Build and return the token\nreturn\"\".concat(encodedHeader,\".\").concat(encodedPayload,\".\").concat(signature);}function verifyJWTToken(token){// Split the token into parts\nvar parts=token.split('.');var header=parts[0];var payload=parts[1];var signature=parts[2];// Re-sign and encode the header and payload using the secret\nvar signatureCheck=base64url(HmacSHA256(\"\".concat(header,\".\").concat(payload),jwtSecret));// Verify that the resulting signature is valid\nreturn signature===signatureCheck;}","map":null,"metadata":{},"sourceType":"module"}