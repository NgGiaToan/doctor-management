{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isMappingRef = exports.isAbsoluteUrl = exports.refBaseName = exports.pointerBaseName = exports.parsePointer = exports.parseRef = exports.escapePointer = exports.unescapePointer = exports.Location = exports.isRef = exports.joinPointer = void 0;\n\nfunction joinPointer(base, key) {\n  if (base === '') base = '#/';\n  return base[base.length - 1] === '/' ? base + key : base + '/' + key;\n}\n\nexports.joinPointer = joinPointer;\n\nfunction isRef(node) {\n  return node && typeof node.$ref === 'string';\n}\n\nexports.isRef = isRef;\n\nvar Location = /*#__PURE__*/function () {\n  function Location(source, pointer) {\n    _classCallCheck(this, Location);\n\n    this.source = source;\n    this.pointer = pointer;\n  }\n\n  _createClass(Location, [{\n    key: \"child\",\n    value: function child(components) {\n      return new Location(this.source, joinPointer(this.pointer, (Array.isArray(components) ? components : [components]).map(escapePointer).join('/')));\n    }\n  }, {\n    key: \"key\",\n    value: function key() {\n      return Object.assign(Object.assign({}, this), {\n        reportOnKey: true\n      });\n    }\n  }, {\n    key: \"absolutePointer\",\n    get: function get() {\n      return this.source.absoluteRef + (this.pointer === '#/' ? '' : this.pointer);\n    }\n  }]);\n\n  return Location;\n}();\n\nexports.Location = Location;\n\nfunction unescapePointer(fragment) {\n  return decodeURIComponent(fragment.replace(/~1/g, '/').replace(/~0/g, '~'));\n}\n\nexports.unescapePointer = unescapePointer;\n\nfunction escapePointer(fragment) {\n  if (typeof fragment === 'number') return fragment;\n  return fragment.replace(/~/g, '~0').replace(/\\//g, '~1');\n}\n\nexports.escapePointer = escapePointer;\n\nfunction parseRef(ref) {\n  var _ref$split = ref.split('#/'),\n      _ref$split2 = _slicedToArray(_ref$split, 2),\n      uri = _ref$split2[0],\n      pointer = _ref$split2[1];\n\n  return {\n    uri: uri || null,\n    pointer: pointer ? pointer.split('/').map(unescapePointer).filter(Boolean) : []\n  };\n}\n\nexports.parseRef = parseRef;\n\nfunction parsePointer(pointer) {\n  return pointer.substr(2).split('/').map(unescapePointer);\n}\n\nexports.parsePointer = parsePointer;\n\nfunction pointerBaseName(pointer) {\n  var parts = pointer.split('/');\n  return parts[parts.length - 1];\n}\n\nexports.pointerBaseName = pointerBaseName;\n\nfunction refBaseName(ref) {\n  var parts = ref.split(/[\\/\\\\]/); // split by '\\' and '/'\n\n  return parts[parts.length - 1].replace(/\\.[^.]+$/, ''); // replace extension with empty string\n}\n\nexports.refBaseName = refBaseName;\n\nfunction isAbsoluteUrl(ref) {\n  return ref.startsWith('http://') || ref.startsWith('https://');\n}\n\nexports.isAbsoluteUrl = isAbsoluteUrl;\n\nfunction isMappingRef(mapping) {\n  // TODO: proper detection of mapping refs\n  return mapping.startsWith('#') || mapping.startsWith('https://') || mapping.startsWith('./') || mapping.startsWith('../') || mapping.indexOf('/') > -1;\n}\n\nexports.isMappingRef = isMappingRef;","map":null,"metadata":{},"sourceType":"script"}