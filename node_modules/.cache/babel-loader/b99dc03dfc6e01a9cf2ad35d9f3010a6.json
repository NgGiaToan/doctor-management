{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Oas2Types = void 0;\n\nvar _1 = require(\".\");\n\nvar responseCodeRegexp = /^[0-9][0-9Xx]{2}$/;\nvar DefinitionRoot = {\n  properties: {\n    swagger: {\n      type: 'string'\n    },\n    info: 'Info',\n    host: {\n      type: 'string'\n    },\n    basePath: {\n      type: 'string'\n    },\n    schemes: {\n      type: 'array',\n      items: {\n        type: 'string'\n      }\n    },\n    consumes: {\n      type: 'array',\n      items: {\n        type: 'string'\n      }\n    },\n    produces: {\n      type: 'array',\n      items: {\n        type: 'string'\n      }\n    },\n    paths: 'PathMap',\n    definitions: 'NamedSchemas',\n    parameters: 'NamedParameters',\n    responses: 'NamedResponses',\n    securityDefinitions: 'NamedSecuritySchemes',\n    security: _1.listOf('SecurityRequirement'),\n    tags: _1.listOf('Tag'),\n    externalDocs: 'ExternalDocs'\n  },\n  required: ['swagger', 'paths', 'info']\n};\nvar Info = {\n  properties: {\n    title: {\n      type: 'string'\n    },\n    description: {\n      type: 'string'\n    },\n    termsOfService: {\n      type: 'string'\n    },\n    contact: 'Contact',\n    license: 'License',\n    version: {\n      type: 'string'\n    }\n  },\n  required: ['title', 'version']\n};\nvar Contact = {\n  properties: {\n    name: {\n      type: 'string'\n    },\n    url: {\n      type: 'string'\n    },\n    email: {\n      type: 'string'\n    }\n  }\n};\nvar License = {\n  properties: {\n    name: {\n      type: 'string'\n    },\n    url: {\n      type: 'string'\n    }\n  },\n  required: ['name']\n};\nvar PathMap = {\n  properties: {},\n  additionalProperties: function additionalProperties(_value, key) {\n    return key.startsWith('/') ? 'PathItem' : undefined;\n  }\n};\nvar PathItem = {\n  properties: {\n    $ref: {\n      type: 'string'\n    },\n    parameters: _1.listOf('Parameter'),\n    get: 'Operation',\n    put: 'Operation',\n    post: 'Operation',\n    delete: 'Operation',\n    options: 'Operation',\n    head: 'Operation',\n    patch: 'Operation'\n  }\n};\nvar Operation = {\n  properties: {\n    tags: {\n      type: 'array',\n      items: {\n        type: 'string'\n      }\n    },\n    summary: {\n      type: 'string'\n    },\n    description: {\n      type: 'string'\n    },\n    externalDocs: 'ExternalDocs',\n    operationId: {\n      type: 'string'\n    },\n    consumes: {\n      type: 'array',\n      items: {\n        type: 'string'\n      }\n    },\n    produces: {\n      type: 'array',\n      items: {\n        type: 'string'\n      }\n    },\n    parameters: _1.listOf('Parameter'),\n    responses: 'ResponsesMap',\n    schemes: {\n      type: 'array',\n      items: {\n        type: 'string'\n      }\n    },\n    deprecated: {\n      type: 'boolean'\n    },\n    security: _1.listOf('SecurityRequirement'),\n    'x-codeSamples': _1.listOf('XCodeSample'),\n    'x-code-samples': _1.listOf('XCodeSample') // deprecated\n\n  },\n  required: ['responses']\n};\nvar XCodeSample = {\n  properties: {\n    lang: {\n      type: 'string'\n    },\n    label: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    }\n  }\n};\nvar ExternalDocs = {\n  properties: {\n    description: {\n      type: 'string'\n    },\n    url: {\n      type: 'string'\n    }\n  },\n  required: ['url']\n};\nvar Parameter = {\n  properties: {\n    name: {\n      type: 'string'\n    },\n    in: {\n      type: 'string',\n      enum: ['query', 'header', 'path', 'formData', 'body']\n    },\n    description: {\n      type: 'string'\n    },\n    required: {\n      type: 'boolean'\n    },\n    schema: 'Schema',\n    type: {\n      type: 'string',\n      enum: ['string', 'number', 'integer', 'boolean', 'array', 'file']\n    },\n    format: {\n      type: 'string'\n    },\n    allowEmptyValue: {\n      type: 'boolean'\n    },\n    items: 'ParameterItems',\n    collectionFormat: {\n      type: 'string',\n      enum: ['csv', 'ssv', 'tsv', 'pipes', 'multi']\n    },\n    default: null,\n    maximum: {\n      type: 'integer'\n    },\n    exclusiveMaximum: {\n      type: 'boolean'\n    },\n    minimum: {\n      type: 'integer'\n    },\n    exclusiveMinimum: {\n      type: 'boolean'\n    },\n    maxLength: {\n      type: 'integer'\n    },\n    minLength: {\n      type: 'integer'\n    },\n    pattern: {\n      type: 'string'\n    },\n    maxItems: {\n      type: 'integer'\n    },\n    minItems: {\n      type: 'integer'\n    },\n    uniqueItems: {\n      type: 'boolean'\n    },\n    enum: {\n      type: 'array'\n    },\n    multipleOf: {\n      type: 'number'\n    }\n  },\n  required: function required(value) {\n    if (!value || !value.in) {\n      return ['name', 'in'];\n    }\n\n    if (value.in === 'body') {\n      return ['name', 'in', 'schema'];\n    } else {\n      if (value.type === 'array') {\n        return ['name', 'in', 'type', 'items'];\n      } else {\n        return ['name', 'in', 'type'];\n      }\n    }\n  }\n};\nvar ParameterItems = {\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['string', 'number', 'integer', 'boolean', 'array']\n    },\n    format: {\n      type: 'string'\n    },\n    items: 'ParameterItems',\n    collectionFormat: {\n      type: 'string',\n      enum: ['csv', 'ssv', 'tsv', 'pipes', 'multi']\n    },\n    default: null,\n    maximum: {\n      type: 'integer'\n    },\n    exclusiveMaximum: {\n      type: 'boolean'\n    },\n    minimum: {\n      type: 'integer'\n    },\n    exclusiveMinimum: {\n      type: 'boolean'\n    },\n    maxLength: {\n      type: 'integer'\n    },\n    minLength: {\n      type: 'integer'\n    },\n    pattern: {\n      type: 'string'\n    },\n    maxItems: {\n      type: 'integer'\n    },\n    minItems: {\n      type: 'integer'\n    },\n    uniqueItems: {\n      type: 'boolean'\n    },\n    enum: {\n      type: 'array'\n    },\n    multipleOf: {\n      type: 'number'\n    }\n  },\n  required: function required(value) {\n    if (value && value.type === 'array') {\n      return ['type', 'items'];\n    } else {\n      return ['type'];\n    }\n  }\n};\nvar ResponsesMap = {\n  properties: {\n    default: 'Response'\n  },\n  additionalProperties: function additionalProperties(_v, key) {\n    return responseCodeRegexp.test(key) ? 'Response' : undefined;\n  }\n};\nvar Response = {\n  properties: {\n    description: {\n      type: 'string'\n    },\n    schema: 'Schema',\n    headers: _1.mapOf('Header'),\n    examples: 'Examples'\n  },\n  required: ['description']\n};\nvar Examples = {\n  properties: {},\n  additionalProperties: {\n    isExample: true\n  }\n};\nvar Header = {\n  properties: {\n    description: {\n      type: 'string'\n    },\n    type: {\n      type: 'string',\n      enum: ['string', 'number', 'integer', 'boolean', 'array']\n    },\n    format: {\n      type: 'string'\n    },\n    items: 'ParameterItems',\n    collectionFormat: {\n      type: 'string',\n      enum: ['csv', 'ssv', 'tsv', 'pipes', 'multi']\n    },\n    default: null,\n    maximum: {\n      type: 'integer'\n    },\n    exclusiveMaximum: {\n      type: 'boolean'\n    },\n    minimum: {\n      type: 'integer'\n    },\n    exclusiveMinimum: {\n      type: 'boolean'\n    },\n    maxLength: {\n      type: 'integer'\n    },\n    minLength: {\n      type: 'integer'\n    },\n    pattern: {\n      type: 'string'\n    },\n    maxItems: {\n      type: 'integer'\n    },\n    minItems: {\n      type: 'integer'\n    },\n    uniqueItems: {\n      type: 'boolean'\n    },\n    enum: {\n      type: 'array'\n    },\n    multipleOf: {\n      type: 'number'\n    }\n  },\n  required: function required(value) {\n    if (value && value.type === 'array') {\n      return ['type', 'items'];\n    } else {\n      return ['type'];\n    }\n  }\n};\nvar Tag = {\n  properties: {\n    name: {\n      type: 'string'\n    },\n    description: {\n      type: 'string'\n    },\n    externalDocs: 'ExternalDocs'\n  },\n  required: ['name']\n};\nvar Schema = {\n  properties: {\n    format: {\n      type: 'string'\n    },\n    title: {\n      type: 'string'\n    },\n    description: {\n      type: 'string'\n    },\n    default: null,\n    multipleOf: {\n      type: 'number'\n    },\n    maximum: {\n      type: 'number'\n    },\n    minimum: {\n      type: 'number'\n    },\n    exclusiveMaximum: {\n      type: 'boolean'\n    },\n    exclusiveMinimum: {\n      type: 'boolean'\n    },\n    maxLength: {\n      type: 'number'\n    },\n    minLength: {\n      type: 'number'\n    },\n    pattern: {\n      type: 'string'\n    },\n    maxItems: {\n      type: 'number'\n    },\n    minItems: {\n      type: 'number'\n    },\n    uniqueItems: {\n      type: 'boolean'\n    },\n    maxProperties: {\n      type: 'number'\n    },\n    minProperties: {\n      type: 'number'\n    },\n    required: {\n      type: 'array',\n      items: {\n        type: 'string'\n      }\n    },\n    enum: {\n      type: 'array'\n    },\n    type: {\n      type: 'string',\n      enum: ['object', 'array', 'string', 'number', 'integer', 'boolean', 'null']\n    },\n    items: function items(value) {\n      if (Array.isArray(value)) {\n        return _1.listOf('Schema');\n      } else {\n        return 'Schema';\n      }\n    },\n    allOf: _1.listOf('Schema'),\n    properties: 'SchemaProperties',\n    additionalProperties: function additionalProperties(value) {\n      if (typeof value === 'boolean') {\n        return {\n          type: 'boolean'\n        };\n      } else {\n        return 'Schema';\n      }\n    },\n    discriminator: {\n      type: 'string'\n    },\n    readOnly: {\n      type: 'boolean'\n    },\n    xml: 'Xml',\n    externalDocs: 'ExternalDocs',\n    example: {\n      isExample: true\n    }\n  }\n};\nvar SchemaProperties = {\n  properties: {},\n  additionalProperties: 'Schema'\n};\nvar Xml = {\n  properties: {\n    name: {\n      type: 'string'\n    },\n    namespace: {\n      type: 'string'\n    },\n    prefix: {\n      type: 'string'\n    },\n    attribute: {\n      type: 'boolean'\n    },\n    wrapped: {\n      type: 'boolean'\n    }\n  }\n};\nvar SecurityScheme = {\n  properties: {\n    type: {\n      enum: ['basic', 'apiKey', 'oauth2']\n    },\n    description: {\n      type: 'string'\n    },\n    name: {\n      type: 'string'\n    },\n    in: {\n      type: 'string',\n      enum: ['query', 'header']\n    },\n    flow: {\n      enum: ['implicit', 'password', 'application', 'accessCode']\n    },\n    authorizationUrl: {\n      type: 'string'\n    },\n    tokenUrl: {\n      type: 'string'\n    },\n    scopes: {\n      type: 'object',\n      additionalProperties: {\n        type: 'string'\n      }\n    }\n  },\n  required: function required(value) {\n    switch (value === null || value === void 0 ? void 0 : value.type) {\n      case 'apiKey':\n        return ['type', 'name', 'in'];\n\n      case 'oauth2':\n        switch (value === null || value === void 0 ? void 0 : value.flow) {\n          case 'implicit':\n            return ['type', 'flow', 'authorizationUrl', 'scopes'];\n\n          case 'accessCode':\n            return ['type', 'flow', 'authorizationUrl', 'tokenUrl', 'scopes'];\n\n          case 'application':\n          case 'password':\n            return ['type', 'flow', 'tokenUrl', 'scopes'];\n\n          default:\n            return ['type', 'flow', 'scopes'];\n        }\n\n      default:\n        return ['type'];\n    }\n  },\n  allowed: function allowed(value) {\n    switch (value === null || value === void 0 ? void 0 : value.type) {\n      case 'basic':\n        return ['type', 'description'];\n\n      case 'apiKey':\n        return ['type', 'name', 'in', 'description'];\n\n      case 'oauth2':\n        switch (value === null || value === void 0 ? void 0 : value.flow) {\n          case 'implicit':\n            return ['type', 'flow', 'authorizationUrl', 'description', 'scopes'];\n\n          case 'accessCode':\n            return ['type', 'flow', 'authorizationUrl', 'tokenUrl', 'description', 'scopes'];\n\n          case 'application':\n          case 'password':\n            return ['type', 'flow', 'tokenUrl', 'description', 'scopes'];\n\n          default:\n            return ['type', 'flow', 'tokenUrl', 'authorizationUrl', 'description', 'scopes'];\n        }\n\n      default:\n        return ['type', 'description'];\n    }\n  },\n  extensionsPrefix: 'x-'\n};\nvar SecurityRequirement = {\n  properties: {},\n  additionalProperties: {\n    type: 'array',\n    items: {\n      type: 'string'\n    }\n  }\n};\nexports.Oas2Types = {\n  DefinitionRoot: DefinitionRoot,\n  Tag: Tag,\n  ExternalDocs: ExternalDocs,\n  SecurityRequirement: SecurityRequirement,\n  Info: Info,\n  Contact: Contact,\n  License: License,\n  PathMap: PathMap,\n  PathItem: PathItem,\n  Parameter: Parameter,\n  ParameterItems: ParameterItems,\n  Operation: Operation,\n  Examples: Examples,\n  Header: Header,\n  ResponsesMap: ResponsesMap,\n  Response: Response,\n  Schema: Schema,\n  Xml: Xml,\n  SchemaProperties: SchemaProperties,\n  NamedSchemas: _1.mapOf('Schema'),\n  NamedResponses: _1.mapOf('Response'),\n  NamedParameters: _1.mapOf('Parameter'),\n  NamedSecuritySchemes: _1.mapOf('SecurityScheme'),\n  SecurityScheme: SecurityScheme,\n  XCodeSample: XCodeSample\n};","map":null,"metadata":{},"sourceType":"script"}