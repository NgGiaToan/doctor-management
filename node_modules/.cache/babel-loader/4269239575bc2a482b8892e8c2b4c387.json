{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _taggedTemplateLiteral = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\n\nvar _templateObject, _templateObject2;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar code_1 = require(\"../code\");\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar util_1 = require(\"../../compile/util\");\n\nvar error = {\n  message: function message(_ref) {\n    var missingProperty = _ref.params.missingProperty;\n    return codegen_1.str(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must have required property '\", \"'\"])), missingProperty);\n  },\n  params: function params(_ref2) {\n    var missingProperty = _ref2.params.missingProperty;\n    return codegen_1._(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{missingProperty: \", \"}\"])), missingProperty);\n  }\n};\nvar def = {\n  keyword: \"required\",\n  type: \"object\",\n  schemaType: \"array\",\n  $data: true,\n  error: error,\n  code: function code(cxt) {\n    var gen = cxt.gen,\n        schema = cxt.schema,\n        schemaCode = cxt.schemaCode,\n        data = cxt.data,\n        $data = cxt.$data,\n        it = cxt.it;\n    var opts = it.opts;\n    if (!$data && schema.length === 0) return;\n    var useLoop = schema.length >= opts.loopRequired;\n    if (it.allErrors) allErrorsMode();else exitOnErrorMode();\n\n    if (opts.strictRequired) {\n      var props = cxt.parentSchema.properties;\n      var definedProperties = cxt.it.definedProperties;\n\n      var _iterator = _createForOfIteratorHelper(schema),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var requiredKey = _step.value;\n\n          if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === undefined && !definedProperties.has(requiredKey)) {\n            var schemaPath = it.schemaEnv.baseId + it.errSchemaPath;\n            var msg = \"required property \\\"\".concat(requiredKey, \"\\\" is not defined at \\\"\").concat(schemaPath, \"\\\" (strictRequired)\");\n            util_1.checkStrictMode(it, msg, it.opts.strictRequired);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    function allErrorsMode() {\n      if (useLoop || $data) {\n        cxt.block$data(codegen_1.nil, loopAllRequired);\n      } else {\n        var _iterator2 = _createForOfIteratorHelper(schema),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var prop = _step2.value;\n            code_1.checkReportMissingProp(cxt, prop);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n\n    function exitOnErrorMode() {\n      var missing = gen.let(\"missing\");\n\n      if (useLoop || $data) {\n        var valid = gen.let(\"valid\", true);\n        cxt.block$data(valid, function () {\n          return loopUntilMissing(missing, valid);\n        });\n        cxt.ok(valid);\n      } else {\n        gen.if(code_1.checkMissingProp(cxt, schema, missing));\n        code_1.reportMissingProp(cxt, missing);\n        gen.else();\n      }\n    }\n\n    function loopAllRequired() {\n      gen.forOf(\"prop\", schemaCode, function (prop) {\n        cxt.setParams({\n          missingProperty: prop\n        });\n        gen.if(code_1.noPropertyInData(gen, data, prop, opts.ownProperties), function () {\n          return cxt.error();\n        });\n      });\n    }\n\n    function loopUntilMissing(missing, valid) {\n      cxt.setParams({\n        missingProperty: missing\n      });\n      gen.forOf(missing, schemaCode, function () {\n        gen.assign(valid, code_1.propertyInData(gen, data, missing, opts.ownProperties));\n        gen.if(codegen_1.not(valid), function () {\n          cxt.error();\n          gen.break();\n        });\n      }, codegen_1.nil);\n    }\n  }\n};\nexports.default = def; //# sourceMappingURL=required.js.map","map":null,"metadata":{},"sourceType":"script"}