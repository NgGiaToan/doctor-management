{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\giato\\\\Downloads\\\\Workspace\\\\.Net\\\\api\\\\doctor-management-fe\\\\src\\\\app\\\\main\\\\documentation\\\\material-ui-components\\\\components\\\\autocomplete\\\\GoogleMaps.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle'; // This key was created specifically for the demo in mui.com.\n// You need to create a new one for your application.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GOOGLE_MAPS_API_KEY = 'AIzaSyC3aviU6KHXAjoSnxcw6qbOhjnFctbxPkE';\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement('script');\n  script.setAttribute('async', '');\n  script.setAttribute('id', id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = {\n  current: null\n};\nexport default function GoogleMaps() {\n  _s();\n\n  const [value, setValue] = React.useState(null);\n  const [inputValue, setInputValue] = React.useState('');\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false);\n\n  if (typeof window !== 'undefined' && !loaded.current) {\n    if (!document.querySelector('#google-maps')) {\n      loadScript(`https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}&libraries=places`, document.querySelector('head'), 'google-maps');\n    }\n\n    loaded.current = true;\n  }\n\n  const fetch = React.useMemo(() => throttle((request, callback) => {\n    autocompleteService.current.getPlacePredictions(request, callback);\n  }, 200), []);\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === '') {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({\n      input: inputValue\n    }, results => {\n      if (active) {\n        let newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [...newOptions, ...results];\n        }\n\n        setOptions(newOptions);\n      }\n    });\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    id: \"google-map-demo\",\n    sx: {\n      width: 300\n    },\n    getOptionLabel: option => typeof option === 'string' ? option : option.description,\n    filterOptions: x => x,\n    options: options,\n    autoComplete: true,\n    includeInputInList: true,\n    filterSelectedOptions: true,\n    value: value,\n    onChange: (event, newValue) => {\n      setOptions(newValue ? [newValue, ...options] : options);\n      setValue(newValue);\n    },\n    onInputChange: (event, newInputValue) => {\n      setInputValue(newInputValue);\n    },\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n      label: \"Add a location\",\n      fullWidth: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this),\n    renderOption: (props, option) => {\n      const matches = option.structured_formatting.main_text_matched_substrings;\n      const parts = parse(option.structured_formatting.main_text, matches.map(match => [match.offset, match.offset + match.length]));\n      return /*#__PURE__*/_jsxDEV(\"li\", { ...props,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              component: LocationOnIcon,\n              sx: {\n                color: 'text.secondary',\n                mr: 2\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: true,\n            children: [parts.map((part, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontWeight: part.highlight ? 700 : 400\n              },\n              children: part.text\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 19\n            }, this)), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: option.structured_formatting.secondary_text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GoogleMaps, \"BgGra3VoPQwuCsqNLERtUj0qg7Y=\");\n\n_c = GoogleMaps;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleMaps\");","map":{"version":3,"names":["React","Box","TextField","Autocomplete","LocationOnIcon","Grid","Typography","parse","throttle","GOOGLE_MAPS_API_KEY","loadScript","src","position","id","script","document","createElement","setAttribute","appendChild","autocompleteService","current","GoogleMaps","value","setValue","useState","inputValue","setInputValue","options","setOptions","loaded","useRef","window","querySelector","fetch","useMemo","request","callback","getPlacePredictions","useEffect","active","google","maps","places","AutocompleteService","undefined","input","results","newOptions","width","option","description","x","event","newValue","newInputValue","params","props","matches","structured_formatting","main_text_matched_substrings","parts","main_text","map","match","offset","length","color","mr","part","index","fontWeight","highlight","text","secondary_text"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/src/app/main/documentation/material-ui-components/components/autocomplete/GoogleMaps.js"],"sourcesContent":["import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\r\nimport Grid from '@mui/material/Grid';\r\nimport Typography from '@mui/material/Typography';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport throttle from 'lodash/throttle';\r\n\r\n// This key was created specifically for the demo in mui.com.\r\n// You need to create a new one for your application.\r\nconst GOOGLE_MAPS_API_KEY = 'AIzaSyC3aviU6KHXAjoSnxcw6qbOhjnFctbxPkE';\r\n\r\nfunction loadScript(src, position, id) {\r\n  if (!position) {\r\n    return;\r\n  }\r\n\r\n  const script = document.createElement('script');\r\n  script.setAttribute('async', '');\r\n  script.setAttribute('id', id);\r\n  script.src = src;\r\n  position.appendChild(script);\r\n}\r\n\r\nconst autocompleteService = { current: null };\r\n\r\nexport default function GoogleMaps() {\r\n  const [value, setValue] = React.useState(null);\r\n  const [inputValue, setInputValue] = React.useState('');\r\n  const [options, setOptions] = React.useState([]);\r\n  const loaded = React.useRef(false);\r\n\r\n  if (typeof window !== 'undefined' && !loaded.current) {\r\n    if (!document.querySelector('#google-maps')) {\r\n      loadScript(\r\n        `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}&libraries=places`,\r\n        document.querySelector('head'),\r\n        'google-maps',\r\n      );\r\n    }\r\n\r\n    loaded.current = true;\r\n  }\r\n\r\n  const fetch = React.useMemo(\r\n    () =>\r\n      throttle((request, callback) => {\r\n        autocompleteService.current.getPlacePredictions(request, callback);\r\n      }, 200),\r\n    [],\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    let active = true;\r\n\r\n    if (!autocompleteService.current && window.google) {\r\n      autocompleteService.current =\r\n        new window.google.maps.places.AutocompleteService();\r\n    }\r\n    if (!autocompleteService.current) {\r\n      return undefined;\r\n    }\r\n\r\n    if (inputValue === '') {\r\n      setOptions(value ? [value] : []);\r\n      return undefined;\r\n    }\r\n\r\n    fetch({ input: inputValue }, (results) => {\r\n      if (active) {\r\n        let newOptions = [];\r\n\r\n        if (value) {\r\n          newOptions = [value];\r\n        }\r\n\r\n        if (results) {\r\n          newOptions = [...newOptions, ...results];\r\n        }\r\n\r\n        setOptions(newOptions);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [value, inputValue, fetch]);\r\n\r\n  return (\r\n    <Autocomplete\r\n      id=\"google-map-demo\"\r\n      sx={{ width: 300 }}\r\n      getOptionLabel={(option) =>\r\n        typeof option === 'string' ? option : option.description\r\n      }\r\n      filterOptions={(x) => x}\r\n      options={options}\r\n      autoComplete\r\n      includeInputInList\r\n      filterSelectedOptions\r\n      value={value}\r\n      onChange={(event, newValue) => {\r\n        setOptions(newValue ? [newValue, ...options] : options);\r\n        setValue(newValue);\r\n      }}\r\n      onInputChange={(event, newInputValue) => {\r\n        setInputValue(newInputValue);\r\n      }}\r\n      renderInput={(params) => (\r\n        <TextField {...params} label=\"Add a location\" fullWidth />\r\n      )}\r\n      renderOption={(props, option) => {\r\n        const matches = option.structured_formatting.main_text_matched_substrings;\r\n        const parts = parse(\r\n          option.structured_formatting.main_text,\r\n          matches.map((match) => [match.offset, match.offset + match.length]),\r\n        );\r\n\r\n        return (\r\n          <li {...props}>\r\n            <Grid container alignItems=\"center\">\r\n              <Grid item>\r\n                <Box\r\n                  component={LocationOnIcon}\r\n                  sx={{ color: 'text.secondary', mr: 2 }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs>\r\n                {parts.map((part, index) => (\r\n                  <span\r\n                    key={index}\r\n                    style={{\r\n                      fontWeight: part.highlight ? 700 : 400,\r\n                    }}\r\n                  >\r\n                    {part.text}\r\n                  </span>\r\n                ))}\r\n\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  {option.structured_formatting.secondary_text}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </li>\r\n        );\r\n      }}\r\n    />\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}