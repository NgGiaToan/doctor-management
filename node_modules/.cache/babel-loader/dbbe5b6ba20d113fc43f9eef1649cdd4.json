{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reportUnresolvedRef = exports.NoUnresolvedRefs = void 0;\n\nvar resolve_1 = require(\"../resolve\");\n\nvar NoUnresolvedRefs = function NoUnresolvedRefs() {\n  return {\n    ref: {\n      leave: function leave(_, _ref, resolved) {\n        var report = _ref.report,\n            location = _ref.location;\n        if (resolved.node !== undefined) return;\n        reportUnresolvedRef(resolved, report, location);\n      }\n    },\n    DiscriminatorMapping: function DiscriminatorMapping(mapping, _ref2) {\n      var report = _ref2.report,\n          resolve = _ref2.resolve,\n          location = _ref2.location;\n\n      for (var _i = 0, _Object$keys = Object.keys(mapping); _i < _Object$keys.length; _i++) {\n        var mappingName = _Object$keys[_i];\n        var resolved = resolve({\n          $ref: mapping[mappingName]\n        });\n        if (resolved.node !== undefined) return;\n        reportUnresolvedRef(resolved, report, location.child(mappingName));\n      }\n    }\n  };\n};\n\nexports.NoUnresolvedRefs = NoUnresolvedRefs;\n\nfunction reportUnresolvedRef(resolved, report, location) {\n  var _a;\n\n  var error = resolved.error;\n\n  if (error instanceof resolve_1.YamlParseError) {\n    report({\n      message: 'Failed to parse: ' + error.message,\n      location: {\n        source: error.source,\n        pointer: undefined,\n        start: {\n          col: error.col,\n          line: error.line\n        }\n      }\n    });\n  }\n\n  var message = (_a = resolved.error) === null || _a === void 0 ? void 0 : _a.message;\n  report({\n    location: location,\n    message: \"Can't resolve $ref\".concat(message ? ': ' + message : '')\n  });\n}\n\nexports.reportUnresolvedRef = reportUnresolvedRef;","map":null,"metadata":{},"sourceType":"script"}