{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\giato\\\\Downloads\\\\Workspace\\\\.Net\\\\api\\\\doctor-management-fe\\\\src\\\\app\\\\main\\\\apps\\\\scrumboard\\\\board\\\\dialogs\\\\card\\\\toolbar\\\\CheckListMenu.js\",\n    _s = $RefreshSig$();\n\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { Controller, useForm } from 'react-hook-form';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport TextField from '@mui/material/TextField';\nimport { useEffect, useState } from 'react';\nimport * as yup from 'yup';\nimport _ from '@lodash';\nimport FuseSvgIcon from '@fuse/core/FuseSvgIcon';\nimport ToolbarMenu from './ToolbarMenu';\nimport ChecklistModel from '../../../../model/ChecklistModel';\n/**\r\n * Form Validation Schema\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schema = yup.object().shape({\n  name: yup.string().required('You must enter a title')\n});\n\nfunction CheckListMenu(props) {\n  _s();\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const {\n    control,\n    formState,\n    handleSubmit,\n    reset\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: {\n      name: props.name\n    },\n    resolver: yupResolver(schema)\n  });\n  const {\n    isValid,\n    dirtyFields,\n    errors\n  } = formState;\n  useEffect(() => {\n    if (!anchorEl) {\n      reset({\n        name: props.name\n      });\n    }\n  }, [anchorEl, reset, props.name]);\n\n  function handleMenuOpen(event) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handleMenuClose() {\n    setAnchorEl(null);\n  }\n\n  function onSubmit(data) {\n    props.onAddCheckList(ChecklistModel(data));\n    handleMenuClose();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(IconButton, {\n      onClick: handleMenuOpen,\n      size: \"large\",\n      children: /*#__PURE__*/_jsxDEV(FuseSvgIcon, {\n        children: \"heroicons-outline:check-circle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToolbarMenu, {\n      state: anchorEl,\n      onClose: handleMenuClose,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onSubmit),\n        className: \"p-16 flex flex-col items-end\",\n        children: [/*#__PURE__*/_jsxDEV(Controller, {\n          name: \"name\",\n          control: control,\n          render: _ref => {\n            var _errors$name;\n\n            let {\n              field\n            } = _ref;\n            return /*#__PURE__*/_jsxDEV(TextField, { ...field,\n              label: \"Checklist title\",\n              error: !!errors.name,\n              helperText: errors === null || errors === void 0 ? void 0 : (_errors$name = errors.name) === null || _errors$name === void 0 ? void 0 : _errors$name.message,\n              fullWidth: true,\n              className: \"mb-12\",\n              variant: \"outlined\",\n              required: true,\n              autoFocus: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"secondary\",\n          type: \"submit\",\n          disabled: _.isEmpty(dirtyFields) || !isValid,\n          variant: \"contained\",\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CheckListMenu, \"Bvp9Cww4z7RyDyjKwCDiYdoaX1Y=\", false, function () {\n  return [useForm];\n});\n\n_c = CheckListMenu;\nexport default CheckListMenu;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckListMenu\");","map":{"version":3,"names":["yupResolver","Controller","useForm","Button","IconButton","TextField","useEffect","useState","yup","_","FuseSvgIcon","ToolbarMenu","ChecklistModel","schema","object","shape","name","string","required","CheckListMenu","props","anchorEl","setAnchorEl","control","formState","handleSubmit","reset","mode","defaultValues","resolver","isValid","dirtyFields","errors","handleMenuOpen","event","currentTarget","handleMenuClose","onSubmit","data","onAddCheckList","field","message","isEmpty"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/src/app/main/apps/scrumboard/board/dialogs/card/toolbar/CheckListMenu.js"],"sourcesContent":["import { yupResolver } from '@hookform/resolvers/yup';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport TextField from '@mui/material/TextField';\r\nimport { useEffect, useState } from 'react';\r\nimport * as yup from 'yup';\r\nimport _ from '@lodash';\r\nimport FuseSvgIcon from '@fuse/core/FuseSvgIcon';\r\nimport ToolbarMenu from './ToolbarMenu';\r\nimport ChecklistModel from '../../../../model/ChecklistModel';\r\n\r\n/**\r\n * Form Validation Schema\r\n */\r\nconst schema = yup.object().shape({\r\n  name: yup.string().required('You must enter a title'),\r\n});\r\n\r\nfunction CheckListMenu(props) {\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const { control, formState, handleSubmit, reset } = useForm({\r\n    mode: 'onChange',\r\n    defaultValues: {\r\n      name: props.name,\r\n    },\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n  const { isValid, dirtyFields, errors } = formState;\r\n\r\n  useEffect(() => {\r\n    if (!anchorEl) {\r\n      reset({\r\n        name: props.name,\r\n      });\r\n    }\r\n  }, [anchorEl, reset, props.name]);\r\n\r\n  function handleMenuOpen(event) {\r\n    setAnchorEl(event.currentTarget);\r\n  }\r\n\r\n  function handleMenuClose() {\r\n    setAnchorEl(null);\r\n  }\r\n\r\n  function onSubmit(data) {\r\n    props.onAddCheckList(ChecklistModel(data));\r\n    handleMenuClose();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <IconButton onClick={handleMenuOpen} size=\"large\">\r\n        <FuseSvgIcon>heroicons-outline:check-circle</FuseSvgIcon>\r\n      </IconButton>\r\n      <ToolbarMenu state={anchorEl} onClose={handleMenuClose}>\r\n        <form onSubmit={handleSubmit(onSubmit)} className=\"p-16 flex flex-col items-end\">\r\n          <Controller\r\n            name=\"name\"\r\n            control={control}\r\n            render={({ field }) => (\r\n              <TextField\r\n                {...field}\r\n                label=\"Checklist title\"\r\n                error={!!errors.name}\r\n                helperText={errors?.name?.message}\r\n                fullWidth\r\n                className=\"mb-12\"\r\n                variant=\"outlined\"\r\n                required\r\n                autoFocus\r\n              />\r\n            )}\r\n          />\r\n          <Button\r\n            color=\"secondary\"\r\n            type=\"submit\"\r\n            disabled={_.isEmpty(dirtyFields) || !isValid}\r\n            variant=\"contained\"\r\n          >\r\n            Add\r\n          </Button>\r\n        </form>\r\n      </ToolbarMenu>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CheckListMenu;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}