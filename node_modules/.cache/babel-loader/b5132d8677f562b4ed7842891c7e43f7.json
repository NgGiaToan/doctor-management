{"ast":null,"code":"export function sampleNumber(schema) {\n  var res = 0;\n\n  if (typeof schema.exclusiveMinimum === 'boolean' || typeof schema.exclusiveMaximum === 'boolean') {\n    //legacy support for jsonschema draft 4 of exclusiveMaximum/exclusiveMinimum as booleans \n    if (schema.maximum && schema.minimum) {\n      res = schema.exclusiveMinimum ? Math.floor(schema.minimum) + 1 : schema.minimum;\n\n      if (schema.exclusiveMaximum && res >= schema.maximum || !schema.exclusiveMaximum && res > schema.maximum) {\n        res = (schema.maximum + schema.minimum) / 2;\n      }\n\n      return res;\n    }\n\n    if (schema.minimum) {\n      if (schema.exclusiveMinimum) {\n        return Math.floor(schema.minimum) + 1;\n      } else {\n        return schema.minimum;\n      }\n    }\n\n    if (schema.maximum) {\n      if (schema.exclusiveMaximum) {\n        return schema.maximum > 0 ? 0 : Math.floor(schema.maximum) - 1;\n      } else {\n        return schema.maximum > 0 ? 0 : schema.maximum;\n      }\n    }\n  } else {\n    if (schema.minimum) {\n      return schema.minimum;\n    }\n\n    if (schema.exclusiveMinimum) {\n      res = Math.floor(schema.exclusiveMinimum) + 1;\n\n      if (res === schema.exclusiveMaximum) {\n        res = (res + Math.floor(schema.exclusiveMaximum) - 1) / 2;\n      }\n    } else if (schema.exclusiveMaximum) {\n      res = Math.floor(schema.exclusiveMaximum) - 1;\n    } else if (schema.maximum) {\n      res = schema.maximum;\n    }\n  }\n\n  return res;\n}","map":null,"metadata":{},"sourceType":"module"}