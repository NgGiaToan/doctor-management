{"ast":null,"code":"import { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport ListModel from '../model/ListModel';\n/**\r\n * Get Board Lists\r\n */\n\nexport const getLists = createAsyncThunk('scrumboardApp/lists/get', async boardId => {\n  const response = await axios.get(`/api/scrumboard/boards/${boardId}/lists`);\n  const data = await response.data;\n  return data;\n});\n/**\r\n * Create List\r\n */\n\nexport const newList = createAsyncThunk('scrumboardApp/lists/new', async (list, _ref) => {\n  let {\n    dispatch,\n    getState\n  } = _ref;\n  const {\n    board\n  } = getState().scrumboardApp;\n  const response = await axios.post(`/api/scrumboard/boards/${board.id}/lists`, ListModel(list));\n  const data = await response.data;\n  return data;\n});\n/**\r\n * Update list\r\n */\n\nexport const updateList = createAsyncThunk('scrumboardApp/lists/update', async (_ref2, _ref3) => {\n  let {\n    id,\n    newData\n  } = _ref2;\n  let {\n    dispatch,\n    getState\n  } = _ref3;\n  const {\n    board\n  } = getState().scrumboardApp;\n  const response = await axios.put(`/api/scrumboard/boards/${board.id}/lists/${id}`, newData);\n  const data = await response.data;\n  return data;\n});\n/**\r\n * Remove list\r\n */\n\nexport const removeList = createAsyncThunk('scrumboardApp/lists/remove', async (id, _ref4) => {\n  let {\n    dispatch,\n    getState\n  } = _ref4;\n  const {\n    board\n  } = getState().scrumboardApp;\n  const response = await axios.delete(`/api/scrumboard/boards/${board.id}/lists/${id}`);\n  await response.data;\n  return id;\n});\nconst listsAdapter = createEntityAdapter({});\nexport const {\n  selectAll: selectLists,\n  selectById: selectListById\n} = listsAdapter.getSelectors(state => state.scrumboardApp.lists);\nconst listsSlice = createSlice({\n  name: 'scrumboardApp/lists',\n  initialState: listsAdapter.getInitialState({}),\n  reducers: {\n    resetLists: (state, action) => {}\n  },\n  extraReducers: {\n    [getLists.fulfilled]: listsAdapter.setAll,\n    [updateList.fulfilled]: listsAdapter.setOne,\n    [removeList.fulfilled]: listsAdapter.removeOne,\n    [newList.fulfilled]: listsAdapter.addOne\n  }\n});\nexport const {\n  resetLists\n} = listsSlice.actions;\nexport default listsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createEntityAdapter","createSlice","axios","ListModel","getLists","boardId","response","get","data","newList","list","dispatch","getState","board","scrumboardApp","post","id","updateList","newData","put","removeList","delete","listsAdapter","selectAll","selectLists","selectById","selectListById","getSelectors","state","lists","listsSlice","name","initialState","getInitialState","reducers","resetLists","action","extraReducers","fulfilled","setAll","setOne","removeOne","addOne","actions","reducer"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/src/app/main/apps/scrumboard/store/listsSlice.js"],"sourcesContent":["import { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport ListModel from '../model/ListModel';\r\n\r\n/**\r\n * Get Board Lists\r\n */\r\nexport const getLists = createAsyncThunk('scrumboardApp/lists/get', async (boardId) => {\r\n  const response = await axios.get(`/api/scrumboard/boards/${boardId}/lists`);\r\n\r\n  const data = await response.data;\r\n\r\n  return data;\r\n});\r\n\r\n/**\r\n * Create List\r\n */\r\nexport const newList = createAsyncThunk(\r\n  'scrumboardApp/lists/new',\r\n  async (list, { dispatch, getState }) => {\r\n    const { board } = getState().scrumboardApp;\r\n\r\n    const response = await axios.post(`/api/scrumboard/boards/${board.id}/lists`, ListModel(list));\r\n\r\n    const data = await response.data;\r\n\r\n    return data;\r\n  }\r\n);\r\n\r\n/**\r\n * Update list\r\n */\r\nexport const updateList = createAsyncThunk(\r\n  'scrumboardApp/lists/update',\r\n  async ({ id, newData }, { dispatch, getState }) => {\r\n    const { board } = getState().scrumboardApp;\r\n\r\n    const response = await axios.put(`/api/scrumboard/boards/${board.id}/lists/${id}`, newData);\r\n\r\n    const data = await response.data;\r\n\r\n    return data;\r\n  }\r\n);\r\n\r\n/**\r\n * Remove list\r\n */\r\nexport const removeList = createAsyncThunk(\r\n  'scrumboardApp/lists/remove',\r\n  async (id, { dispatch, getState }) => {\r\n    const { board } = getState().scrumboardApp;\r\n\r\n    const response = await axios.delete(`/api/scrumboard/boards/${board.id}/lists/${id}`);\r\n\r\n    await response.data;\r\n\r\n    return id;\r\n  }\r\n);\r\nconst listsAdapter = createEntityAdapter({});\r\n\r\nexport const { selectAll: selectLists, selectById: selectListById } = listsAdapter.getSelectors(\r\n  (state) => state.scrumboardApp.lists\r\n);\r\n\r\nconst listsSlice = createSlice({\r\n  name: 'scrumboardApp/lists',\r\n  initialState: listsAdapter.getInitialState({}),\r\n  reducers: {\r\n    resetLists: (state, action) => {},\r\n  },\r\n  extraReducers: {\r\n    [getLists.fulfilled]: listsAdapter.setAll,\r\n    [updateList.fulfilled]: listsAdapter.setOne,\r\n    [removeList.fulfilled]: listsAdapter.removeOne,\r\n    [newList.fulfilled]: listsAdapter.addOne,\r\n  },\r\n});\r\n\r\nexport const { resetLists } = listsSlice.actions;\r\n\r\nexport default listsSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}