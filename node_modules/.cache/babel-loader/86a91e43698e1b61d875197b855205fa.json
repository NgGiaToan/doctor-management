{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PathSegmentPlural = void 0;\n\nconst utils_1 = require(\"../../utils\");\n\nconst PathSegmentPlural = opts => {\n  const {\n    ignoreLastPathSegment,\n    exceptions\n  } = opts;\n  return {\n    PathItem: {\n      leave(_path, _ref) {\n        let {\n          report,\n          key,\n          location\n        } = _ref;\n        const pathKey = key.toString();\n\n        if (pathKey.startsWith('/')) {\n          const pathSegments = pathKey.split('/');\n          pathSegments.shift();\n\n          if (ignoreLastPathSegment && pathSegments.length > 1) {\n            pathSegments.pop();\n          }\n\n          for (const pathSegment of pathSegments) {\n            if (exceptions && exceptions.includes(pathSegment)) continue;\n\n            if (!utils_1.isPathParameter(pathSegment) && utils_1.isSingular(pathSegment)) {\n              report({\n                message: `path segment \\`${pathSegment}\\` should be plural.`,\n                location: location.key()\n              });\n            }\n          }\n        }\n      }\n\n    }\n  };\n};\n\nexports.PathSegmentPlural = PathSegmentPlural;","map":{"version":3,"names":["Object","defineProperty","exports","value","PathSegmentPlural","utils_1","require","opts","ignoreLastPathSegment","exceptions","PathItem","leave","_path","report","key","location","pathKey","toString","startsWith","pathSegments","split","shift","length","pop","pathSegment","includes","isPathParameter","isSingular","message"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@redocly/openapi-core/lib/rules/common/path-segment-plural.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PathSegmentPlural = void 0;\nconst utils_1 = require(\"../../utils\");\nconst PathSegmentPlural = (opts) => {\n    const { ignoreLastPathSegment, exceptions } = opts;\n    return {\n        PathItem: {\n            leave(_path, { report, key, location }) {\n                const pathKey = key.toString();\n                if (pathKey.startsWith('/')) {\n                    const pathSegments = pathKey.split('/');\n                    pathSegments.shift();\n                    if (ignoreLastPathSegment && pathSegments.length > 1) {\n                        pathSegments.pop();\n                    }\n                    for (const pathSegment of pathSegments) {\n                        if (exceptions && exceptions.includes(pathSegment))\n                            continue;\n                        if (!utils_1.isPathParameter(pathSegment) && utils_1.isSingular(pathSegment)) {\n                            report({\n                                message: `path segment \\`${pathSegment}\\` should be plural.`,\n                                location: location.key(),\n                            });\n                        }\n                    }\n                }\n            },\n        },\n    };\n};\nexports.PathSegmentPlural = PathSegmentPlural;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,iBAAR,GAA4B,KAAK,CAAjC;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AACA,MAAMF,iBAAiB,GAAIG,IAAD,IAAU;EAChC,MAAM;IAAEC,qBAAF;IAAyBC;EAAzB,IAAwCF,IAA9C;EACA,OAAO;IACHG,QAAQ,EAAE;MACNC,KAAK,CAACC,KAAD,QAAmC;QAAA,IAA3B;UAAEC,MAAF;UAAUC,GAAV;UAAeC;QAAf,CAA2B;QACpC,MAAMC,OAAO,GAAGF,GAAG,CAACG,QAAJ,EAAhB;;QACA,IAAID,OAAO,CAACE,UAAR,CAAmB,GAAnB,CAAJ,EAA6B;UACzB,MAAMC,YAAY,GAAGH,OAAO,CAACI,KAAR,CAAc,GAAd,CAArB;UACAD,YAAY,CAACE,KAAb;;UACA,IAAIb,qBAAqB,IAAIW,YAAY,CAACG,MAAb,GAAsB,CAAnD,EAAsD;YAClDH,YAAY,CAACI,GAAb;UACH;;UACD,KAAK,MAAMC,WAAX,IAA0BL,YAA1B,EAAwC;YACpC,IAAIV,UAAU,IAAIA,UAAU,CAACgB,QAAX,CAAoBD,WAApB,CAAlB,EACI;;YACJ,IAAI,CAACnB,OAAO,CAACqB,eAAR,CAAwBF,WAAxB,CAAD,IAAyCnB,OAAO,CAACsB,UAAR,CAAmBH,WAAnB,CAA7C,EAA8E;cAC1EX,MAAM,CAAC;gBACHe,OAAO,EAAG,kBAAiBJ,WAAY,sBADpC;gBAEHT,QAAQ,EAAEA,QAAQ,CAACD,GAAT;cAFP,CAAD,CAAN;YAIH;UACJ;QACJ;MACJ;;IApBK;EADP,CAAP;AAwBH,CA1BD;;AA2BAZ,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B"},"metadata":{},"sourceType":"script"}