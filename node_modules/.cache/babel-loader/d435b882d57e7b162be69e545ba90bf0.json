{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Oas3Types = void 0;\n\nvar _1 = require(\".\");\n\nvar ref_utils_1 = require(\"../ref-utils\");\n\nvar responseCodeRegexp = /^[0-9][0-9Xx]{2}$/;\nvar DefinitionRoot = {\n  properties: {\n    openapi: null,\n    info: 'Info',\n    servers: _1.listOf('Server'),\n    security: _1.listOf('SecurityRequirement'),\n    tags: _1.listOf('Tag'),\n    externalDocs: 'ExternalDocs',\n    paths: 'PathMap',\n    components: 'Components',\n    'x-webhooks': 'WebhooksMap'\n  },\n  required: ['openapi', 'paths', 'info']\n};\nvar Tag = {\n  properties: {\n    name: {\n      type: 'string'\n    },\n    description: {\n      type: 'string'\n    },\n    externalDocs: 'ExternalDocs'\n  },\n  required: ['name']\n};\nvar ExternalDocs = {\n  properties: {\n    description: {\n      type: 'string'\n    },\n    url: {\n      type: 'string'\n    }\n  },\n  required: ['url']\n};\nvar Server = {\n  properties: {\n    url: {\n      type: 'string'\n    },\n    description: {\n      type: 'string'\n    },\n    variables: _1.mapOf('ServerVariable')\n  },\n  required: ['url']\n};\nvar ServerVariable = {\n  properties: {\n    enum: {\n      type: 'array',\n      items: {\n        type: 'string'\n      }\n    },\n    default: {\n      type: 'string'\n    },\n    description: null\n  },\n  required: ['default']\n};\nvar SecurityRequirement = {\n  properties: {},\n  additionalProperties: {\n    type: 'array',\n    items: {\n      type: 'string'\n    }\n  }\n};\nvar Info = {\n  properties: {\n    title: {\n      type: 'string'\n    },\n    version: {\n      type: 'string'\n    },\n    description: {\n      type: 'string'\n    },\n    termsOfService: {\n      type: 'string'\n    },\n    contact: 'Contact',\n    license: 'License'\n  },\n  required: ['title', 'version']\n};\nvar Contact = {\n  properties: {\n    name: {\n      type: 'string'\n    },\n    url: {\n      type: 'string'\n    },\n    email: {\n      type: 'string'\n    }\n  }\n};\nvar License = {\n  properties: {\n    name: {\n      type: 'string'\n    },\n    url: {\n      type: 'string'\n    }\n  },\n  required: ['name']\n};\nvar PathMap = {\n  properties: {},\n  additionalProperties: function additionalProperties(_value, key) {\n    return key.startsWith('/') ? 'PathItem' : undefined;\n  }\n};\nvar WebhooksMap = {\n  properties: {},\n  additionalProperties: function additionalProperties() {\n    return 'PathItem';\n  }\n};\nvar PathItem = {\n  properties: {\n    $ref: {\n      type: 'string'\n    },\n    servers: _1.listOf('Server'),\n    parameters: _1.listOf('Parameter'),\n    summary: {\n      type: 'string'\n    },\n    description: {\n      type: 'string'\n    },\n    get: 'Operation',\n    put: 'Operation',\n    post: 'Operation',\n    delete: 'Operation',\n    options: 'Operation',\n    head: 'Operation',\n    patch: 'Operation',\n    trace: 'Operation'\n  }\n};\nvar Parameter = {\n  properties: {\n    name: {\n      type: 'string'\n    },\n    in: {\n      enum: ['query', 'header', 'path', 'cookie']\n    },\n    description: {\n      type: 'string'\n    },\n    required: {\n      type: 'boolean'\n    },\n    deprecated: {\n      type: 'boolean'\n    },\n    allowEmptyValue: {\n      type: 'boolean'\n    },\n    style: {\n      enum: ['form', 'simple', 'label', 'matrix', 'spaceDelimited', 'pipeDelimited', 'deepObject']\n    },\n    explode: {\n      type: 'boolean'\n    },\n    allowReserved: {\n      type: 'boolean'\n    },\n    schema: 'Schema',\n    example: {\n      isExample: true\n    },\n    examples: _1.mapOf('Example'),\n    content: 'MediaTypeMap'\n  },\n  required: ['name', 'in'],\n  requiredOneOf: ['schema', 'content']\n};\nvar Callback = {\n  properties: {},\n  additionalProperties: 'PathItem'\n};\nvar Operation = {\n  properties: {\n    tags: {\n      type: 'array',\n      items: {\n        type: 'string'\n      }\n    },\n    summary: {\n      type: 'string'\n    },\n    description: {\n      type: 'string'\n    },\n    externalDocs: 'ExternalDocs',\n    operationId: {\n      type: 'string'\n    },\n    parameters: _1.listOf('Parameter'),\n    security: _1.listOf('SecurityRequirement'),\n    servers: _1.listOf('Server'),\n    requestBody: 'RequestBody',\n    responses: 'ResponsesMap',\n    deprecated: {\n      type: 'boolean'\n    },\n    callbacks: _1.mapOf('Callback'),\n    'x-codeSamples': _1.listOf('XCodeSample'),\n    'x-code-samples': _1.listOf('XCodeSample') // deprecated\n\n  },\n  required: ['responses']\n};\nvar XCodeSample = {\n  properties: {\n    lang: {\n      type: 'string'\n    },\n    label: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    }\n  }\n};\nvar RequestBody = {\n  properties: {\n    description: {\n      type: 'string'\n    },\n    required: {\n      type: 'boolean'\n    },\n    content: 'MediaTypeMap'\n  },\n  required: ['content']\n};\nvar MediaTypeMap = {\n  properties: {},\n  additionalProperties: 'MediaType'\n};\nvar MediaType = {\n  properties: {\n    schema: 'Schema',\n    example: {\n      isExample: true\n    },\n    examples: _1.mapOf('Example'),\n    encoding: _1.mapOf('Encoding')\n  }\n};\nvar Example = {\n  properties: {\n    value: {\n      isExample: true\n    },\n    summary: {\n      type: 'string'\n    },\n    description: {\n      type: 'string'\n    },\n    externalValue: {\n      type: 'string'\n    }\n  }\n};\nvar Encoding = {\n  properties: {\n    contentType: {\n      type: 'string'\n    },\n    headers: _1.mapOf('Header'),\n    style: {\n      enum: ['form', 'simple', 'label', 'matrix', 'spaceDelimited', 'pipeDelimited', 'deepObject']\n    },\n    explode: {\n      type: 'boolean'\n    },\n    allowReserved: {\n      type: 'boolean'\n    }\n  }\n};\nvar Header = {\n  properties: {\n    description: {\n      type: 'string'\n    },\n    required: {\n      type: 'boolean'\n    },\n    deprecated: {\n      type: 'boolean'\n    },\n    allowEmptyValue: {\n      type: 'boolean'\n    },\n    style: {\n      enum: ['form', 'simple', 'label', 'matrix', 'spaceDelimited', 'pipeDelimited', 'deepObject']\n    },\n    explode: {\n      type: 'boolean'\n    },\n    allowReserved: {\n      type: 'boolean'\n    },\n    schema: 'Schema',\n    example: {\n      isExample: true\n    },\n    examples: _1.mapOf('Example'),\n    content: 'MediaTypeMap'\n  }\n};\nvar ResponsesMap = {\n  properties: {\n    default: 'Response'\n  },\n  additionalProperties: function additionalProperties(_v, key) {\n    return responseCodeRegexp.test(key) ? 'Response' : undefined;\n  }\n};\nvar Response = {\n  properties: {\n    description: {\n      type: 'string'\n    },\n    headers: _1.mapOf('Header'),\n    content: 'MediaTypeMap',\n    links: _1.mapOf('Link')\n  },\n  required: ['description']\n};\nvar Link = {\n  properties: {\n    operationRef: {\n      type: 'string'\n    },\n    operationId: {\n      type: 'string'\n    },\n    parameters: null,\n    requestBody: null,\n    description: {\n      type: 'string'\n    },\n    server: 'Server'\n  }\n};\nvar Schema = {\n  properties: {\n    externalDocs: 'ExternalDocs',\n    discriminator: 'Discriminator',\n    title: {\n      type: 'string'\n    },\n    multipleOf: {\n      type: 'number',\n      minimum: 0\n    },\n    maximum: {\n      type: 'number'\n    },\n    minimum: {\n      type: 'number'\n    },\n    exclusiveMaximum: {\n      type: 'boolean'\n    },\n    exclusiveMinimum: {\n      type: 'boolean'\n    },\n    maxLength: {\n      type: 'number',\n      minimum: 0\n    },\n    minLength: {\n      type: 'number',\n      minimum: 0\n    },\n    pattern: {\n      type: 'string'\n    },\n    maxItems: {\n      type: 'number',\n      minimum: 0\n    },\n    minItems: {\n      type: 'number',\n      minimum: 0\n    },\n    uniqueItems: {\n      type: 'boolean'\n    },\n    maxProperties: {\n      type: 'number',\n      minimum: 0\n    },\n    minProperties: {\n      type: 'number',\n      minimum: 0\n    },\n    required: {\n      type: 'array',\n      items: {\n        type: 'string'\n      }\n    },\n    enum: {\n      type: 'array'\n    },\n    type: {\n      enum: ['object', 'array', 'string', 'number', 'integer', 'boolean', 'null']\n    },\n    allOf: _1.listOf('Schema'),\n    anyOf: _1.listOf('Schema'),\n    oneOf: _1.listOf('Schema'),\n    not: 'Schema',\n    properties: 'SchemaProperties',\n    items: function items(value) {\n      if (Array.isArray(value)) {\n        return _1.listOf('Schema');\n      } else {\n        return 'Schema';\n      }\n    },\n    additionalProperties: function additionalProperties(value) {\n      if (typeof value === 'boolean') {\n        return {\n          type: 'boolean'\n        };\n      } else {\n        return 'Schema';\n      }\n    },\n    description: {\n      type: 'string'\n    },\n    format: {\n      type: 'string'\n    },\n    default: null,\n    nullable: {\n      type: 'boolean'\n    },\n    readOnly: {\n      type: 'boolean'\n    },\n    writeOnly: {\n      type: 'boolean'\n    },\n    xml: 'Xml',\n    example: {\n      isExample: true\n    },\n    deprecated: {\n      type: 'boolean'\n    }\n  }\n};\nvar Xml = {\n  properties: {\n    name: {\n      type: 'string'\n    },\n    namespace: {\n      type: 'string'\n    },\n    prefix: {\n      type: 'string'\n    },\n    attribute: {\n      type: 'boolean'\n    },\n    wrapped: {\n      type: 'boolean'\n    }\n  }\n};\nvar SchemaProperties = {\n  properties: {},\n  additionalProperties: 'Schema'\n};\nvar DiscriminatorMapping = {\n  properties: {},\n  additionalProperties: function additionalProperties(value) {\n    if (ref_utils_1.isMappingRef(value)) {\n      return {\n        type: 'string',\n        directResolveAs: 'Schema'\n      };\n    } else {\n      return {\n        type: 'string'\n      };\n    }\n  }\n};\nvar Discriminator = {\n  properties: {\n    propertyName: {\n      type: 'string'\n    },\n    mapping: 'DiscriminatorMapping'\n  },\n  required: ['propertyName']\n};\nvar Components = {\n  properties: {\n    parameters: 'NamedParameters',\n    schemas: 'NamedSchemas',\n    responses: 'NamedResponses',\n    examples: 'NamedExamples',\n    requestBodies: 'NamedRequestBodies',\n    headers: 'NamedHeaders',\n    securitySchemes: 'NamedSecuritySchemes',\n    links: 'NamedLinks',\n    callbacks: 'NamedCallbacks'\n  }\n};\nvar ImplicitFlow = {\n  properties: {\n    refreshUrl: {\n      type: 'string'\n    },\n    scopes: {\n      type: 'object',\n      additionalProperties: {\n        type: 'string'\n      }\n    },\n    authorizationUrl: {\n      type: 'string'\n    }\n  },\n  required: ['authorizationUrl', 'scopes']\n};\nvar PasswordFlow = {\n  properties: {\n    refreshUrl: {\n      type: 'string'\n    },\n    scopes: {\n      type: 'object',\n      additionalProperties: {\n        type: 'string'\n      }\n    },\n    tokenUrl: {\n      type: 'string'\n    }\n  },\n  required: ['tokenUrl', 'scopes']\n};\nvar ClientCredentials = {\n  properties: {\n    refreshUrl: {\n      type: 'string'\n    },\n    scopes: {\n      type: 'object',\n      additionalProperties: {\n        type: 'string'\n      }\n    },\n    tokenUrl: {\n      type: 'string'\n    }\n  },\n  required: ['tokenUrl', 'scopes']\n};\nvar AuthorizationCode = {\n  properties: {\n    refreshUrl: {\n      type: 'string'\n    },\n    authorizationUrl: {\n      type: 'string'\n    },\n    scopes: {\n      type: 'object',\n      additionalProperties: {\n        type: 'string'\n      }\n    },\n    tokenUrl: {\n      type: 'string'\n    }\n  },\n  required: ['authorizationUrl', 'tokenUrl', 'scopes']\n};\nvar SecuritySchemeFlows = {\n  properties: {\n    implicit: 'ImplicitFlow',\n    password: 'PasswordFlow',\n    clientCredentials: 'ClientCredentials',\n    authorizationCode: 'AuthorizationCode'\n  }\n};\nvar SecurityScheme = {\n  properties: {\n    type: {\n      enum: ['apiKey', 'http', 'oauth2', 'openIdConnect']\n    },\n    description: {\n      type: 'string'\n    },\n    name: {\n      type: 'string'\n    },\n    in: {\n      type: 'string',\n      enum: ['query', 'header', 'cookie']\n    },\n    scheme: {\n      type: 'string'\n    },\n    bearerFormat: {\n      type: 'string'\n    },\n    flows: 'SecuritySchemeFlows',\n    openIdConnectUrl: {\n      type: 'string'\n    }\n  },\n  required: function required(value) {\n    switch (value === null || value === void 0 ? void 0 : value.type) {\n      case 'apiKey':\n        return ['type', 'name', 'in'];\n\n      case 'http':\n        return ['type', 'scheme'];\n\n      case 'oauth2':\n        return ['type', 'flows'];\n\n      case 'openIdConnect':\n        return ['type', 'openIdConnectUrl'];\n\n      default:\n        return ['type'];\n    }\n  },\n  allowed: function allowed(value) {\n    switch (value === null || value === void 0 ? void 0 : value.type) {\n      case 'apiKey':\n        return ['type', 'name', 'in', 'description'];\n\n      case 'http':\n        return ['type', 'scheme', 'bearerFormat', 'description'];\n\n      case 'oauth2':\n        return ['type', 'flows', 'description'];\n\n      case 'openIdConnect':\n        return ['type', 'openIdConnectUrl', 'description'];\n\n      default:\n        return ['type', 'description'];\n    }\n  },\n  extensionsPrefix: 'x-'\n};\nexports.Oas3Types = {\n  DefinitionRoot: DefinitionRoot,\n  Tag: Tag,\n  ExternalDocs: ExternalDocs,\n  Server: Server,\n  ServerVariable: ServerVariable,\n  SecurityRequirement: SecurityRequirement,\n  Info: Info,\n  Contact: Contact,\n  License: License,\n  PathMap: PathMap,\n  PathItem: PathItem,\n  Parameter: Parameter,\n  Operation: Operation,\n  Callback: Callback,\n  RequestBody: RequestBody,\n  MediaTypeMap: MediaTypeMap,\n  MediaType: MediaType,\n  Example: Example,\n  Encoding: Encoding,\n  Header: Header,\n  ResponsesMap: ResponsesMap,\n  Response: Response,\n  Link: Link,\n  Schema: Schema,\n  Xml: Xml,\n  SchemaProperties: SchemaProperties,\n  DiscriminatorMapping: DiscriminatorMapping,\n  Discriminator: Discriminator,\n  Components: Components,\n  NamedSchemas: _1.mapOf('Schema'),\n  NamedResponses: _1.mapOf('Response'),\n  NamedParameters: _1.mapOf('Parameter'),\n  NamedExamples: _1.mapOf('Example'),\n  NamedRequestBodies: _1.mapOf('RequestBody'),\n  NamedHeaders: _1.mapOf('Header'),\n  NamedSecuritySchemes: _1.mapOf('SecurityScheme'),\n  NamedLinks: _1.mapOf('Link'),\n  NamedCallbacks: _1.mapOf('PathItem'),\n  ImplicitFlow: ImplicitFlow,\n  PasswordFlow: PasswordFlow,\n  ClientCredentials: ClientCredentials,\n  AuthorizationCode: AuthorizationCode,\n  SecuritySchemeFlows: SecuritySchemeFlows,\n  SecurityScheme: SecurityScheme,\n  XCodeSample: XCodeSample,\n  WebhooksMap: WebhooksMap\n};","map":null,"metadata":{},"sourceType":"script"}