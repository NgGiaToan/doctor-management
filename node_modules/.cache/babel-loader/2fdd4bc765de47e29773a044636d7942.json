{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NoAmbiguousPaths = void 0;\n\nvar NoAmbiguousPaths = function NoAmbiguousPaths() {\n  return {\n    PathMap: function PathMap(pathMap, _ref) {\n      var report = _ref.report,\n          location = _ref.location;\n      var seenPaths = [];\n\n      var _loop = function _loop() {\n        var currentPath = _Object$keys[_i];\n        var ambiguousPath = seenPaths.find(function (seenPath) {\n          return arePathsAmbiguous(seenPath, currentPath);\n        });\n\n        if (ambiguousPath) {\n          report({\n            message: \"Paths should resolve unambiguously. Found two ambiguous paths: `\".concat(ambiguousPath, \"` and `\").concat(currentPath, \"`.\"),\n            location: location.child([currentPath]).key()\n          });\n        }\n\n        seenPaths.push(currentPath);\n      };\n\n      for (var _i = 0, _Object$keys = Object.keys(pathMap); _i < _Object$keys.length; _i++) {\n        _loop();\n      }\n    }\n  };\n};\n\nexports.NoAmbiguousPaths = NoAmbiguousPaths;\n\nfunction arePathsAmbiguous(a, b) {\n  var partsA = a.split('/');\n  var partsB = b.split('/');\n  if (partsA.length !== partsB.length) return false;\n  var aVars = 0;\n  var bVars = 0;\n  var ambiguous = true;\n\n  for (var i = 0; i < partsA.length; i++) {\n    var aIsVar = partsA[i].match(/^{.+?}$/);\n    var bIsVar = partsB[i].match(/^{.+?}$/);\n\n    if (aIsVar || bIsVar) {\n      if (aIsVar) aVars++;\n      if (bIsVar) bVars++;\n      continue;\n    } else if (partsA[i] !== partsB[i]) {\n      ambiguous = false;\n    }\n  }\n\n  return ambiguous && aVars === bVars;\n}","map":null,"metadata":{},"sourceType":"script"}