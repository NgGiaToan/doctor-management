{"ast":null,"code":"import _ from '@lodash';\nimport mockApi from '../mock-api.json';\nimport mock from '../mock';\nconst mailsDB = mockApi.components.examples.mailbox_mails.value;\nconst labelsDB = mockApi.components.examples.mailbox_labels.value;\nconst filtersDB = mockApi.components.examples.mailbox_filters.value;\nconst foldersDB = mockApi.components.examples.mailbox_folders.value;\nmock.onGet(/\\/api\\/mailbox\\/mails\\/filters\\/(?<filterSlug>[^/]*)\\/(?<mailId>[^/]*)/).reply(_ref => {\n  let {\n    url,\n    data\n  } = _ref;\n  const {\n    filterSlug,\n    mailId\n  } = url.match(/\\/api\\/mailbox\\/mails\\/filters\\/(?<filterSlug>[^/]*)\\/(?<mailId>[^/]*)/).groups;\n\n  const response = _.find(mailsDB, {\n    id: mailId\n  });\n\n  if (!response) {\n    return [404, 'Requested mail do not exist.'];\n  }\n\n  return [200, response];\n});\nmock.onGet(/\\/api\\/mailbox\\/mails\\/filters\\/[^]+/).reply(_ref2 => {\n  let {\n    url,\n    data\n  } = _ref2;\n  const {\n    filterSlug\n  } = url.match(/\\/api\\/mailbox\\/mails\\/filters\\/(?<filterSlug>[^/]+)/).groups;\n\n  const response = _.filter(mailsDB, {\n    [filterSlug]: true\n  });\n\n  return [200, response];\n});\nmock.onGet(/\\/api\\/mailbox\\/mails\\/labels\\/(?<labelSlug>[^/]*)\\/(?<mailId>[^/]*)/).reply(_ref3 => {\n  let {\n    url,\n    data\n  } = _ref3;\n  const {\n    labelSlug,\n    mailId\n  } = url.match(/\\/api\\/mailbox\\/mails\\/labels\\/(?<labelSlug>[^/]*)\\/(?<mailId>[^/]*)/).groups;\n\n  const response = _.find(mailsDB, {\n    id: mailId\n  });\n\n  if (!response) {\n    return [404, 'Requested mail do not exist.'];\n  }\n\n  return [200, response];\n});\nmock.onGet(/\\/api\\/mailbox\\/mails\\/labels\\/[^]+/).reply(_ref4 => {\n  let {\n    url,\n    data\n  } = _ref4;\n  const {\n    labelSlug\n  } = url.match(/\\/api\\/mailbox\\/mails\\/labels\\/(?<labelSlug>[^/]+)/).groups;\n\n  const labelId = _.find(labelsDB, {\n    slug: labelSlug\n  }).id;\n\n  const response = _.filter(mailsDB, item => item.labels.includes(labelId));\n\n  return [200, response];\n});\nmock.onGet(/\\/api\\/mailbox\\/mails\\/(?<folderSlug>[^/]*)\\/(?<mailId>[^/]*)/).reply(_ref5 => {\n  let {\n    url,\n    data\n  } = _ref5;\n  const {\n    folderSlug,\n    mailId\n  } = url.match(/\\/api\\/mailbox\\/mails\\/(?<folderSlug>[^/]+)\\/(?<mailId>[^/]+)/).groups;\n\n  const response = _.find(mailsDB, {\n    id: mailId\n  });\n\n  if (!response) {\n    return [404, 'Requested mail do not exist.'];\n  }\n\n  return [200, response];\n});\nmock.onGet(/\\/api\\/mailbox\\/mails\\/[^]+/).reply(_ref6 => {\n  let {\n    url,\n    data\n  } = _ref6;\n  const {\n    folderSlug\n  } = url.match(/\\/api\\/mailbox\\/mails\\/(?<folderSlug>[^/]+)/).groups;\n\n  const folderId = _.find(foldersDB, {\n    slug: folderSlug\n  }).id;\n\n  const response = _.filter(mailsDB, {\n    folder: folderId\n  });\n\n  return [200, response];\n});\nmock.onGet('/api/mailbox/folders').reply(config => {\n  return [200, foldersDB];\n});\nmock.onGet('/api/mailbox/filters').reply(config => {\n  return [200, filtersDB];\n});\nmock.onGet('/api/mailbox/labels').reply(config => {\n  return [200, labelsDB];\n});\nmock.onPost('/api/mailbox/actions').reply(_ref7 => {\n  let {\n    url,\n    data\n  } = _ref7;\n  const {\n    type,\n    value,\n    ids\n  } = JSON.parse(data);\n\n  if (type === 'labels') {\n    _.assign(mailsDB, mailsDB.map(_mail => ids.includes(_mail.id) ? { ..._mail,\n      labels: value\n    } : _mail));\n\n    return [200, true];\n  }\n\n  if (type === 'label') {\n    _.assign(mailsDB, mailsDB.map(_mail => ids.includes(_mail.id) ? { ..._mail,\n      labels: _mail.labels.includes(value) ? _mail.labels : [..._mail.labels, value]\n    } : _mail));\n\n    return [200, true];\n  }\n\n  if (type === 'folder') {\n    _.assign(mailsDB, mailsDB.map(_mail => ids.includes(_mail.id) ? { ..._mail,\n      folder: value\n    } : _mail));\n\n    return [200, true];\n  }\n\n  if (type === 'starred') {\n    _.assign(mailsDB, mailsDB.map(_mail => ids.includes(_mail.id) ? { ..._mail,\n      starred: value\n    } : _mail));\n\n    return [200, true];\n  }\n\n  if (type === 'important') {\n    _.assign(mailsDB, mailsDB.map(_mail => ids.includes(_mail.id) ? { ..._mail,\n      important: value\n    } : _mail));\n\n    return [200, true];\n  }\n\n  if (type === 'unread') {\n    _.assign(mailsDB, mailsDB.map(_mail => ids.includes(_mail.id) ? { ..._mail,\n      unread: value\n    } : _mail));\n\n    return [200, true];\n  }\n\n  return [404, false];\n});","map":{"version":3,"names":["_","mockApi","mock","mailsDB","components","examples","mailbox_mails","value","labelsDB","mailbox_labels","filtersDB","mailbox_filters","foldersDB","mailbox_folders","onGet","reply","url","data","filterSlug","mailId","match","groups","response","find","id","filter","labelSlug","labelId","slug","item","labels","includes","folderSlug","folderId","folder","config","onPost","type","ids","JSON","parse","assign","map","_mail","starred","important","unread"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/src/@mock-api/api/mailbox-api.js"],"sourcesContent":["import _ from '@lodash';\r\nimport mockApi from '../mock-api.json';\r\nimport mock from '../mock';\r\n\r\nconst mailsDB = mockApi.components.examples.mailbox_mails.value;\r\nconst labelsDB = mockApi.components.examples.mailbox_labels.value;\r\nconst filtersDB = mockApi.components.examples.mailbox_filters.value;\r\nconst foldersDB = mockApi.components.examples.mailbox_folders.value;\r\n\r\nmock\r\n  .onGet(/\\/api\\/mailbox\\/mails\\/filters\\/(?<filterSlug>[^/]*)\\/(?<mailId>[^/]*)/)\r\n  .reply(({ url, data }) => {\r\n    const { filterSlug, mailId } = url.match(\r\n      /\\/api\\/mailbox\\/mails\\/filters\\/(?<filterSlug>[^/]*)\\/(?<mailId>[^/]*)/\r\n    ).groups;\r\n    const response = _.find(mailsDB, { id: mailId });\r\n    if (!response) {\r\n      return [404, 'Requested mail do not exist.'];\r\n    }\r\n    return [200, response];\r\n  });\r\n\r\nmock.onGet(/\\/api\\/mailbox\\/mails\\/filters\\/[^]+/).reply(({ url, data }) => {\r\n  const { filterSlug } = url.match(/\\/api\\/mailbox\\/mails\\/filters\\/(?<filterSlug>[^/]+)/).groups;\r\n\r\n  const response = _.filter(mailsDB, { [filterSlug]: true });\r\n\r\n  return [200, response];\r\n});\r\n\r\nmock\r\n  .onGet(/\\/api\\/mailbox\\/mails\\/labels\\/(?<labelSlug>[^/]*)\\/(?<mailId>[^/]*)/)\r\n  .reply(({ url, data }) => {\r\n    const { labelSlug, mailId } = url.match(\r\n      /\\/api\\/mailbox\\/mails\\/labels\\/(?<labelSlug>[^/]*)\\/(?<mailId>[^/]*)/\r\n    ).groups;\r\n    const response = _.find(mailsDB, { id: mailId });\r\n    if (!response) {\r\n      return [404, 'Requested mail do not exist.'];\r\n    }\r\n    return [200, response];\r\n  });\r\n\r\nmock.onGet(/\\/api\\/mailbox\\/mails\\/labels\\/[^]+/).reply(({ url, data }) => {\r\n  const { labelSlug } = url.match(/\\/api\\/mailbox\\/mails\\/labels\\/(?<labelSlug>[^/]+)/).groups;\r\n\r\n  const labelId = _.find(labelsDB, { slug: labelSlug }).id;\r\n\r\n  const response = _.filter(mailsDB, (item) => item.labels.includes(labelId));\r\n\r\n  return [200, response];\r\n});\r\n\r\nmock\r\n  .onGet(/\\/api\\/mailbox\\/mails\\/(?<folderSlug>[^/]*)\\/(?<mailId>[^/]*)/)\r\n  .reply(({ url, data }) => {\r\n    const { folderSlug, mailId } = url.match(\r\n      /\\/api\\/mailbox\\/mails\\/(?<folderSlug>[^/]+)\\/(?<mailId>[^/]+)/\r\n    ).groups;\r\n    const response = _.find(mailsDB, { id: mailId });\r\n    if (!response) {\r\n      return [404, 'Requested mail do not exist.'];\r\n    }\r\n    return [200, response];\r\n  });\r\n\r\nmock.onGet(/\\/api\\/mailbox\\/mails\\/[^]+/).reply(({ url, data }) => {\r\n  const { folderSlug } = url.match(/\\/api\\/mailbox\\/mails\\/(?<folderSlug>[^/]+)/).groups;\r\n\r\n  const folderId = _.find(foldersDB, { slug: folderSlug }).id;\r\n\r\n  const response = _.filter(mailsDB, { folder: folderId });\r\n\r\n  return [200, response];\r\n});\r\n\r\nmock.onGet('/api/mailbox/folders').reply((config) => {\r\n  return [200, foldersDB];\r\n});\r\n\r\nmock.onGet('/api/mailbox/filters').reply((config) => {\r\n  return [200, filtersDB];\r\n});\r\n\r\nmock.onGet('/api/mailbox/labels').reply((config) => {\r\n  return [200, labelsDB];\r\n});\r\n\r\nmock.onPost('/api/mailbox/actions').reply(({ url, data }) => {\r\n  const { type, value, ids } = JSON.parse(data);\r\n\r\n  if (type === 'labels') {\r\n    _.assign(\r\n      mailsDB,\r\n      mailsDB.map((_mail) =>\r\n        ids.includes(_mail.id)\r\n          ? {\r\n              ..._mail,\r\n              labels: value,\r\n            }\r\n          : _mail\r\n      )\r\n    );\r\n    return [200, true];\r\n  }\r\n  if (type === 'label') {\r\n    _.assign(\r\n      mailsDB,\r\n      mailsDB.map((_mail) =>\r\n        ids.includes(_mail.id)\r\n          ? {\r\n              ..._mail,\r\n              labels: _mail.labels.includes(value) ? _mail.labels : [..._mail.labels, value],\r\n            }\r\n          : _mail\r\n      )\r\n    );\r\n    return [200, true];\r\n  }\r\n  if (type === 'folder') {\r\n    _.assign(\r\n      mailsDB,\r\n      mailsDB.map((_mail) =>\r\n        ids.includes(_mail.id)\r\n          ? {\r\n              ..._mail,\r\n              folder: value,\r\n            }\r\n          : _mail\r\n      )\r\n    );\r\n    return [200, true];\r\n  }\r\n\r\n  if (type === 'starred') {\r\n    _.assign(\r\n      mailsDB,\r\n      mailsDB.map((_mail) =>\r\n        ids.includes(_mail.id)\r\n          ? {\r\n              ..._mail,\r\n              starred: value,\r\n            }\r\n          : _mail\r\n      )\r\n    );\r\n    return [200, true];\r\n  }\r\n\r\n  if (type === 'important') {\r\n    _.assign(\r\n      mailsDB,\r\n      mailsDB.map((_mail) =>\r\n        ids.includes(_mail.id)\r\n          ? {\r\n              ..._mail,\r\n              important: value,\r\n            }\r\n          : _mail\r\n      )\r\n    );\r\n    return [200, true];\r\n  }\r\n  if (type === 'unread') {\r\n    _.assign(\r\n      mailsDB,\r\n      mailsDB.map((_mail) =>\r\n        ids.includes(_mail.id)\r\n          ? {\r\n              ..._mail,\r\n              unread: value,\r\n            }\r\n          : _mail\r\n      )\r\n    );\r\n    return [200, true];\r\n  }\r\n\r\n  return [404, false];\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}