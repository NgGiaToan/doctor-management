{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\giato\\\\Downloads\\\\Workspace\\\\.Net\\\\api\\\\doctor-management-fe\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\");\n\nvar _createForOfIteratorHelper = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _toConsumableArray = require(\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getConfig = exports.findConfig = exports.CONFIG_FILE_NAMES = exports.loadConfig = void 0;\n\nvar fs = require(\"fs\");\n\nvar path = require(\"path\");\n\nvar redocly_1 = require(\"../redocly\");\n\nvar utils_1 = require(\"../utils\");\n\nvar config_1 = require(\"./config\");\n\nvar utils_2 = require(\"./utils\");\n\nvar config_resolvers_1 = require(\"./config-resolvers\");\n\nfunction loadConfig() {\n  var configPath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : findConfig();\n  var customExtends = arguments.length > 1 ? arguments[1] : undefined;\n\n  var _a;\n\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var rawConfig, redoclyClient, tokens, _iterator, _step, _rawConfig$resolve$ht, item, domain;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getConfig(configPath);\n\n          case 2:\n            rawConfig = _context.sent;\n\n            if (customExtends !== undefined) {\n              rawConfig.lint = rawConfig.lint || {};\n              rawConfig.lint.extends = customExtends;\n            } else if (utils_1.isEmptyObject(rawConfig)) {// TODO: check if we can add recommended here. add message here?\n              // rawConfig.lint = { extends: ['recommended'], recommendedFallback: true };\n            }\n\n            redoclyClient = new redocly_1.RedoclyClient();\n            _context.next = 7;\n            return redoclyClient.getTokens();\n\n          case 7:\n            tokens = _context.sent;\n\n            if (tokens.length) {\n              if (!rawConfig.resolve) rawConfig.resolve = {};\n              if (!rawConfig.resolve.http) rawConfig.resolve.http = {};\n              rawConfig.resolve.http.headers = _toConsumableArray((_a = rawConfig.resolve.http.headers) !== null && _a !== void 0 ? _a : []);\n              _iterator = _createForOfIteratorHelper(tokens);\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  item = _step.value;\n                  domain = config_1.DOMAINS[item.region];\n\n                  (_rawConfig$resolve$ht = rawConfig.resolve.http.headers).push.apply(_rawConfig$resolve$ht, [{\n                    matches: \"https://api.\".concat(domain, \"/registry/**\"),\n                    name: 'Authorization',\n                    envVariable: undefined,\n                    value: item.token\n                  }].concat(_toConsumableArray(item.region === 'us' ? [{\n                    matches: \"https://api.redoc.ly/registry/**\",\n                    name: 'Authorization',\n                    envVariable: undefined,\n                    value: item.token\n                  }] : [])));\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n            }\n\n            return _context.abrupt(\"return\", config_resolvers_1.resolveConfig(rawConfig, configPath));\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.loadConfig = loadConfig;\nexports.CONFIG_FILE_NAMES = ['redocly.yaml', 'redocly.yml', '.redocly.yaml', '.redocly.yml'];\n\nfunction findConfig(dir) {\n  if (!fs.hasOwnProperty('existsSync')) return;\n  var existingConfigFiles = exports.CONFIG_FILE_NAMES.map(function (name) {\n    return dir ? path.resolve(dir, name) : name;\n  }).filter(fs.existsSync);\n\n  if (existingConfigFiles.length > 1) {\n    throw new Error(\"\\n      Multiple configuration files are not allowed. \\n      Found the following files: \".concat(existingConfigFiles.join(', '), \". \\n      Please use 'redocly.yaml' instead.\\n    \"));\n  }\n\n  return existingConfigFiles[0];\n}\n\nexports.findConfig = findConfig;\n\nfunction getConfig() {\n  var configPath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : findConfig();\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var rawConfig;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (configPath) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", {});\n\n          case 2:\n            _context2.prev = 2;\n            _context2.next = 5;\n            return utils_1.loadYaml(configPath);\n\n          case 5:\n            _context2.t0 = _context2.sent;\n\n            if (_context2.t0) {\n              _context2.next = 8;\n              break;\n            }\n\n            _context2.t0 = {};\n\n          case 8:\n            rawConfig = _context2.t0;\n            return _context2.abrupt(\"return\", utils_2.transformConfig(rawConfig));\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t1 = _context2[\"catch\"](2);\n            throw new Error(\"Error parsing config file at '\".concat(configPath, \"': \").concat(_context2.t1.message));\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[2, 12]]);\n  }));\n}\n\nexports.getConfig = getConfig;","map":null,"metadata":{},"sourceType":"script"}