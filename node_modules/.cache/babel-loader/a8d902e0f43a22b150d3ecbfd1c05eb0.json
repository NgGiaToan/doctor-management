{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\giato\\\\Downloads\\\\Workspace\\\\.Net\\\\api\\\\doctor-management-fe\\\\src\\\\app\\\\main\\\\documentation\\\\material-ui-components\\\\components\\\\text-fields\\\\FormattedInputs.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { IMaskInput } from 'react-imask';\nimport NumberFormat from 'react-number-format';\nimport Box from '@mui/material/Box';\nimport Input from '@mui/material/Input';\nimport InputLabel from '@mui/material/InputLabel';\nimport TextField from '@mui/material/TextField';\nimport FormControl from '@mui/material/FormControl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextMaskCustom = /*#__PURE__*/React.forwardRef(_c = function TextMaskCustom(props, ref) {\n  const {\n    onChange,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(IMaskInput, { ...other,\n    mask: \"(#00) 000-0000\",\n    definitions: {\n      '#': /[1-9]/\n    },\n    inputRef: ref,\n    onAccept: value => onChange({\n      target: {\n        name: props.name,\n        value\n      }\n    }),\n    overwrite: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n});\n_c2 = TextMaskCustom;\nTextMaskCustom.propTypes = {\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n};\nconst NumberFormatCustom = /*#__PURE__*/React.forwardRef(_c3 = function NumberFormatCustom(props, ref) {\n  const {\n    onChange,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(NumberFormat, { ...other,\n    getInputRef: ref,\n    onValueChange: values => {\n      onChange({\n        target: {\n          name: props.name,\n          value: values.value\n        }\n      });\n    },\n    thousandSeparator: true,\n    isNumericString: true,\n    prefix: \"$\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n});\n_c4 = NumberFormatCustom;\nNumberFormatCustom.propTypes = {\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n};\nexport default function FormattedInputs() {\n  _s();\n\n  const [values, setValues] = React.useState({\n    textmask: '(100) 000-0000',\n    numberformat: '1320'\n  });\n\n  const handleChange = event => {\n    setValues({ ...values,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      '& > :not(style)': {\n        m: 1\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(FormControl, {\n      variant: \"standard\",\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        htmlFor: \"formatted-text-mask-input\",\n        children: \"react-imask\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        value: values.textmask,\n        onChange: handleChange,\n        name: \"textmask\",\n        id: \"formatted-text-mask-input\",\n        inputComponent: TextMaskCustom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"react-number-format\",\n      value: values.numberformat,\n      onChange: handleChange,\n      name: \"numberformat\",\n      id: \"formatted-numberformat-input\",\n      InputProps: {\n        inputComponent: NumberFormatCustom\n      },\n      variant: \"standard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FormattedInputs, \"4HH+dgK9VGFXFue3sQFweQ/O2MU=\");\n\n_c5 = FormattedInputs;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"TextMaskCustom$React.forwardRef\");\n$RefreshReg$(_c2, \"TextMaskCustom\");\n$RefreshReg$(_c3, \"NumberFormatCustom$React.forwardRef\");\n$RefreshReg$(_c4, \"NumberFormatCustom\");\n$RefreshReg$(_c5, \"FormattedInputs\");","map":{"version":3,"names":["React","PropTypes","IMaskInput","NumberFormat","Box","Input","InputLabel","TextField","FormControl","TextMaskCustom","forwardRef","props","ref","onChange","other","value","target","name","propTypes","string","isRequired","func","NumberFormatCustom","values","FormattedInputs","setValues","useState","textmask","numberformat","handleChange","event","m","inputComponent"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/src/app/main/documentation/material-ui-components/components/text-fields/FormattedInputs.js"],"sourcesContent":["import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { IMaskInput } from 'react-imask';\r\nimport NumberFormat from 'react-number-format';\r\nimport Box from '@mui/material/Box';\r\nimport Input from '@mui/material/Input';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport FormControl from '@mui/material/FormControl';\r\n\r\nconst TextMaskCustom = React.forwardRef(function TextMaskCustom(props, ref) {\r\n  const { onChange, ...other } = props;\r\n  return (\r\n    <IMaskInput\r\n      {...other}\r\n      mask=\"(#00) 000-0000\"\r\n      definitions={{\r\n        '#': /[1-9]/,\r\n      }}\r\n      inputRef={ref}\r\n      onAccept={(value) => onChange({ target: { name: props.name, value } })}\r\n      overwrite\r\n    />\r\n  );\r\n});\r\n\r\nTextMaskCustom.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst NumberFormatCustom = React.forwardRef(function NumberFormatCustom(props, ref) {\r\n  const { onChange, ...other } = props;\r\n\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={ref}\r\n      onValueChange={(values) => {\r\n        onChange({\r\n          target: {\r\n            name: props.name,\r\n            value: values.value,\r\n          },\r\n        });\r\n      }}\r\n      thousandSeparator\r\n      isNumericString\r\n      prefix=\"$\"\r\n    />\r\n  );\r\n});\r\n\r\nNumberFormatCustom.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function FormattedInputs() {\r\n  const [values, setValues] = React.useState({\r\n    textmask: '(100) 000-0000',\r\n    numberformat: '1320',\r\n  });\r\n\r\n  const handleChange = (event) => {\r\n    setValues({\r\n      ...values,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        '& > :not(style)': {\r\n          m: 1,\r\n        },\r\n      }}\r\n    >\r\n      <FormControl variant=\"standard\">\r\n        <InputLabel htmlFor=\"formatted-text-mask-input\">react-imask</InputLabel>\r\n        <Input\r\n          value={values.textmask}\r\n          onChange={handleChange}\r\n          name=\"textmask\"\r\n          id=\"formatted-text-mask-input\"\r\n          inputComponent={TextMaskCustom}\r\n        />\r\n      </FormControl>\r\n      <TextField\r\n        label=\"react-number-format\"\r\n        value={values.numberformat}\r\n        onChange={handleChange}\r\n        name=\"numberformat\"\r\n        id=\"formatted-numberformat-input\"\r\n        InputProps={{\r\n          inputComponent: NumberFormatCustom,\r\n        }}\r\n        variant=\"standard\"\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}