{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport history from '@history';\nimport _ from '@lodash';\nimport { showMessage } from 'app/store/fuse/messageSlice';\nimport reorder, { reorderQuoteMap } from './reorder';\nimport { removeCard } from './cardSlice';\nimport { newList, removeList } from './listsSlice';\nimport { newCard } from './cardsSlice';\n/**\r\n * Get Board\r\n */\n\nexport const getBoard = createAsyncThunk('scrumboardApp/board/get', async (boardId, _ref) => {\n  let {\n    dispatch\n  } = _ref;\n\n  try {\n    const response = await axios.get(`/api/scrumboard/boards/${boardId}`);\n    const data = await response.data;\n    return data;\n  } catch (error) {\n    dispatch(showMessage({\n      message: error.response.data,\n      autoHideDuration: 2000,\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      }\n    }));\n    history.push({\n      pathname: '/apps/scrumboard/boards'\n    });\n    return null;\n  }\n});\n/**\r\n * Update Board\r\n */\n\nexport const updateBoard = createAsyncThunk('scrumboardApp/board/update', async (newData, _ref2) => {\n  let {\n    dispatch,\n    getState\n  } = _ref2;\n  const {\n    board\n  } = getState().scrumboardApp;\n  const response = await axios.put(`/api/scrumboard/boards/${board.id}`, newData);\n  const data = await response.data;\n  return data;\n});\n/**\r\n * Reorder Board List\r\n */\n\nexport const reorderList = createAsyncThunk('scrumboardApp/board/reorderList', async (result, _ref3) => {\n  let {\n    dispatch,\n    getState\n  } = _ref3;\n  const {\n    board\n  } = getState().scrumboardApp;\n  const {\n    lists\n  } = board;\n  const ordered = reorder(_.merge([], lists), result.source.index, result.destination.index);\n  const response = await axios.put(`/api/scrumboard/boards/${board.id}`, {\n    lists: ordered\n  });\n  const data = await response.data;\n  dispatch(showMessage({\n    message: 'List Order Saved',\n    autoHideDuration: 2000,\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'right'\n    }\n  }));\n  return data;\n});\n/**\r\n * Reorder Board Card\r\n */\n\nexport const reorderCard = createAsyncThunk('scrumboardApp/board/reorderCard', async (_ref4, _ref5) => {\n  let {\n    source,\n    destination\n  } = _ref4;\n  let {\n    dispatch,\n    getState\n  } = _ref5;\n  const {\n    board\n  } = getState().scrumboardApp;\n  const {\n    lists\n  } = board;\n  const ordered = reorderQuoteMap(_.merge([], lists), source, destination);\n  const response = await axios.put(`/api/scrumboard/boards/${board.id}`, {\n    lists: ordered\n  });\n  const data = await response.data;\n  dispatch(showMessage({\n    message: 'Card Order Saved',\n    autoHideDuration: 2000,\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'right'\n    }\n  }));\n  return data;\n});\n/**\r\n * Delete Board\r\n */\n\nexport const deleteBoard = createAsyncThunk('scrumboardApp/board/delete', async (params, _ref6) => {\n  let {\n    dispatch,\n    getState\n  } = _ref6;\n  const {\n    board\n  } = getState().scrumboardApp;\n  const response = await axios.delete(`/api/scrumboard/boards/${board.id}`);\n  history.push({\n    pathname: '/apps/scrumboard/boards'\n  });\n  const data = await response.data;\n  return data;\n});\nconst boardsSlice = createSlice({\n  name: 'scrumboardApp/boards',\n  initialState: null,\n  reducers: {\n    resetBoard: (state, action) => null,\n    addLabel: (state, action) => {\n      state.labels = [...state.labels, action.payload];\n    }\n  },\n  extraReducers: {\n    [getBoard.fulfilled]: (state, action) => action.payload,\n    [updateBoard.fulfilled]: (state, action) => action.payload,\n    [reorderList.fulfilled]: (state, action) => action.payload,\n    [reorderCard.fulfilled]: (state, action) => action.payload,\n    [deleteBoard.fulfilled]: (state, action) => {\n      state = {};\n    },\n    [removeCard.fulfilled]: (state, action) => {\n      const cardId = action.payload;\n      state.lists = state.lists.map(list => ({ ...list,\n        cards: _.reject(list.cards, id => id === cardId)\n      }));\n    },\n    [removeList.fulfilled]: (state, action) => {\n      const listId = action.payload;\n      state.lists = _.reject(state.lists, {\n        id: listId\n      });\n    },\n    [newList.fulfilled]: (state, action) => {\n      state.lists = [...state.lists, {\n        id: action.payload.id,\n        cards: []\n      }];\n    },\n    [newCard.fulfilled]: (state, action) => {\n      const cardData = action.payload;\n      state.lists = state.lists.map(list => list.id === cardData.listId ? { ...list,\n        cards: [...list.cards, cardData.id]\n      } : list);\n    }\n  }\n});\nexport const {\n  resetBoard,\n  addLabel\n} = boardsSlice.actions;\nexport const selectBoard = _ref7 => {\n  let {\n    scrumboardApp\n  } = _ref7;\n  return scrumboardApp.board;\n};\nexport default boardsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","history","_","showMessage","reorder","reorderQuoteMap","removeCard","newList","removeList","newCard","getBoard","boardId","dispatch","response","get","data","error","message","autoHideDuration","anchorOrigin","vertical","horizontal","push","pathname","updateBoard","newData","getState","board","scrumboardApp","put","id","reorderList","result","lists","ordered","merge","source","index","destination","reorderCard","deleteBoard","params","delete","boardsSlice","name","initialState","reducers","resetBoard","state","action","addLabel","labels","payload","extraReducers","fulfilled","cardId","map","list","cards","reject","listId","cardData","actions","selectBoard","reducer"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/src/app/main/apps/scrumboard/store/boardSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport history from '@history';\r\nimport _ from '@lodash';\r\nimport { showMessage } from 'app/store/fuse/messageSlice';\r\nimport reorder, { reorderQuoteMap } from './reorder';\r\nimport { removeCard } from './cardSlice';\r\nimport { newList, removeList } from './listsSlice';\r\nimport { newCard } from './cardsSlice';\r\n\r\n/**\r\n * Get Board\r\n */\r\nexport const getBoard = createAsyncThunk(\r\n  'scrumboardApp/board/get',\r\n  async (boardId, { dispatch }) => {\r\n    try {\r\n      const response = await axios.get(`/api/scrumboard/boards/${boardId}`);\r\n      const data = await response.data;\r\n      return data;\r\n    } catch (error) {\r\n      dispatch(\r\n        showMessage({\r\n          message: error.response.data,\r\n          autoHideDuration: 2000,\r\n          anchorOrigin: {\r\n            vertical: 'top',\r\n            horizontal: 'right',\r\n          },\r\n        })\r\n      );\r\n\r\n      history.push({\r\n        pathname: '/apps/scrumboard/boards',\r\n      });\r\n      return null;\r\n    }\r\n  }\r\n);\r\n\r\n/**\r\n * Update Board\r\n */\r\nexport const updateBoard = createAsyncThunk(\r\n  'scrumboardApp/board/update',\r\n  async (newData, { dispatch, getState }) => {\r\n    const { board } = getState().scrumboardApp;\r\n\r\n    const response = await axios.put(`/api/scrumboard/boards/${board.id}`, newData);\r\n\r\n    const data = await response.data;\r\n\r\n    return data;\r\n  }\r\n);\r\n\r\n/**\r\n * Reorder Board List\r\n */\r\nexport const reorderList = createAsyncThunk(\r\n  'scrumboardApp/board/reorderList',\r\n  async (result, { dispatch, getState }) => {\r\n    const { board } = getState().scrumboardApp;\r\n    const { lists } = board;\r\n\r\n    const ordered = reorder(_.merge([], lists), result.source.index, result.destination.index);\r\n\r\n    const response = await axios.put(`/api/scrumboard/boards/${board.id}`, { lists: ordered });\r\n\r\n    const data = await response.data;\r\n\r\n    dispatch(\r\n      showMessage({\r\n        message: 'List Order Saved',\r\n        autoHideDuration: 2000,\r\n        anchorOrigin: {\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        },\r\n      })\r\n    );\r\n\r\n    return data;\r\n  }\r\n);\r\n\r\n/**\r\n * Reorder Board Card\r\n */\r\nexport const reorderCard = createAsyncThunk(\r\n  'scrumboardApp/board/reorderCard',\r\n  async ({ source, destination }, { dispatch, getState }) => {\r\n    const { board } = getState().scrumboardApp;\r\n    const { lists } = board;\r\n\r\n    const ordered = reorderQuoteMap(_.merge([], lists), source, destination);\r\n\r\n    const response = await axios.put(`/api/scrumboard/boards/${board.id}`, { lists: ordered });\r\n\r\n    const data = await response.data;\r\n\r\n    dispatch(\r\n      showMessage({\r\n        message: 'Card Order Saved',\r\n        autoHideDuration: 2000,\r\n        anchorOrigin: {\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        },\r\n      })\r\n    );\r\n\r\n    return data;\r\n  }\r\n);\r\n\r\n/**\r\n * Delete Board\r\n */\r\nexport const deleteBoard = createAsyncThunk(\r\n  'scrumboardApp/board/delete',\r\n  async (params, { dispatch, getState }) => {\r\n    const { board } = getState().scrumboardApp;\r\n\r\n    const response = await axios.delete(`/api/scrumboard/boards/${board.id}`);\r\n\r\n    history.push({\r\n      pathname: '/apps/scrumboard/boards',\r\n    });\r\n\r\n    const data = await response.data;\r\n\r\n    return data;\r\n  }\r\n);\r\n\r\nconst boardsSlice = createSlice({\r\n  name: 'scrumboardApp/boards',\r\n  initialState: null,\r\n  reducers: {\r\n    resetBoard: (state, action) => null,\r\n    addLabel: (state, action) => {\r\n      state.labels = [...state.labels, action.payload];\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [getBoard.fulfilled]: (state, action) => action.payload,\r\n    [updateBoard.fulfilled]: (state, action) => action.payload,\r\n    [reorderList.fulfilled]: (state, action) => action.payload,\r\n    [reorderCard.fulfilled]: (state, action) => action.payload,\r\n    [deleteBoard.fulfilled]: (state, action) => {\r\n      state = {};\r\n    },\r\n    [removeCard.fulfilled]: (state, action) => {\r\n      const cardId = action.payload;\r\n\r\n      state.lists = state.lists.map((list) => ({\r\n        ...list,\r\n        cards: _.reject(list.cards, (id) => id === cardId),\r\n      }));\r\n    },\r\n    [removeList.fulfilled]: (state, action) => {\r\n      const listId = action.payload;\r\n\r\n      state.lists = _.reject(state.lists, { id: listId });\r\n    },\r\n    [newList.fulfilled]: (state, action) => {\r\n      state.lists = [...state.lists, { id: action.payload.id, cards: [] }];\r\n    },\r\n    [newCard.fulfilled]: (state, action) => {\r\n      const cardData = action.payload;\r\n      state.lists = state.lists.map((list) =>\r\n        list.id === cardData.listId ? { ...list, cards: [...list.cards, cardData.id] } : list\r\n      );\r\n    },\r\n  },\r\n});\r\n\r\nexport const { resetBoard, addLabel } = boardsSlice.actions;\r\n\r\nexport const selectBoard = ({ scrumboardApp }) => scrumboardApp.board;\r\n\r\nexport default boardsSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}