{"ast":null,"code":"import _ from '@lodash';\nimport mockApi from '../mock-api.json';\nimport mock from '../mock';\nconst itemsApi = mockApi.components.examples.file_manager_items.value;\nmock.onGet(/\\/api\\/file-manager\\/[^]+/).reply(_ref => {\n  let {\n    url,\n    data\n  } = _ref;\n  let {\n    folderId\n  } = url.match(/\\/api\\/file-manager\\/(?<folderId>[^/]+)/).groups;\n\n  let items = _.cloneDeep(itemsApi);\n\n  folderId = folderId === 'undefined' ? null : folderId;\n  items = items.filter(item => item.folderId === folderId);\n\n  const pathItems = _.cloneDeep(itemsApi);\n\n  const path = [];\n  let currentFolder = null;\n\n  if (folderId) {\n    currentFolder = pathItems.find(item => item.id === folderId);\n    path.push(currentFolder);\n  }\n\n  while ((_currentFolder = currentFolder) !== null && _currentFolder !== void 0 && _currentFolder.folderId) {\n    var _currentFolder;\n\n    // eslint-disable-next-line no-loop-func\n    currentFolder = pathItems.find(item => item.id === currentFolder.folderId);\n\n    if (currentFolder) {\n      path.unshift(currentFolder);\n    }\n  }\n\n  return [200, {\n    items,\n    path\n  }];\n});","map":{"version":3,"names":["_","mockApi","mock","itemsApi","components","examples","file_manager_items","value","onGet","reply","url","data","folderId","match","groups","items","cloneDeep","filter","item","pathItems","path","currentFolder","find","id","push","unshift"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/src/@mock-api/api/file-manager-api.js"],"sourcesContent":["import _ from '@lodash';\r\nimport mockApi from '../mock-api.json';\r\nimport mock from '../mock';\r\n\r\nconst itemsApi = mockApi.components.examples.file_manager_items.value;\r\n\r\nmock.onGet(/\\/api\\/file-manager\\/[^]+/).reply(({ url, data }) => {\r\n  let { folderId } = url.match(/\\/api\\/file-manager\\/(?<folderId>[^/]+)/).groups;\r\n\r\n  let items = _.cloneDeep(itemsApi);\r\n\r\n  folderId = folderId === 'undefined' ? null : folderId;\r\n\r\n  items = items.filter((item) => item.folderId === folderId);\r\n\r\n  const pathItems = _.cloneDeep(itemsApi);\r\n  const path = [];\r\n\r\n  let currentFolder = null;\r\n\r\n  if (folderId) {\r\n    currentFolder = pathItems.find((item) => item.id === folderId);\r\n    path.push(currentFolder);\r\n  }\r\n\r\n  while (currentFolder?.folderId) {\r\n    // eslint-disable-next-line no-loop-func\r\n    currentFolder = pathItems.find((item) => item.id === currentFolder.folderId);\r\n    if (currentFolder) {\r\n      path.unshift(currentFolder);\r\n    }\r\n  }\r\n\r\n  return [\r\n    200,\r\n    {\r\n      items,\r\n      path,\r\n    },\r\n  ];\r\n});\r\n"],"mappings":"AAAA,OAAOA,CAAP,MAAc,SAAd;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AAEA,MAAMC,QAAQ,GAAGF,OAAO,CAACG,UAAR,CAAmBC,QAAnB,CAA4BC,kBAA5B,CAA+CC,KAAhE;AAEAL,IAAI,CAACM,KAAL,CAAW,2BAAX,EAAwCC,KAAxC,CAA8C,QAAmB;EAAA,IAAlB;IAAEC,GAAF;IAAOC;EAAP,CAAkB;EAC/D,IAAI;IAAEC;EAAF,IAAeF,GAAG,CAACG,KAAJ,CAAU,yCAAV,EAAqDC,MAAxE;;EAEA,IAAIC,KAAK,GAAGf,CAAC,CAACgB,SAAF,CAAYb,QAAZ,CAAZ;;EAEAS,QAAQ,GAAGA,QAAQ,KAAK,WAAb,GAA2B,IAA3B,GAAkCA,QAA7C;EAEAG,KAAK,GAAGA,KAAK,CAACE,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACN,QAAL,KAAkBA,QAAzC,CAAR;;EAEA,MAAMO,SAAS,GAAGnB,CAAC,CAACgB,SAAF,CAAYb,QAAZ,CAAlB;;EACA,MAAMiB,IAAI,GAAG,EAAb;EAEA,IAAIC,aAAa,GAAG,IAApB;;EAEA,IAAIT,QAAJ,EAAc;IACZS,aAAa,GAAGF,SAAS,CAACG,IAAV,CAAgBJ,IAAD,IAAUA,IAAI,CAACK,EAAL,KAAYX,QAArC,CAAhB;IACAQ,IAAI,CAACI,IAAL,CAAUH,aAAV;EACD;;EAED,yBAAOA,aAAP,2CAAO,eAAeT,QAAtB,EAAgC;IAAA;;IAC9B;IACAS,aAAa,GAAGF,SAAS,CAACG,IAAV,CAAgBJ,IAAD,IAAUA,IAAI,CAACK,EAAL,KAAYF,aAAa,CAACT,QAAnD,CAAhB;;IACA,IAAIS,aAAJ,EAAmB;MACjBD,IAAI,CAACK,OAAL,CAAaJ,aAAb;IACD;EACF;;EAED,OAAO,CACL,GADK,EAEL;IACEN,KADF;IAEEK;EAFF,CAFK,CAAP;AAOD,CAlCD"},"metadata":{},"sourceType":"module"}