{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NoIdenticalPaths = void 0;\n\nconst NoIdenticalPaths = () => {\n  return {\n    PathMap(pathMap, _ref) {\n      let {\n        report,\n        location\n      } = _ref;\n      const pathsMap = new Map();\n\n      for (const pathName of Object.keys(pathMap)) {\n        const id = pathName.replace(/{.+?}/g, '{VARIABLE}');\n        const existingSamePath = pathsMap.get(id);\n\n        if (existingSamePath) {\n          report({\n            message: `The path already exists which differs only by path parameter name(s): \\`${existingSamePath}\\` and \\`${pathName}\\`.`,\n            location: location.child([pathName]).key()\n          });\n        } else {\n          pathsMap.set(id, pathName);\n        }\n      }\n    }\n\n  };\n};\n\nexports.NoIdenticalPaths = NoIdenticalPaths;","map":{"version":3,"names":["Object","defineProperty","exports","value","NoIdenticalPaths","PathMap","pathMap","report","location","pathsMap","Map","pathName","keys","id","replace","existingSamePath","get","message","child","key","set"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@redocly/openapi-core/lib/rules/common/no-identical-paths.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NoIdenticalPaths = void 0;\nconst NoIdenticalPaths = () => {\n    return {\n        PathMap(pathMap, { report, location }) {\n            const pathsMap = new Map();\n            for (const pathName of Object.keys(pathMap)) {\n                const id = pathName.replace(/{.+?}/g, '{VARIABLE}');\n                const existingSamePath = pathsMap.get(id);\n                if (existingSamePath) {\n                    report({\n                        message: `The path already exists which differs only by path parameter name(s): \\`${existingSamePath}\\` and \\`${pathName}\\`.`,\n                        location: location.child([pathName]).key(),\n                    });\n                }\n                else {\n                    pathsMap.set(id, pathName);\n                }\n            }\n        },\n    };\n};\nexports.NoIdenticalPaths = NoIdenticalPaths;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2B,KAAK,CAAhC;;AACA,MAAMA,gBAAgB,GAAG,MAAM;EAC3B,OAAO;IACHC,OAAO,CAACC,OAAD,QAAgC;MAAA,IAAtB;QAAEC,MAAF;QAAUC;MAAV,CAAsB;MACnC,MAAMC,QAAQ,GAAG,IAAIC,GAAJ,EAAjB;;MACA,KAAK,MAAMC,QAAX,IAAuBX,MAAM,CAACY,IAAP,CAAYN,OAAZ,CAAvB,EAA6C;QACzC,MAAMO,EAAE,GAAGF,QAAQ,CAACG,OAAT,CAAiB,QAAjB,EAA2B,YAA3B,CAAX;QACA,MAAMC,gBAAgB,GAAGN,QAAQ,CAACO,GAAT,CAAaH,EAAb,CAAzB;;QACA,IAAIE,gBAAJ,EAAsB;UAClBR,MAAM,CAAC;YACHU,OAAO,EAAG,2EAA0EF,gBAAiB,YAAWJ,QAAS,KADtH;YAEHH,QAAQ,EAAEA,QAAQ,CAACU,KAAT,CAAe,CAACP,QAAD,CAAf,EAA2BQ,GAA3B;UAFP,CAAD,CAAN;QAIH,CALD,MAMK;UACDV,QAAQ,CAACW,GAAT,CAAaP,EAAb,EAAiBF,QAAjB;QACH;MACJ;IACJ;;EAhBE,CAAP;AAkBH,CAnBD;;AAoBAT,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B"},"metadata":{},"sourceType":"script"}