{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\giato\\\\Downloads\\\\Workspace\\\\.Net\\\\api\\\\doctor-management-fe\\\\src\\\\app\\\\main\\\\documentation\\\\fuse-components\\\\fuse-dialog\\\\FuseDialogDoc.js\",\n    _s = $RefreshSig$();\n\nimport FuseHighlight from '@fuse/core/FuseHighlight';\nimport Button from '@mui/material/Button';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Typography from '@mui/material/Typography';\nimport { useDispatch } from 'react-redux';\nimport { closeDialog, openDialog } from 'app/store/fuse/dialogSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction FuseDialogDoc(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      className: \"mb-40 font-700\",\n      children: \"FuseDialog\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      className: \"mb-16\",\n      component: \"p\",\n      children: [/*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"FuseDialog\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), \" is a simple dialog trigger for easily showing dialog messages via redux action. It should be located in the theme layouts.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      className: \"text-20 mt-20 mb-10 font-700\",\n      variant: \"h5\",\n      children: \"Usage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      className: \"mb-16\",\n      component: \"p\",\n      children: \"You can show dialog anywhere with dispatching the action openDialog, it is using Material-UI's dialog so you can pass the props in the object:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FuseHighlight, {\n      component: \"pre\",\n      className: \"language-jsx\",\n      children: `\n                        <Button\n                            onClick={()=> dispatch(openDialog({\n                                children: (\n                                    <React.Fragment>\n                                        <DialogTitle id=\"alert-dialog-title\">Use Google's location service?</DialogTitle>\n                                        <DialogContent>\n                                            <DialogContentText id=\"alert-dialog-description\">\n                                                Let Google help apps determine location. This means sending anonymous location data to\n                                                Google, even when no apps are running.\n                                            </DialogContentText>\n                                        </DialogContent>\n                                        <DialogActions>\n                                            <Button onClick={()=> dispatch(closeDialog())} color=\"primary\">\n                                                Disagree\n                                            </Button>\n                                            <Button onClick={()=> dispatch(closeDialog())} color=\"primary\" autoFocus>\n                                                Agree\n                                            </Button>\n                                        </DialogActions>\n                                    </React.Fragment>\n                                     )\n                                 }))}\n                            variant=\"contained\"\n                            color=\"secondary\"\n                        >\n                            Open Dialog\n                        </Button>\n                        `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      className: \"text-20 mt-20 mb-10 font-700\",\n      variant: \"h5\",\n      children: \"Example\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => dispatch(openDialog({\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n            id: \"alert-dialog-title\",\n            children: \"Use Google's location service?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n            children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n              id: \"alert-dialog-description\",\n              children: \"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => dispatch(closeDialog()),\n              color: \"primary\",\n              children: \"Disagree\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => dispatch(closeDialog()),\n              color: \"primary\",\n              autoFocus: true,\n              children: \"Agree\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true)\n      })),\n      variant: \"contained\",\n      color: \"secondary\",\n      children: \"Open Dialog\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(FuseDialogDoc, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\n_c = FuseDialogDoc;\nexport default FuseDialogDoc;\n\nvar _c;\n\n$RefreshReg$(_c, \"FuseDialogDoc\");","map":{"version":3,"names":["FuseHighlight","Button","DialogActions","DialogContent","DialogContentText","DialogTitle","Typography","useDispatch","closeDialog","openDialog","FuseDialogDoc","props","dispatch","children"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/src/app/main/documentation/fuse-components/fuse-dialog/FuseDialogDoc.js"],"sourcesContent":["import FuseHighlight from '@fuse/core/FuseHighlight';\r\nimport Button from '@mui/material/Button';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Typography from '@mui/material/Typography';\r\nimport { useDispatch } from 'react-redux';\r\nimport { closeDialog, openDialog } from 'app/store/fuse/dialogSlice';\r\n\r\nfunction FuseDialogDoc(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h4\" className=\"mb-40 font-700\">\r\n        FuseDialog\r\n      </Typography>\r\n\r\n      <Typography className=\"mb-16\" component=\"p\">\r\n        <code>FuseDialog</code> is a simple dialog trigger for easily showing dialog messages via\r\n        redux action. It should be located in the theme layouts.\r\n      </Typography>\r\n\r\n      <Typography className=\"text-20 mt-20 mb-10 font-700\" variant=\"h5\">\r\n        Usage\r\n      </Typography>\r\n\r\n      <Typography className=\"mb-16\" component=\"p\">\r\n        You can show dialog anywhere with dispatching the action openDialog, it is using\r\n        Material-UI's dialog so you can pass the props in the object:\r\n      </Typography>\r\n\r\n      <FuseHighlight component=\"pre\" className=\"language-jsx\">\r\n        {`\r\n                        <Button\r\n                            onClick={()=> dispatch(openDialog({\r\n                                children: (\r\n                                    <React.Fragment>\r\n                                        <DialogTitle id=\"alert-dialog-title\">Use Google's location service?</DialogTitle>\r\n                                        <DialogContent>\r\n                                            <DialogContentText id=\"alert-dialog-description\">\r\n                                                Let Google help apps determine location. This means sending anonymous location data to\r\n                                                Google, even when no apps are running.\r\n                                            </DialogContentText>\r\n                                        </DialogContent>\r\n                                        <DialogActions>\r\n                                            <Button onClick={()=> dispatch(closeDialog())} color=\"primary\">\r\n                                                Disagree\r\n                                            </Button>\r\n                                            <Button onClick={()=> dispatch(closeDialog())} color=\"primary\" autoFocus>\r\n                                                Agree\r\n                                            </Button>\r\n                                        </DialogActions>\r\n                                    </React.Fragment>\r\n                                     )\r\n                                 }))}\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                        >\r\n                            Open Dialog\r\n                        </Button>\r\n                        `}\r\n      </FuseHighlight>\r\n\r\n      <Typography className=\"text-20 mt-20 mb-10 font-700\" variant=\"h5\">\r\n        Example\r\n      </Typography>\r\n\r\n      <Button\r\n        onClick={() =>\r\n          dispatch(\r\n            openDialog({\r\n              children: (\r\n                <>\r\n                  <DialogTitle id=\"alert-dialog-title\">Use Google's location service?</DialogTitle>\r\n                  <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                      Let Google help apps determine location. This means sending anonymous location\r\n                      data to Google, even when no apps are running.\r\n                    </DialogContentText>\r\n                  </DialogContent>\r\n                  <DialogActions>\r\n                    <Button onClick={() => dispatch(closeDialog())} color=\"primary\">\r\n                      Disagree\r\n                    </Button>\r\n                    <Button onClick={() => dispatch(closeDialog())} color=\"primary\" autoFocus>\r\n                      Agree\r\n                    </Button>\r\n                  </DialogActions>\r\n                </>\r\n              ),\r\n            })\r\n          )\r\n        }\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n      >\r\n        Open Dialog\r\n      </Button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FuseDialogDoc;\r\n"],"mappings":";;;AAAA,OAAOA,aAAP,MAA0B,0BAA1B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,4BAAxC;;;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;EAAA;;EAC5B,MAAMC,QAAQ,GAAGL,WAAW,EAA5B;EAEA,oBACE;IAAA,wBACE,QAAC,UAAD;MAAY,OAAO,EAAC,IAApB;MAAyB,SAAS,EAAC,gBAAnC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAKE,QAAC,UAAD;MAAY,SAAS,EAAC,OAAtB;MAA8B,SAAS,EAAC,GAAxC;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF;IAAA;MAAA;MAAA;MAAA;IAAA,QALF,eAUE,QAAC,UAAD;MAAY,SAAS,EAAC,8BAAtB;MAAqD,OAAO,EAAC,IAA7D;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAVF,eAcE,QAAC,UAAD;MAAY,SAAS,EAAC,OAAtB;MAA8B,SAAS,EAAC,GAAxC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAdF,eAmBE,QAAC,aAAD;MAAe,SAAS,EAAC,KAAzB;MAA+B,SAAS,EAAC,cAAzC;MAAA,UACI;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IA7BM;MAAA;MAAA;MAAA;IAAA,QAnBF,eAmDE,QAAC,UAAD;MAAY,SAAS,EAAC,8BAAtB;MAAqD,OAAO,EAAC,IAA7D;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAnDF,eAuDE,QAAC,MAAD;MACE,OAAO,EAAE,MACPK,QAAQ,CACNH,UAAU,CAAC;QACTI,QAAQ,eACN;UAAA,wBACE,QAAC,WAAD;YAAa,EAAE,EAAC,oBAAhB;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QADF,eAEE,QAAC,aAAD;YAAA,uBACE,QAAC,iBAAD;cAAmB,EAAE,EAAC,0BAAtB;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA;UADF;YAAA;YAAA;YAAA;UAAA,QAFF,eAQE,QAAC,aAAD;YAAA,wBACE,QAAC,MAAD;cAAQ,OAAO,EAAE,MAAMD,QAAQ,CAACJ,WAAW,EAAZ,CAA/B;cAAgD,KAAK,EAAC,SAAtD;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QADF,eAIE,QAAC,MAAD;cAAQ,OAAO,EAAE,MAAMI,QAAQ,CAACJ,WAAW,EAAZ,CAA/B;cAAgD,KAAK,EAAC,SAAtD;cAAgE,SAAS,MAAzE;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QAJF;UAAA;YAAA;YAAA;YAAA;UAAA,QARF;QAAA;MAFO,CAAD,CADJ,CAFZ;MA0BE,OAAO,EAAC,WA1BV;MA2BE,KAAK,EAAC,WA3BR;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAvDF;EAAA,gBADF;AAyFD;;GA5FQE,a;UACUH,W;;;KADVG,a;AA8FT,eAAeA,aAAf"},"metadata":{},"sourceType":"module"}