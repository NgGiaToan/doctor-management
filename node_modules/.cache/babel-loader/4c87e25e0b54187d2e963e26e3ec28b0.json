{"ast":null,"code":"import { _ as _slicedToArray } from './_rollupPluginBabelHelpers-9b6cc24f.js';\nimport IMask from 'imask/esm/imask';\nimport { useRef, useState, useCallback, useEffect } from 'react';\n\nfunction useIMask(opts) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      onAccept = _ref.onAccept,\n      onComplete = _ref.onComplete;\n\n  var ref = useRef(null);\n  var maskRef = useRef(null);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      unmaskedValue = _useState4[0],\n      setUnmaskedValue = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      typedValue = _useState6[0],\n      setTypedValue = _useState6[1];\n\n  var _destroyMask = useCallback(function () {\n    var _maskRef$current;\n\n    (_maskRef$current = maskRef.current) === null || _maskRef$current === void 0 ? void 0 : _maskRef$current.destroy();\n    maskRef.current = null;\n  }, []);\n\n  var _onAccept = useCallback(function (event) {\n    if (!maskRef.current) return;\n    setTypedValue(maskRef.current.typedValue);\n    setUnmaskedValue(maskRef.current.unmaskedValue);\n    setValue(maskRef.current.value);\n    onAccept === null || onAccept === void 0 ? void 0 : onAccept(maskRef.current.value, maskRef.current, event);\n  }, [onAccept]);\n\n  var _onComplete = useCallback(function () {\n    return maskRef.current && (onComplete === null || onComplete === void 0 ? void 0 : onComplete(maskRef.current.value, maskRef.current));\n  }, [onComplete]);\n\n  useEffect(function () {\n    var el = ref.current;\n    if (!el || !(opts !== null && opts !== void 0 && opts.mask)) return _destroyMask();\n    var mask = maskRef.current;\n\n    if (!mask) {\n      if (el && opts !== null && opts !== void 0 && opts.mask) {\n        maskRef.current = IMask(el, opts);\n\n        if (el.defaultValue !== maskRef.current.value) {\n          _onAccept();\n        }\n      }\n    } else {\n      mask === null || mask === void 0 ? void 0 : mask.updateOptions(opts);\n    }\n  }, [opts, _destroyMask, _onAccept]);\n  useEffect(function () {\n    if (!maskRef.current) return;\n    var mask = maskRef.current;\n    mask.on('accept', _onAccept);\n    mask.on('complete', _onComplete);\n    return function () {\n      mask.off('accept', _onAccept);\n      mask.off('complete', _onComplete);\n    };\n  }, [_onAccept, _onComplete]);\n  useEffect(function () {\n    var mask = maskRef.current;\n\n    if (mask && mask.value !== value) {\n      mask.value = value;\n    }\n  }, [value]);\n  useEffect(function () {\n    var mask = maskRef.current;\n\n    if (mask && mask.unmaskedValue !== unmaskedValue) {\n      mask.unmaskedValue = unmaskedValue;\n    }\n  }, [unmaskedValue]);\n  useEffect(function () {\n    var mask = maskRef.current;\n    if (mask) mask.typedValue = typedValue;\n  }, [typedValue]);\n  useEffect(function () {\n    return _destroyMask;\n  }, [_destroyMask]);\n  return {\n    ref: ref,\n    maskRef: maskRef,\n    value: value,\n    setValue: setValue,\n    unmaskedValue: unmaskedValue,\n    setUnmaskedValue: setUnmaskedValue,\n    typedValue: typedValue,\n    setTypedValue: setTypedValue\n  };\n}\n\nexport { useIMask as default };","map":null,"metadata":{},"sourceType":"module"}