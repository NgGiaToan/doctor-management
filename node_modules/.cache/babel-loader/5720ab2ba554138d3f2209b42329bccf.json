{"ast":null,"code":"import _wrapRegExp from\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/esm/wrapRegExp.js\";import _objectSpread from\"C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _ from'@lodash';import FuseUtils from'@fuse/utils';import mockApi from'../mock-api.json';import mock from'../mock';var eventsDB=mockApi.components.examples.calendar_events.value;var labelsDB=mockApi.components.examples.calendar_labels.value;mock.onGet('/api/calendar/labels').reply(function(config){return[200,labelsDB];});mock.onPost('/api/calendar/labels').reply(function(_ref){var data=_ref.data;var newLabel=_objectSpread({id:FuseUtils.generateGUID()},JSON.parse(data));labelsDB.push(newLabel);return[200,newLabel];});mock.onPut(/\\/api\\/calendar\\/labels\\/[^/]+/).reply(function(_ref2){var url=_ref2.url,data=_ref2.data;var id=url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/calendar\\/labels\\/([^/]+)/,{id:1})).groups.id;_.assign(_.find(labelsDB,{id:id}),JSON.parse(data));return[200,_.find(labelsDB,{id:id})];});mock.onGet(/\\/api\\/calendar\\/labels\\/[^/]+/).reply(function(config){var id=config.url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/calendar\\/labels\\/([^/]+)/,{id:1})).groups.id;var response=_.find(labelsDB,{label:id});if(response){return[200,response];}return[404,'Requested label do not exist.'];});mock.onGet(/\\/api\\/calendar\\/labels\\/[^/]+/).reply(function(config){var id=config.url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/calendar\\/labels\\/([^/]+)/,{id:1})).groups.id;var response=_.find(labelsDB,{label:id});if(response){return[200,response];}return[404,'Requested label do not exist.'];});mock.onDelete(/\\/api\\/calendar\\/labels\\/[^/]+/).reply(function(config){var id=config.url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/calendar\\/labels\\/([^/]+)/,{id:1})).groups.id;_.remove(labelsDB,{id:id});_.remove(eventsDB,{extendedProps:{label:id}});return[200,id];});mock.onGet('/api/calendar/events').reply(function(config){return[200,eventsDB];});mock.onPost('/api/calendar/events').reply(function(_ref3){var data=_ref3.data;var newEvent=_objectSpread({id:FuseUtils.generateGUID()},JSON.parse(data));eventsDB.push(newEvent);return[200,newEvent];});mock.onPut(/\\/api\\/calendar\\/events\\/[^/]+/).reply(function(_ref4){var url=_ref4.url,data=_ref4.data;var id=url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/calendar\\/events\\/([^/]+)/,{id:1})).groups.id;_.assign(_.find(eventsDB,{id:id}),JSON.parse(data));return[200,_.find(eventsDB,{id:id})];});mock.onGet(/\\/api\\/calendar\\/events\\/[^/]+/).reply(function(config){var id=config.url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/calendar\\/events\\/([^/]+)/,{id:1})).groups.id;var response=_.find(eventsDB,{event:id});if(response){return[200,response];}return[404,'Requested event do not exist.'];});mock.onGet(/\\/api\\/calendar\\/events\\/[^/]+/).reply(function(config){var id=config.url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/calendar\\/events\\/([^/]+)/,{id:1})).groups.id;var response=_.find(eventsDB,{event:id});if(response){return[200,response];}return[404,'Requested event do not exist.'];});mock.onDelete(/\\/api\\/calendar\\/events\\/[^/]+/).reply(function(config){var id=config.url.match(/*#__PURE__*/_wrapRegExp(/\\/api\\/calendar\\/events\\/([^/]+)/,{id:1})).groups.id;_.remove(eventsDB,{id:id});return[200,id];});","map":null,"metadata":{},"sourceType":"module"}