{"ast":null,"code":"import { createAsyncThunk, createEntityAdapter, createSelector, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const getItems = createAsyncThunk('fileManagerApp/items/getItems', async folderId => {\n  const response = await axios.get(`/api/file-manager/${folderId}`);\n  const data = await response.data;\n  return data;\n});\nconst itemsAdapter = createEntityAdapter({});\nexport const {\n  selectAll: selectItems,\n  selectEntities: selectItemsEntities,\n  selectById: selectItemById\n} = itemsAdapter.getSelectors(state => state.fileManagerApp.items);\nconst itemsSlice = createSlice({\n  name: 'fileManagerApp/items',\n  initialState: itemsAdapter.getInitialState({\n    selectedItemId: null,\n    path: []\n  }),\n  reducers: {\n    setSelectedItem: (state, action) => {\n      state.selectedItemId = action.payload;\n    }\n  },\n  extraReducers: {\n    [getItems.fulfilled]: (state, action) => {\n      const {\n        items,\n        path\n      } = action.payload;\n      itemsAdapter.setAll(state, items);\n      state.path = path;\n      state.selectedItemId = null;\n    }\n  }\n});\nexport const selectFolders = createSelector([selectItems], items => {\n  return items.filter(item => item.type === 'folder');\n});\nexport const selectFiles = createSelector([selectItems], items => {\n  return items.filter(item => item.type !== 'folder');\n});\nexport const selectSelectedItem = _ref => {\n  let {\n    fileManagerApp\n  } = _ref;\n  return fileManagerApp.items.selectedItemId;\n};\nexport const selectPath = _ref2 => {\n  let {\n    fileManagerApp\n  } = _ref2;\n  return fileManagerApp.items.path;\n};\nexport const {\n  setSelectedItem\n} = itemsSlice.actions;\nexport default itemsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createEntityAdapter","createSelector","createSlice","axios","getItems","folderId","response","get","data","itemsAdapter","selectAll","selectItems","selectEntities","selectItemsEntities","selectById","selectItemById","getSelectors","state","fileManagerApp","items","itemsSlice","name","initialState","getInitialState","selectedItemId","path","reducers","setSelectedItem","action","payload","extraReducers","fulfilled","setAll","selectFolders","filter","item","type","selectFiles","selectSelectedItem","selectPath","actions","reducer"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/src/app/main/apps/file-manager/store/itemsSlice.js"],"sourcesContent":["import {\r\n  createAsyncThunk,\r\n  createEntityAdapter,\r\n  createSelector,\r\n  createSlice,\r\n} from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nexport const getItems = createAsyncThunk('fileManagerApp/items/getItems', async (folderId) => {\r\n  const response = await axios.get(`/api/file-manager/${folderId}`);\r\n  const data = await response.data;\r\n\r\n  return data;\r\n});\r\n\r\nconst itemsAdapter = createEntityAdapter({});\r\n\r\nexport const {\r\n  selectAll: selectItems,\r\n  selectEntities: selectItemsEntities,\r\n  selectById: selectItemById,\r\n} = itemsAdapter.getSelectors((state) => state.fileManagerApp.items);\r\n\r\nconst itemsSlice = createSlice({\r\n  name: 'fileManagerApp/items',\r\n  initialState: itemsAdapter.getInitialState({\r\n    selectedItemId: null,\r\n    path: [],\r\n  }),\r\n  reducers: {\r\n    setSelectedItem: (state, action) => {\r\n      state.selectedItemId = action.payload;\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [getItems.fulfilled]: (state, action) => {\r\n      const { items, path } = action.payload;\r\n      itemsAdapter.setAll(state, items);\r\n      state.path = path;\r\n      state.selectedItemId = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const selectFolders = createSelector([selectItems], (items) => {\r\n  return items.filter((item) => item.type === 'folder');\r\n});\r\n\r\nexport const selectFiles = createSelector([selectItems], (items) => {\r\n  return items.filter((item) => item.type !== 'folder');\r\n});\r\n\r\nexport const selectSelectedItem = ({ fileManagerApp }) => fileManagerApp.items.selectedItemId;\r\n\r\nexport const selectPath = ({ fileManagerApp }) => fileManagerApp.items.path;\r\n\r\nexport const { setSelectedItem } = itemsSlice.actions;\r\n\r\nexport default itemsSlice.reducer;\r\n"],"mappings":"AAAA,SACEA,gBADF,EAEEC,mBAFF,EAGEC,cAHF,EAIEC,WAJF,QAKO,kBALP;AAMA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,QAAQ,GAAGL,gBAAgB,CAAC,+BAAD,EAAkC,MAAOM,QAAP,IAAoB;EAC5F,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAN,CAAW,qBAAoBF,QAAS,EAAxC,CAAvB;EACA,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAA5B;EAEA,OAAOA,IAAP;AACD,CALuC,CAAjC;AAOP,MAAMC,YAAY,GAAGT,mBAAmB,CAAC,EAAD,CAAxC;AAEA,OAAO,MAAM;EACXU,SAAS,EAAEC,WADA;EAEXC,cAAc,EAAEC,mBAFL;EAGXC,UAAU,EAAEC;AAHD,IAITN,YAAY,CAACO,YAAb,CAA2BC,KAAD,IAAWA,KAAK,CAACC,cAAN,CAAqBC,KAA1D,CAJG;AAMP,MAAMC,UAAU,GAAGlB,WAAW,CAAC;EAC7BmB,IAAI,EAAE,sBADuB;EAE7BC,YAAY,EAAEb,YAAY,CAACc,eAAb,CAA6B;IACzCC,cAAc,EAAE,IADyB;IAEzCC,IAAI,EAAE;EAFmC,CAA7B,CAFe;EAM7BC,QAAQ,EAAE;IACRC,eAAe,EAAE,CAACV,KAAD,EAAQW,MAAR,KAAmB;MAClCX,KAAK,CAACO,cAAN,GAAuBI,MAAM,CAACC,OAA9B;IACD;EAHO,CANmB;EAW7BC,aAAa,EAAE;IACb,CAAC1B,QAAQ,CAAC2B,SAAV,GAAsB,CAACd,KAAD,EAAQW,MAAR,KAAmB;MACvC,MAAM;QAAET,KAAF;QAASM;MAAT,IAAkBG,MAAM,CAACC,OAA/B;MACApB,YAAY,CAACuB,MAAb,CAAoBf,KAApB,EAA2BE,KAA3B;MACAF,KAAK,CAACQ,IAAN,GAAaA,IAAb;MACAR,KAAK,CAACO,cAAN,GAAuB,IAAvB;IACD;EANY;AAXc,CAAD,CAA9B;AAqBA,OAAO,MAAMS,aAAa,GAAGhC,cAAc,CAAC,CAACU,WAAD,CAAD,EAAiBQ,KAAD,IAAW;EACpE,OAAOA,KAAK,CAACe,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACC,IAAL,KAAc,QAArC,CAAP;AACD,CAF0C,CAApC;AAIP,OAAO,MAAMC,WAAW,GAAGpC,cAAc,CAAC,CAACU,WAAD,CAAD,EAAiBQ,KAAD,IAAW;EAClE,OAAOA,KAAK,CAACe,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACC,IAAL,KAAc,QAArC,CAAP;AACD,CAFwC,CAAlC;AAIP,OAAO,MAAME,kBAAkB,GAAG;EAAA,IAAC;IAAEpB;EAAF,CAAD;EAAA,OAAwBA,cAAc,CAACC,KAAf,CAAqBK,cAA7C;AAAA,CAA3B;AAEP,OAAO,MAAMe,UAAU,GAAG;EAAA,IAAC;IAAErB;EAAF,CAAD;EAAA,OAAwBA,cAAc,CAACC,KAAf,CAAqBM,IAA7C;AAAA,CAAnB;AAEP,OAAO,MAAM;EAAEE;AAAF,IAAsBP,UAAU,CAACoB,OAAvC;AAEP,eAAepB,UAAU,CAACqB,OAA1B"},"metadata":{},"sourceType":"module"}