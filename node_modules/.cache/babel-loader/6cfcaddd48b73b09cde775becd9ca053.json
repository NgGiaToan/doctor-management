{"ast":null,"code":"'use strict';\n\nimport { ensureMinLength, toRFCDateTime, uuid } from '../utils';\nvar passwordSymbols = 'qwerty!@#$%^123456';\n\nfunction emailSample() {\n  return 'user@example.com';\n}\n\nfunction idnEmailSample() {\n  return 'пошта@укр.нет';\n}\n\nfunction passwordSample(min, max) {\n  var res = 'pa$$word';\n\n  if (min > res.length) {\n    res += '_';\n    res += ensureMinLength(passwordSymbols, min - res.length).substring(0, min - res.length);\n  }\n\n  return res;\n}\n\nfunction commonDateTimeSample(_ref) {\n  var min = _ref.min,\n      max = _ref.max,\n      omitTime = _ref.omitTime,\n      omitDate = _ref.omitDate;\n  var res = toRFCDateTime(new Date('2019-08-24T14:15:22.123Z'), omitTime, omitDate, false);\n\n  if (res.length < min) {\n    console.warn(\"Using minLength = \".concat(min, \" is incorrect with format \\\"date-time\\\"\"));\n  }\n\n  if (max && res.length > max) {\n    console.warn(\"Using maxLength = \".concat(max, \" is incorrect with format \\\"date-time\\\"\"));\n  }\n\n  return res;\n}\n\nfunction dateTimeSample(min, max) {\n  return commonDateTimeSample({\n    min: min,\n    max: max,\n    omitTime: false,\n    omitDate: false\n  });\n}\n\nfunction dateSample(min, max) {\n  return commonDateTimeSample({\n    min: min,\n    max: max,\n    omitTime: true,\n    omitDate: false\n  });\n}\n\nfunction timeSample(min, max) {\n  return commonDateTimeSample({\n    min: min,\n    max: max,\n    omitTime: false,\n    omitDate: true\n  }).slice(1);\n}\n\nfunction defaultSample(min, max) {\n  var res = ensureMinLength('string', min);\n\n  if (max && res.length > max) {\n    res = res.substring(0, max);\n  }\n\n  return res;\n}\n\nfunction ipv4Sample() {\n  return '192.168.0.1';\n}\n\nfunction ipv6Sample() {\n  return '2001:0db8:85a3:0000:0000:8a2e:0370:7334';\n}\n\nfunction hostnameSample() {\n  return 'example.com';\n}\n\nfunction idnHostnameSample() {\n  return 'приклад.укр';\n}\n\nfunction uriSample() {\n  return 'http://example.com';\n}\n\nfunction uriReferenceSample() {\n  return '../dictionary';\n}\n\nfunction uriTemplateSample() {\n  return 'http://example.com/{endpoint}';\n}\n\nfunction iriSample() {\n  return 'http://example.com';\n}\n\nfunction iriReferenceSample() {\n  return '../словник';\n}\n\nfunction uuidSample(_min, _max, propertyName) {\n  return uuid(propertyName || 'id');\n}\n\nfunction jsonPointerSample() {\n  return '/json/pointer';\n}\n\nfunction relativeJsonPointerSample() {\n  return '1/relative/json/pointer';\n}\n\nfunction regexSample() {\n  return '/regex/';\n}\n\nvar stringFormats = {\n  'email': emailSample,\n  'idn-email': idnEmailSample,\n  // https://tools.ietf.org/html/rfc6531#section-3.3\n  'password': passwordSample,\n  'date-time': dateTimeSample,\n  'date': dateSample,\n  'time': timeSample,\n  // full-time in https://tools.ietf.org/html/rfc3339#section-5.6\n  'ipv4': ipv4Sample,\n  'ipv6': ipv6Sample,\n  'hostname': hostnameSample,\n  'idn-hostname': idnHostnameSample,\n  // https://tools.ietf.org/html/rfc5890#section-2.3.2.3\n  'iri': iriSample,\n  // https://tools.ietf.org/html/rfc3987\n  'iri-reference': iriReferenceSample,\n  'uri': uriSample,\n  'uri-reference': uriReferenceSample,\n  // either a URI or relative-reference https://tools.ietf.org/html/rfc3986#section-4.1\n  'uri-template': uriTemplateSample,\n  'uuid': uuidSample,\n  'default': defaultSample,\n  'json-pointer': jsonPointerSample,\n  'relative-json-pointer': relativeJsonPointerSample,\n  // https://tools.ietf.org/html/draft-handrews-relative-json-pointer-01\n  'regex': regexSample\n};\nexport function sampleString(schema, options, spec, context) {\n  var format = schema.format || 'default';\n  var sampler = stringFormats[format] || defaultSample;\n  var propertyName = context && context.propertyName;\n  return sampler(schema.minLength | 0, schema.maxLength, propertyName);\n}","map":null,"metadata":{},"sourceType":"module"}