{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isNamedType = exports.normalizeTypes = exports.mapOf = exports.listOf = void 0;\n\nfunction listOf(typeName) {\n  return {\n    name: `${typeName}List`,\n    properties: {},\n    items: typeName\n  };\n}\n\nexports.listOf = listOf;\n\nfunction mapOf(typeName) {\n  return {\n    name: `${typeName}Map`,\n    properties: {},\n    additionalProperties: () => typeName\n  };\n}\n\nexports.mapOf = mapOf;\n\nfunction normalizeTypes(types) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const normalizedTypes = {};\n\n  for (const typeName of Object.keys(types)) {\n    normalizedTypes[typeName] = Object.assign(Object.assign({}, types[typeName]), {\n      name: typeName\n    });\n  }\n\n  for (const type of Object.values(normalizedTypes)) {\n    normalizeType(type);\n  }\n\n  return normalizedTypes;\n\n  function normalizeType(type) {\n    if (type.additionalProperties) {\n      type.additionalProperties = resolveType(type.additionalProperties);\n    }\n\n    if (type.items) {\n      type.items = resolveType(type.items);\n    }\n\n    if (type.properties) {\n      const mappedProps = {};\n\n      for (const [propName, prop] of Object.entries(type.properties)) {\n        mappedProps[propName] = resolveType(prop);\n\n        if (options.doNotResolveExamples && prop && prop.isExample) {\n          mappedProps[propName] = Object.assign(Object.assign({}, prop), {\n            resolvable: false\n          });\n        }\n      }\n\n      type.properties = mappedProps;\n    }\n  } // typings are painful here...\n\n\n  function resolveType(type) {\n    if (typeof type === 'string') {\n      if (!normalizedTypes[type]) {\n        throw new Error(`Unknown type name found: ${type}`);\n      }\n\n      return normalizedTypes[type];\n    } else if (typeof type === 'function') {\n      return (value, key) => {\n        return resolveType(type(value, key));\n      };\n    } else if (type && type.name) {\n      type = Object.assign({}, type);\n      normalizeType(type);\n      return type;\n    } else if (type && type.directResolveAs) {\n      return Object.assign(Object.assign({}, type), {\n        directResolveAs: resolveType(type.directResolveAs)\n      });\n    } else {\n      return type;\n    }\n  }\n}\n\nexports.normalizeTypes = normalizeTypes;\n\nfunction isNamedType(t) {\n  return typeof (t === null || t === void 0 ? void 0 : t.name) === 'string';\n}\n\nexports.isNamedType = isNamedType;","map":{"version":3,"names":["Object","defineProperty","exports","value","isNamedType","normalizeTypes","mapOf","listOf","typeName","name","properties","items","additionalProperties","types","options","normalizedTypes","keys","assign","type","values","normalizeType","resolveType","mappedProps","propName","prop","entries","doNotResolveExamples","isExample","resolvable","Error","key","directResolveAs","t"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@redocly/openapi-core/lib/types/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isNamedType = exports.normalizeTypes = exports.mapOf = exports.listOf = void 0;\nfunction listOf(typeName) {\n    return {\n        name: `${typeName}List`,\n        properties: {},\n        items: typeName,\n    };\n}\nexports.listOf = listOf;\nfunction mapOf(typeName) {\n    return {\n        name: `${typeName}Map`,\n        properties: {},\n        additionalProperties: () => typeName,\n    };\n}\nexports.mapOf = mapOf;\nfunction normalizeTypes(types, options = {}) {\n    const normalizedTypes = {};\n    for (const typeName of Object.keys(types)) {\n        normalizedTypes[typeName] = Object.assign(Object.assign({}, types[typeName]), { name: typeName });\n    }\n    for (const type of Object.values(normalizedTypes)) {\n        normalizeType(type);\n    }\n    return normalizedTypes;\n    function normalizeType(type) {\n        if (type.additionalProperties) {\n            type.additionalProperties = resolveType(type.additionalProperties);\n        }\n        if (type.items) {\n            type.items = resolveType(type.items);\n        }\n        if (type.properties) {\n            const mappedProps = {};\n            for (const [propName, prop] of Object.entries(type.properties)) {\n                mappedProps[propName] = resolveType(prop);\n                if (options.doNotResolveExamples && prop && prop.isExample) {\n                    mappedProps[propName] = Object.assign(Object.assign({}, prop), { resolvable: false });\n                }\n            }\n            type.properties = mappedProps;\n        }\n    }\n    // typings are painful here...\n    function resolveType(type) {\n        if (typeof type === 'string') {\n            if (!normalizedTypes[type]) {\n                throw new Error(`Unknown type name found: ${type}`);\n            }\n            return normalizedTypes[type];\n        }\n        else if (typeof type === 'function') {\n            return (value, key) => {\n                return resolveType(type(value, key));\n            };\n        }\n        else if (type && type.name) {\n            type = Object.assign({}, type);\n            normalizeType(type);\n            return type;\n        }\n        else if (type && type.directResolveAs) {\n            return Object.assign(Object.assign({}, type), { directResolveAs: resolveType(type.directResolveAs) });\n        }\n        else {\n            return type;\n        }\n    }\n}\nexports.normalizeTypes = normalizeTypes;\nfunction isNamedType(t) {\n    return typeof (t === null || t === void 0 ? void 0 : t.name) === 'string';\n}\nexports.isNamedType = isNamedType;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}