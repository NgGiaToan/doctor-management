{"ast":null,"code":"import FuseUtils from '@fuse/utils';\nimport _ from '@lodash';\nimport Base64 from 'crypto-js/enc-base64';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nimport Utf8 from 'crypto-js/enc-utf8';\nimport jwtDecode from 'jwt-decode';\nimport mock from '../mock';\nimport mockApi from '../mock-api.json';\nlet usersApi = mockApi.components.examples.auth_users.value;\n/* eslint-disable camelcase */\n\nmock.onGet('/api/auth/sign-in').reply(async config => {\n  const data = JSON.parse(config.data);\n  const {\n    email,\n    password\n  } = data;\n\n  const user = _.cloneDeep(usersApi.find(_user => _user.data.email === email));\n\n  const error = [];\n\n  if (!user) {\n    error.push({\n      type: 'email',\n      message: 'Check your email address'\n    });\n  }\n\n  if (user && user.password !== password) {\n    error.push({\n      type: 'password',\n      message: 'Check your password'\n    });\n  }\n\n  if (error.length === 0) {\n    delete user.password;\n    const access_token = generateJWTToken({\n      id: user.uuid\n    });\n    const response = {\n      user,\n      access_token\n    };\n    return [200, response];\n  }\n\n  return [200, {\n    error\n  }];\n});\nmock.onGet('/api/auth/access-token').reply(config => {\n  const data = JSON.parse(config.data);\n  const {\n    access_token\n  } = data;\n\n  if (verifyJWTToken(access_token)) {\n    const {\n      id\n    } = jwtDecode(access_token);\n\n    const user = _.cloneDeep(usersApi.find(_user => _user.uuid === id));\n\n    delete user.password;\n    const updatedAccessToken = generateJWTToken({\n      id: user.uuid\n    });\n    const response = {\n      user,\n      access_token: updatedAccessToken\n    };\n    return [200, response];\n  }\n\n  const error = 'Invalid access token detected';\n  return [401, {\n    error\n  }];\n});\nmock.onPost('/api/auth/sign-up').reply(request => {\n  const data = JSON.parse(request.data);\n  const {\n    displayName,\n    password,\n    email\n  } = data;\n  const isEmailExists = usersApi.find(_user => _user.data.email === email);\n  const error = [];\n\n  if (isEmailExists) {\n    error.push({\n      type: 'email',\n      message: 'The email address is already in use'\n    });\n  }\n\n  if (error.length === 0) {\n    const newUser = {\n      uuid: FuseUtils.generateGUID(),\n      from: 'custom-db',\n      password,\n      role: 'admin',\n      data: {\n        displayName,\n        photoURL: 'assets/images/avatars/Abbott.jpg',\n        email,\n        settings: {},\n        shortcuts: []\n      }\n    };\n    usersApi = [...usersApi, newUser];\n\n    const user = _.cloneDeep(newUser);\n\n    delete user.password;\n    const access_token = generateJWTToken({\n      id: user.uuid\n    });\n    const response = {\n      user,\n      access_token\n    };\n    return [200, response];\n  }\n\n  return [200, {\n    error\n  }];\n});\nmock.onPost('/api/auth/user/update').reply(config => {\n  const data = JSON.parse(config.data);\n  const {\n    user\n  } = data;\n  usersApi = usersApi.map(_user => {\n    if (user.uuid === user.id) {\n      return _.merge(_user, user);\n    }\n\n    return _user;\n  });\n  return [200, user];\n});\n/**\r\n * JWT Token Generator/Verifier Helpers\r\n * !! Created for Demonstration Purposes, cannot be used for PRODUCTION\r\n */\n\nconst jwtSecret = 'some-secret-code-goes-here';\n\nfunction base64url(source) {\n  // Encode in classical base64\n  let encodedSource = Base64.stringify(source); // Remove padding equal characters\n\n  encodedSource = encodedSource.replace(/=+$/, ''); // Replace characters according to base64url specifications\n\n  encodedSource = encodedSource.replace(/\\+/g, '-');\n  encodedSource = encodedSource.replace(/\\//g, '_'); // Return the base64 encoded string\n\n  return encodedSource;\n}\n\nfunction generateJWTToken(tokenPayload) {\n  // Define token header\n  const header = {\n    alg: 'HS256',\n    typ: 'JWT'\n  }; // Calculate the issued at and expiration dates\n\n  const date = new Date();\n  const iat = Math.floor(date.getTime() / 1000);\n  const exp = Math.floor(date.setDate(date.getDate() + 7) / 1000); // Define token payload\n\n  const payload = {\n    iat,\n    iss: 'Fuse',\n    exp,\n    ...tokenPayload\n  }; // Stringify and encode the header\n\n  const stringifiedHeader = Utf8.parse(JSON.stringify(header));\n  const encodedHeader = base64url(stringifiedHeader); // Stringify and encode the payload\n\n  const stringifiedPayload = Utf8.parse(JSON.stringify(payload));\n  const encodedPayload = base64url(stringifiedPayload); // Sign the encoded header and mock-api\n\n  let signature = `${encodedHeader}.${encodedPayload}`;\n  signature = HmacSHA256(signature, jwtSecret);\n  signature = base64url(signature); // Build and return the token\n\n  return `${encodedHeader}.${encodedPayload}.${signature}`;\n}\n\nfunction verifyJWTToken(token) {\n  // Split the token into parts\n  const parts = token.split('.');\n  const header = parts[0];\n  const payload = parts[1];\n  const signature = parts[2]; // Re-sign and encode the header and payload using the secret\n\n  const signatureCheck = base64url(HmacSHA256(`${header}.${payload}`, jwtSecret)); // Verify that the resulting signature is valid\n\n  return signature === signatureCheck;\n}","map":{"version":3,"names":["FuseUtils","_","Base64","HmacSHA256","Utf8","jwtDecode","mock","mockApi","usersApi","components","examples","auth_users","value","onGet","reply","config","data","JSON","parse","email","password","user","cloneDeep","find","_user","error","push","type","message","length","access_token","generateJWTToken","id","uuid","response","verifyJWTToken","updatedAccessToken","onPost","request","displayName","isEmailExists","newUser","generateGUID","from","role","photoURL","settings","shortcuts","map","merge","jwtSecret","base64url","source","encodedSource","stringify","replace","tokenPayload","header","alg","typ","date","Date","iat","Math","floor","getTime","exp","setDate","getDate","payload","iss","stringifiedHeader","encodedHeader","stringifiedPayload","encodedPayload","signature","token","parts","split","signatureCheck"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/src/@mock-api/api/auth-api.js"],"sourcesContent":["import FuseUtils from '@fuse/utils';\r\nimport _ from '@lodash';\r\nimport Base64 from 'crypto-js/enc-base64';\r\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\r\nimport Utf8 from 'crypto-js/enc-utf8';\r\nimport jwtDecode from 'jwt-decode';\r\nimport mock from '../mock';\r\nimport mockApi from '../mock-api.json';\r\n\r\nlet usersApi = mockApi.components.examples.auth_users.value;\r\n\r\n/* eslint-disable camelcase */\r\n\r\nmock.onGet('/api/auth/sign-in').reply(async (config) => {\r\n  const data = JSON.parse(config.data);\r\n  const { email, password } = data;\r\n  const user = _.cloneDeep(usersApi.find((_user) => _user.data.email === email));\r\n\r\n  const error = [];\r\n\r\n  if (!user) {\r\n    error.push({\r\n      type: 'email',\r\n      message: 'Check your email address',\r\n    });\r\n  }\r\n\r\n  if (user && user.password !== password) {\r\n    error.push({\r\n      type: 'password',\r\n      message: 'Check your password',\r\n    });\r\n  }\r\n\r\n  if (error.length === 0) {\r\n    delete user.password;\r\n\r\n    const access_token = generateJWTToken({ id: user.uuid });\r\n\r\n    const response = {\r\n      user,\r\n      access_token,\r\n    };\r\n\r\n    return [200, response];\r\n  }\r\n\r\n  return [200, { error }];\r\n});\r\n\r\nmock.onGet('/api/auth/access-token').reply((config) => {\r\n  const data = JSON.parse(config.data);\r\n  const { access_token } = data;\r\n\r\n  if (verifyJWTToken(access_token)) {\r\n    const { id } = jwtDecode(access_token);\r\n\r\n    const user = _.cloneDeep(usersApi.find((_user) => _user.uuid === id));\r\n\r\n    delete user.password;\r\n\r\n    const updatedAccessToken = generateJWTToken({ id: user.uuid });\r\n\r\n    const response = {\r\n      user,\r\n      access_token: updatedAccessToken,\r\n    };\r\n\r\n    return [200, response];\r\n  }\r\n  const error = 'Invalid access token detected';\r\n  return [401, { error }];\r\n});\r\n\r\nmock.onPost('/api/auth/sign-up').reply((request) => {\r\n  const data = JSON.parse(request.data);\r\n  const { displayName, password, email } = data;\r\n  const isEmailExists = usersApi.find((_user) => _user.data.email === email);\r\n  const error = [];\r\n\r\n  if (isEmailExists) {\r\n    error.push({\r\n      type: 'email',\r\n      message: 'The email address is already in use',\r\n    });\r\n  }\r\n\r\n  if (error.length === 0) {\r\n    const newUser = {\r\n      uuid: FuseUtils.generateGUID(),\r\n      from: 'custom-db',\r\n      password,\r\n      role: 'admin',\r\n      data: {\r\n        displayName,\r\n        photoURL: 'assets/images/avatars/Abbott.jpg',\r\n        email,\r\n        settings: {},\r\n        shortcuts: [],\r\n      },\r\n    };\r\n\r\n    usersApi = [...usersApi, newUser];\r\n\r\n    const user = _.cloneDeep(newUser);\r\n\r\n    delete user.password;\r\n\r\n    const access_token = generateJWTToken({ id: user.uuid });\r\n\r\n    const response = {\r\n      user,\r\n      access_token,\r\n    };\r\n\r\n    return [200, response];\r\n  }\r\n  return [200, { error }];\r\n});\r\n\r\nmock.onPost('/api/auth/user/update').reply((config) => {\r\n  const data = JSON.parse(config.data);\r\n  const { user } = data;\r\n\r\n  usersApi = usersApi.map((_user) => {\r\n    if (user.uuid === user.id) {\r\n      return _.merge(_user, user);\r\n    }\r\n    return _user;\r\n  });\r\n\r\n  return [200, user];\r\n});\r\n\r\n/**\r\n * JWT Token Generator/Verifier Helpers\r\n * !! Created for Demonstration Purposes, cannot be used for PRODUCTION\r\n */\r\n\r\nconst jwtSecret = 'some-secret-code-goes-here';\r\n\r\nfunction base64url(source) {\r\n  // Encode in classical base64\r\n  let encodedSource = Base64.stringify(source);\r\n\r\n  // Remove padding equal characters\r\n  encodedSource = encodedSource.replace(/=+$/, '');\r\n\r\n  // Replace characters according to base64url specifications\r\n  encodedSource = encodedSource.replace(/\\+/g, '-');\r\n  encodedSource = encodedSource.replace(/\\//g, '_');\r\n\r\n  // Return the base64 encoded string\r\n  return encodedSource;\r\n}\r\n\r\nfunction generateJWTToken(tokenPayload) {\r\n  // Define token header\r\n  const header = {\r\n    alg: 'HS256',\r\n    typ: 'JWT',\r\n  };\r\n\r\n  // Calculate the issued at and expiration dates\r\n  const date = new Date();\r\n  const iat = Math.floor(date.getTime() / 1000);\r\n  const exp = Math.floor(date.setDate(date.getDate() + 7) / 1000);\r\n\r\n  // Define token payload\r\n  const payload = {\r\n    iat,\r\n    iss: 'Fuse',\r\n    exp,\r\n    ...tokenPayload,\r\n  };\r\n\r\n  // Stringify and encode the header\r\n  const stringifiedHeader = Utf8.parse(JSON.stringify(header));\r\n  const encodedHeader = base64url(stringifiedHeader);\r\n\r\n  // Stringify and encode the payload\r\n  const stringifiedPayload = Utf8.parse(JSON.stringify(payload));\r\n  const encodedPayload = base64url(stringifiedPayload);\r\n\r\n  // Sign the encoded header and mock-api\r\n  let signature = `${encodedHeader}.${encodedPayload}`;\r\n  signature = HmacSHA256(signature, jwtSecret);\r\n  signature = base64url(signature);\r\n\r\n  // Build and return the token\r\n  return `${encodedHeader}.${encodedPayload}.${signature}`;\r\n}\r\n\r\nfunction verifyJWTToken(token) {\r\n  // Split the token into parts\r\n  const parts = token.split('.');\r\n  const header = parts[0];\r\n  const payload = parts[1];\r\n  const signature = parts[2];\r\n\r\n  // Re-sign and encode the header and payload using the secret\r\n  const signatureCheck = base64url(HmacSHA256(`${header}.${payload}`, jwtSecret));\r\n\r\n  // Verify that the resulting signature is valid\r\n  return signature === signatureCheck;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}