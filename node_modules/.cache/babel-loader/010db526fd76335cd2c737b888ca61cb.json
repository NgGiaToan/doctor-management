{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PathHttpVerbsOrder = void 0;\nconst defaultOrder = ['get', 'head', 'post', 'put', 'patch', 'delete', 'options', 'trace'];\n\nconst PathHttpVerbsOrder = opts => {\n  const order = opts && opts.order || defaultOrder;\n\n  if (!Array.isArray(order)) {\n    throw new Error('path-http-verbs-order `order` option must be an array');\n  }\n\n  return {\n    PathItem(path, _ref) {\n      let {\n        report,\n        location\n      } = _ref;\n      const httpVerbs = Object.keys(path).filter(k => order.includes(k));\n\n      for (let i = 0; i < httpVerbs.length - 1; i++) {\n        const aIdx = order.indexOf(httpVerbs[i]);\n        const bIdx = order.indexOf(httpVerbs[i + 1]);\n\n        if (bIdx < aIdx) {\n          report({\n            message: 'Operation http verbs must be ordered.',\n            location: Object.assign({\n              reportOnKey: true\n            }, location.child(httpVerbs[i + 1]))\n          });\n        }\n      }\n    }\n\n  };\n};\n\nexports.PathHttpVerbsOrder = PathHttpVerbsOrder;","map":{"version":3,"names":["Object","defineProperty","exports","value","PathHttpVerbsOrder","defaultOrder","opts","order","Array","isArray","Error","PathItem","path","report","location","httpVerbs","keys","filter","k","includes","i","length","aIdx","indexOf","bIdx","message","assign","reportOnKey","child"],"sources":["C:/Users/giato/Downloads/Workspace/.Net/api/doctor-management-fe/node_modules/@redocly/openapi-core/lib/rules/common/path-http-verbs-order.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PathHttpVerbsOrder = void 0;\nconst defaultOrder = ['get', 'head', 'post', 'put', 'patch', 'delete', 'options', 'trace'];\nconst PathHttpVerbsOrder = (opts) => {\n    const order = (opts && opts.order) || defaultOrder;\n    if (!Array.isArray(order)) {\n        throw new Error('path-http-verbs-order `order` option must be an array');\n    }\n    return {\n        PathItem(path, { report, location }) {\n            const httpVerbs = Object.keys(path).filter((k) => order.includes(k));\n            for (let i = 0; i < httpVerbs.length - 1; i++) {\n                const aIdx = order.indexOf(httpVerbs[i]);\n                const bIdx = order.indexOf(httpVerbs[i + 1]);\n                if (bIdx < aIdx) {\n                    report({\n                        message: 'Operation http verbs must be ordered.',\n                        location: Object.assign({ reportOnKey: true }, location.child(httpVerbs[i + 1])),\n                    });\n                }\n            }\n        },\n    };\n};\nexports.PathHttpVerbsOrder = PathHttpVerbsOrder;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kBAAR,GAA6B,KAAK,CAAlC;AACA,MAAMC,YAAY,GAAG,CAAC,KAAD,EAAQ,MAAR,EAAgB,MAAhB,EAAwB,KAAxB,EAA+B,OAA/B,EAAwC,QAAxC,EAAkD,SAAlD,EAA6D,OAA7D,CAArB;;AACA,MAAMD,kBAAkB,GAAIE,IAAD,IAAU;EACjC,MAAMC,KAAK,GAAID,IAAI,IAAIA,IAAI,CAACC,KAAd,IAAwBF,YAAtC;;EACA,IAAI,CAACG,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAL,EAA2B;IACvB,MAAM,IAAIG,KAAJ,CAAU,uDAAV,CAAN;EACH;;EACD,OAAO;IACHC,QAAQ,CAACC,IAAD,QAA6B;MAAA,IAAtB;QAAEC,MAAF;QAAUC;MAAV,CAAsB;MACjC,MAAMC,SAAS,GAAGf,MAAM,CAACgB,IAAP,CAAYJ,IAAZ,EAAkBK,MAAlB,CAA0BC,CAAD,IAAOX,KAAK,CAACY,QAAN,CAAeD,CAAf,CAAhC,CAAlB;;MACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,SAAS,CAACM,MAAV,GAAmB,CAAvC,EAA0CD,CAAC,EAA3C,EAA+C;QAC3C,MAAME,IAAI,GAAGf,KAAK,CAACgB,OAAN,CAAcR,SAAS,CAACK,CAAD,CAAvB,CAAb;QACA,MAAMI,IAAI,GAAGjB,KAAK,CAACgB,OAAN,CAAcR,SAAS,CAACK,CAAC,GAAG,CAAL,CAAvB,CAAb;;QACA,IAAII,IAAI,GAAGF,IAAX,EAAiB;UACbT,MAAM,CAAC;YACHY,OAAO,EAAE,uCADN;YAEHX,QAAQ,EAAEd,MAAM,CAAC0B,MAAP,CAAc;cAAEC,WAAW,EAAE;YAAf,CAAd,EAAqCb,QAAQ,CAACc,KAAT,CAAeb,SAAS,CAACK,CAAC,GAAG,CAAL,CAAxB,CAArC;UAFP,CAAD,CAAN;QAIH;MACJ;IACJ;;EAbE,CAAP;AAeH,CApBD;;AAqBAlB,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B"},"metadata":{},"sourceType":"script"}